{"version":3,"file":"chats.js","sourceRoot":"/","sources":["Socket/chats.ts"],"names":[],"mappings":"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","sourcesContent":["import { Boom } from '@hapi/boom'\nimport { proto } from '../../WAProto'\nimport { PROCESSABLE_HISTORY_TYPES } from '../Defaults'\nimport { ALL_WA_PATCH_NAMES, ChatModification, ChatMutation, LTHashState, MessageUpsertType, PresenceData, SocketConfig, WABusinessHoursConfig, WABusinessProfile, WAMediaUpload, WAMessage, WAPatchCreate, WAPatchName, WAPresence, WAPrivacyOnlineValue, WAPrivacyValue, WAReadReceiptsValue } from '../Types'\nimport { chatModificationToAppPatch, ChatMutationMap, decodePatches, decodeSyncdSnapshot, encodeSyncdPatch, extractSyncdPatches, generateProfilePicture, getHistoryMsg, newLTHashState, processSyncAction } from '../Utils'\nimport { makeMutex } from '../Utils/make-mutex'\nimport processMessage from '../Utils/process-message'\nimport { BinaryNode, getBinaryNodeChild, getBinaryNodeChildren, jidNormalizedUser, reduceBinaryNodeToDictionary, S_WHATSAPP_NET } from '../WABinary'\nimport { makeSocket } from './socket'\n\nconst MAX_SYNC_ATTEMPTS = 2\n\nexport const makeChatsSocket = (config: SocketConfig) => {\n\tconst {\n\t\tlogger,\n\t\tmarkOnlineOnConnect,\n\t\tfireInitQueries,\n\t\tappStateMacVerification,\n\t\tshouldIgnoreJid,\n\t\tshouldSyncHistoryMessage,\n\t} = config\n\tconst sock = makeSocket(config)\n\tconst {\n\t\tev,\n\t\tws,\n\t\tauthState,\n\t\tgenerateMessageTag,\n\t\tsendNode,\n\t\tquery,\n\t\tonUnexpectedError,\n\t} = sock\n\n\tlet privacySettings: { [_: string]: string } | undefined\n\tlet needToFlushWithAppStateSync = false\n\tlet pendingAppStateSync = false\n\t/** this mutex ensures that the notifications (receipts, messages etc.) are processed in order */\n\tconst processingMutex = makeMutex()\n\n\t/** helper function to fetch the given app state sync key */\n\tconst getAppStateSyncKey = async(keyId: string) => {\n\t\tconst { [keyId]: key } = await authState.keys.get('app-state-sync-key', [keyId])\n\t\treturn key\n\t}\n\n\tconst fetchPrivacySettings = async(force = false) => {\n\t\tif(!privacySettings || force) {\n\t\t\tconst { content } = await query({\n\t\t\t\ttag: 'iq',\n\t\t\t\tattrs: {\n\t\t\t\t\txmlns: 'privacy',\n\t\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\t\ttype: 'get'\n\t\t\t\t},\n\t\t\t\tcontent: [\n\t\t\t\t\t{ tag: 'privacy', attrs: {} }\n\t\t\t\t]\n\t\t\t})\n\t\t\tprivacySettings = reduceBinaryNodeToDictionary(content?.[0] as BinaryNode, 'category')\n\t\t}\n\n\t\treturn privacySettings\n\t}\n\n\t/** helper function to run a privacy IQ query */\n\tconst privacyQuery = async(name: string, value: string) => {\n\t\tawait query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\txmlns: 'privacy',\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'set'\n\t\t\t},\n\t\t\tcontent: [{\n\t\t\t\ttag: 'privacy',\n\t\t\t\tattrs: {},\n\t\t\t\tcontent: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'category',\n\t\t\t\t\t\tattrs: { name, value }\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}]\n\t\t})\n\t}\n\n\tconst updateLastSeenPrivacy = async(value: WAPrivacyValue) => {\n\t\tawait privacyQuery('last', value)\n\t}\n\n\tconst updateOnlinePrivacy = async(value: WAPrivacyOnlineValue) => {\n\t\tawait privacyQuery('online', value)\n\t}\n\n\tconst updateProfilePicturePrivacy = async(value: WAPrivacyValue) => {\n\t\tawait privacyQuery('profile', value)\n\t}\n\n\tconst updateStatusPrivacy = async(value: WAPrivacyValue) => {\n\t\tawait privacyQuery('status', value)\n\t}\n\n\tconst updateReadReceiptsPrivacy = async(value: WAReadReceiptsValue) => {\n\t\tawait privacyQuery('readreceipts', value)\n\t}\n\n\tconst updateGroupsAddPrivacy = async(value: WAPrivacyValue) => {\n\t\tawait privacyQuery('groupadd', value)\n\t}\n\n\tconst updateDefaultDisappearingMode = async(duration: number) => {\n\t\tawait query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\txmlns: 'disappearing_mode',\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'set'\n\t\t\t},\n\t\t\tcontent: [{\n\t\t\t\ttag: 'disappearing_mode',\n\t\t\t\tattrs: {\n\t\t\t\t\tduration: duration.toString()\n\t\t\t\t}\n\t\t\t}]\n\t\t})\n\t}\n\n\t/** helper function to run a generic IQ query */\n\tconst interactiveQuery = async(userNodes: BinaryNode[], queryNode: BinaryNode) => {\n\t\tconst result = await query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'get',\n\t\t\t\txmlns: 'usync',\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'usync',\n\t\t\t\t\tattrs: {\n\t\t\t\t\t\tsid: generateMessageTag(),\n\t\t\t\t\t\tmode: 'query',\n\t\t\t\t\t\tlast: 'true',\n\t\t\t\t\t\tindex: '0',\n\t\t\t\t\t\tcontext: 'interactive',\n\t\t\t\t\t},\n\t\t\t\t\tcontent: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'query',\n\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\tcontent: [queryNode]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'list',\n\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\tcontent: userNodes\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t})\n\n\t\tconst usyncNode = getBinaryNodeChild(result, 'usync')\n\t\tconst listNode = getBinaryNodeChild(usyncNode, 'list')\n\t\tconst users = getBinaryNodeChildren(listNode, 'user')\n\n\t\treturn users\n\t}\n\n\tconst onWhatsApp = async(...jids: string[]) => {\n\t\tconst query = { tag: 'contact', attrs: {} }\n\t\tconst list = jids.map((jid) => {\n\t\t\t// insures only 1 + is there\n\t\t\tconst content = `+${jid.replace('+', '')}`\n\n\t\t\treturn {\n\t\t\t\ttag: 'user',\n\t\t\t\tattrs: {},\n\t\t\t\tcontent: [{\n\t\t\t\t\ttag: 'contact',\n\t\t\t\t\tattrs: {},\n\t\t\t\t\tcontent,\n\t\t\t\t}],\n\t\t\t}\n\t\t})\n\t\tconst results = await interactiveQuery(list, query)\n\n\t\treturn results.map(user => {\n\t\t\tconst contact = getBinaryNodeChild(user, 'contact')\n\t\t\treturn { exists: contact?.attrs.type === 'in', jid: user.attrs.jid }\n\t\t}).filter(item => item.exists)\n\t}\n\n\tconst fetchStatus = async(jid: string) => {\n\t\tconst [result] = await interactiveQuery(\n\t\t\t[{ tag: 'user', attrs: { jid } }],\n\t\t\t{ tag: 'status', attrs: {} }\n\t\t)\n\t\tif(result) {\n\t\t\tconst status = getBinaryNodeChild(result, 'status')\n\t\t\treturn {\n\t\t\t\tstatus: status?.content!.toString(),\n\t\t\t\tsetAt: new Date(+(status?.attrs.t || 0) * 1000)\n\t\t\t}\n\t\t}\n\t}\n\n\t/** update the profile picture for yourself or a group */\n\tconst updateProfilePicture = async(jid: string, content: WAMediaUpload) => {\n\t\tconst { img } = await generateProfilePicture(content)\n\t\tawait query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: jidNormalizedUser(jid),\n\t\t\t\ttype: 'set',\n\t\t\t\txmlns: 'w:profile:picture'\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'picture',\n\t\t\t\t\tattrs: { type: 'image' },\n\t\t\t\t\tcontent: img\n\t\t\t\t}\n\t\t\t]\n\t\t})\n\t}\n\n\t/** remove the profile picture for yourself or a group */\n\tconst removeProfilePicture = async(jid: string) => {\n\t\tawait query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: jidNormalizedUser(jid),\n\t\t\t\ttype: 'set',\n\t\t\t\txmlns: 'w:profile:picture'\n\t\t\t}\n\t\t})\n\t}\n\n\t/** update the profile status for yourself */\n\tconst updateProfileStatus = async(status: string) => {\n\t\tawait query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'set',\n\t\t\t\txmlns: 'status'\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'status',\n\t\t\t\t\tattrs: {},\n\t\t\t\t\tcontent: Buffer.from(status, 'utf-8')\n\t\t\t\t}\n\t\t\t]\n\t\t})\n\t}\n\n\tconst updateProfileName = async(name: string) => {\n\t\tawait chatModify({ pushNameSetting: name }, '')\n\t}\n\n\tconst fetchBlocklist = async() => {\n\t\tconst result = await query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\txmlns: 'blocklist',\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'get'\n\t\t\t}\n\t\t})\n\n\t\tconst listNode = getBinaryNodeChild(result, 'list')\n\t\treturn getBinaryNodeChildren(listNode, 'item')\n\t\t\t.map(n => n.attrs.jid)\n\t}\n\n\tconst updateBlockStatus = async(jid: string, action: 'block' | 'unblock') => {\n\t\tawait query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\txmlns: 'blocklist',\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'set'\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'item',\n\t\t\t\t\tattrs: {\n\t\t\t\t\t\taction,\n\t\t\t\t\t\tjid\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t})\n\t}\n\n\tconst getBusinessProfile = async(jid: string): Promise<WABusinessProfile | void> => {\n\t\tconst results = await query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: 's.whatsapp.net',\n\t\t\t\txmlns: 'w:biz',\n\t\t\t\ttype: 'get'\n\t\t\t},\n\t\t\tcontent: [{\n\t\t\t\ttag: 'business_profile',\n\t\t\t\tattrs: { v: '244' },\n\t\t\t\tcontent: [{\n\t\t\t\t\ttag: 'profile',\n\t\t\t\t\tattrs: { jid }\n\t\t\t\t}]\n\t\t\t}]\n\t\t})\n\n\t\tconst profileNode = getBinaryNodeChild(results, 'business_profile')\n\t\tconst profiles = getBinaryNodeChild(profileNode, 'profile')\n\t\tif(profiles) {\n\t\t\tconst address = getBinaryNodeChild(profiles, 'address')\n\t\t\tconst description = getBinaryNodeChild(profiles, 'description')\n\t\t\tconst website = getBinaryNodeChild(profiles, 'website')\n\t\t\tconst email = getBinaryNodeChild(profiles, 'email')\n\t\t\tconst category = getBinaryNodeChild(getBinaryNodeChild(profiles, 'categories'), 'category')\n\t\t\tconst businessHours = getBinaryNodeChild(profiles, 'business_hours')\n\t\t\tconst businessHoursConfig = businessHours\n\t\t\t\t? getBinaryNodeChildren(businessHours, 'business_hours_config')\n\t\t\t\t: undefined\n\t\t\tconst websiteStr = website?.content?.toString()\n\t\t\treturn {\n\t\t\t\twid: profiles.attrs?.jid,\n\t\t\t\taddress: address?.content?.toString(),\n\t\t\t\tdescription: description?.content?.toString() || '',\n\t\t\t\twebsite: websiteStr ? [websiteStr] : [],\n\t\t\t\temail: email?.content?.toString(),\n\t\t\t\tcategory: category?.content?.toString(),\n\t\t\t\t'business_hours': {\n\t\t\t\t\ttimezone: businessHours?.attrs?.timezone,\n\t\t\t\t\t'business_config': businessHoursConfig?.map(({ attrs }) => attrs as unknown as WABusinessHoursConfig)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst cleanDirtyBits = async(type: 'account_sync' | 'groups', fromTimestamp?: number | string) => {\n\t\tlogger.info({ fromTimestamp }, 'clean dirty bits ' + type)\n\t\tawait sendNode({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'set',\n\t\t\t\txmlns: 'urn:xmpp:whatsapp:dirty',\n\t\t\t\tid: generateMessageTag(),\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'clean',\n\t\t\t\t\tattrs: {\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\t...(fromTimestamp ? { timestamp: fromTimestamp.toString() } : null),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t})\n\t}\n\n\tconst newAppStateChunkHandler = (isInitialSync: boolean) => {\n\t\treturn {\n\t\t\tonMutation(mutation: ChatMutation) {\n\t\t\t\tprocessSyncAction(\n\t\t\t\t\tmutation,\n\t\t\t\t\tev,\n\t\t\t\t\tauthState.creds.me!,\n\t\t\t\t\tisInitialSync ? { accountSettings: authState.creds.accountSettings } : undefined,\n\t\t\t\t\tlogger\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst resyncAppState = ev.createBufferedFunction(async(collections: readonly WAPatchName[], isInitialSync: boolean) => {\n\t\t// we use this to determine which events to fire\n\t\t// otherwise when we resync from scratch -- all notifications will fire\n\t\tconst initialVersionMap: { [T in WAPatchName]?: number } = {}\n\t\tconst globalMutationMap: ChatMutationMap = {}\n\n\t\tawait authState.keys.transaction(\n\t\t\tasync() => {\n\t\t\t\tconst collectionsToHandle = new Set<string>(collections)\n\t\t\t\t// in case something goes wrong -- ensure we don't enter a loop that cannot be exited from\n\t\t\t\tconst attemptsMap: { [T in WAPatchName]?: number } = {}\n\t\t\t\t// keep executing till all collections are done\n\t\t\t\t// sometimes a single patch request will not return all the patches (God knows why)\n\t\t\t\t// so we fetch till they're all done (this is determined by the \"has_more_patches\" flag)\n\t\t\t\twhile(collectionsToHandle.size) {\n\t\t\t\t\tconst states = {} as { [T in WAPatchName]: LTHashState }\n\t\t\t\t\tconst nodes: BinaryNode[] = []\n\n\t\t\t\t\tfor(const name of collectionsToHandle) {\n\t\t\t\t\t\tconst result = await authState.keys.get('app-state-sync-version', [name])\n\t\t\t\t\t\tlet state = result[name]\n\n\t\t\t\t\t\tif(state) {\n\t\t\t\t\t\t\tif(typeof initialVersionMap[name] === 'undefined') {\n\t\t\t\t\t\t\t\tinitialVersionMap[name] = state.version\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate = newLTHashState()\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstates[name] = state\n\n\t\t\t\t\t\tlogger.info(`resyncing ${name} from v${state.version}`)\n\n\t\t\t\t\t\tnodes.push({\n\t\t\t\t\t\t\ttag: 'collection',\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tversion: state.version.toString(),\n\t\t\t\t\t\t\t\t// return snapshot if being synced from scratch\n\t\t\t\t\t\t\t\t'return_snapshot': (!state.version).toString()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = await query({\n\t\t\t\t\t\ttag: 'iq',\n\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\t\t\t\txmlns: 'w:sync:app:state',\n\t\t\t\t\t\t\ttype: 'set'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttag: 'sync',\n\t\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\t\tcontent: nodes\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\n\t\t\t\t\t// extract from binary node\n\t\t\t\t\tconst decoded = await extractSyncdPatches(result, config?.options)\n\t\t\t\t\tfor(const key in decoded) {\n\t\t\t\t\t\tconst name = key as WAPatchName\n\t\t\t\t\t\tconst { patches, hasMorePatches, snapshot } = decoded[name]\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif(snapshot) {\n\t\t\t\t\t\t\t\tconst { state: newState, mutationMap } = await decodeSyncdSnapshot(\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tsnapshot,\n\t\t\t\t\t\t\t\t\tgetAppStateSyncKey,\n\t\t\t\t\t\t\t\t\tinitialVersionMap[name],\n\t\t\t\t\t\t\t\t\tappStateMacVerification.snapshot\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tstates[name] = newState\n\t\t\t\t\t\t\t\tObject.assign(globalMutationMap, mutationMap)\n\n\t\t\t\t\t\t\t\tlogger.info(`restored state of ${name} from snapshot to v${newState.version} with mutations`)\n\n\t\t\t\t\t\t\t\tawait authState.keys.set({ 'app-state-sync-version': { [name]: newState } })\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// only process if there are syncd patches\n\t\t\t\t\t\t\tif(patches.length) {\n\t\t\t\t\t\t\t\tconst { state: newState, mutationMap } = await decodePatches(\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tpatches,\n\t\t\t\t\t\t\t\t\tstates[name],\n\t\t\t\t\t\t\t\t\tgetAppStateSyncKey,\n\t\t\t\t\t\t\t\t\tconfig.options,\n\t\t\t\t\t\t\t\t\tinitialVersionMap[name],\n\t\t\t\t\t\t\t\t\tlogger,\n\t\t\t\t\t\t\t\t\tappStateMacVerification.patch\n\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\tawait authState.keys.set({ 'app-state-sync-version': { [name]: newState } })\n\n\t\t\t\t\t\t\t\tlogger.info(`synced ${name} to v${newState.version}`)\n\t\t\t\t\t\t\t\tinitialVersionMap[name] = newState.version\n\n\t\t\t\t\t\t\t\tObject.assign(globalMutationMap, mutationMap)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(hasMorePatches) {\n\t\t\t\t\t\t\t\tlogger.info(`${name} has more patches...`)\n\t\t\t\t\t\t\t} else { // collection is done with sync\n\t\t\t\t\t\t\t\tcollectionsToHandle.delete(name)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch(error) {\n\t\t\t\t\t\t\t// if retry attempts overshoot\n\t\t\t\t\t\t\t// or key not found\n\t\t\t\t\t\t\tconst isIrrecoverableError = attemptsMap[name]! >= MAX_SYNC_ATTEMPTS\n\t\t\t\t\t\t\t\t|| error.output?.statusCode === 404\n\t\t\t\t\t\t\t\t|| error.name === 'TypeError'\n\t\t\t\t\t\t\tlogger.info(\n\t\t\t\t\t\t\t\t{ name, error: error.stack },\n\t\t\t\t\t\t\t\t`failed to sync state from version${isIrrecoverableError ? '' : ', removing and trying from scratch'}`\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tawait authState.keys.set({ 'app-state-sync-version': { [name]: null } })\n\t\t\t\t\t\t\t// increment number of retries\n\t\t\t\t\t\t\tattemptsMap[name] = (attemptsMap[name] || 0) + 1\n\n\t\t\t\t\t\t\tif(isIrrecoverableError) {\n\t\t\t\t\t\t\t\t// stop retrying\n\t\t\t\t\t\t\t\tcollectionsToHandle.delete(name)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\n\t\tconst { onMutation } = newAppStateChunkHandler(isInitialSync)\n\t\tfor(const key in globalMutationMap) {\n\t\t\tonMutation(globalMutationMap[key])\n\t\t}\n\t})\n\n\t/**\n\t * fetch the profile picture of a user/group\n\t * type = \"preview\" for a low res picture\n\t * type = \"image for the high res picture\"\n\t */\n\tconst profilePictureUrl = async(jid: string, type: 'preview' | 'image' = 'preview', timeoutMs?: number) => {\n\t\tjid = jidNormalizedUser(jid)\n\t\tconst result = await query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: jid,\n\t\t\t\ttype: 'get',\n\t\t\t\txmlns: 'w:profile:picture'\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{ tag: 'picture', attrs: { type, query: 'url' } }\n\t\t\t]\n\t\t}, timeoutMs)\n\t\tconst child = getBinaryNodeChild(result, 'picture')\n\t\treturn child?.attrs?.url\n\t}\n\n\tconst sendPresenceUpdate = async(type: WAPresence, toJid?: string) => {\n\t\tconst me = authState.creds.me!\n\t\tif(type === 'available' || type === 'unavailable') {\n\t\t\tif(!me.name) {\n\t\t\t\tlogger.warn('no name present, ignoring presence update request...')\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tev.emit('connection.update', { isOnline: type === 'available' })\n\n\t\t\tawait sendNode({\n\t\t\t\ttag: 'presence',\n\t\t\t\tattrs: {\n\t\t\t\t\tname: me.name,\n\t\t\t\t\ttype\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\tawait sendNode({\n\t\t\t\ttag: 'chatstate',\n\t\t\t\tattrs: {\n\t\t\t\t\tfrom: me.id,\n\t\t\t\t\tto: toJid!,\n\t\t\t\t},\n\t\t\t\tcontent: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: type === 'recording' ? 'composing' : type,\n\t\t\t\t\t\tattrs: type === 'recording' ? { media: 'audio' } : {}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * @param toJid the jid to subscribe to\n\t * @param tcToken token for subscription, use if present\n\t */\n\tconst presenceSubscribe = (toJid: string, tcToken?: Buffer) => (\n\t\tsendNode({\n\t\t\ttag: 'presence',\n\t\t\tattrs: {\n\t\t\t\tto: toJid,\n\t\t\t\tid: generateMessageTag(),\n\t\t\t\ttype: 'subscribe'\n\t\t\t},\n\t\t\tcontent: tcToken\n\t\t\t\t? [\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'tctoken',\n\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\tcontent: tcToken\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t\t: undefined\n\t\t})\n\t)\n\n\tconst handlePresenceUpdate = ({ tag, attrs, content }: BinaryNode) => {\n\t\tlet presence: PresenceData | undefined\n\t\tconst jid = attrs.from\n\t\tconst participant = attrs.participant || attrs.from\n\n\t\tif(shouldIgnoreJid(jid)) {\n\t\t\treturn\n\t\t}\n\n\t\tif(tag === 'presence') {\n\t\t\tpresence = {\n\t\t\t\tlastKnownPresence: attrs.type === 'unavailable' ? 'unavailable' : 'available',\n\t\t\t\tlastSeen: attrs.last && attrs.last !== 'deny' ? +attrs.last : undefined\n\t\t\t}\n\t\t} else if(Array.isArray(content)) {\n\t\t\tconst [firstChild] = content\n\t\t\tlet type = firstChild.tag as WAPresence\n\t\t\tif(type === 'paused') {\n\t\t\t\ttype = 'available'\n\t\t\t}\n\n\t\t\tif(firstChild.attrs?.media === 'audio') {\n\t\t\t\ttype = 'recording'\n\t\t\t}\n\n\t\t\tpresence = { lastKnownPresence: type }\n\t\t} else {\n\t\t\tlogger.error({ tag, attrs, content }, 'recv invalid presence node')\n\t\t}\n\n\t\tif(presence) {\n\t\t\tev.emit('presence.update', { id: jid, presences: { [participant]: presence } })\n\t\t}\n\t}\n\n\tconst appPatch = async(patchCreate: WAPatchCreate) => {\n\t\tconst name = patchCreate.type\n\t\tconst myAppStateKeyId = authState.creds.myAppStateKeyId\n\t\tif(!myAppStateKeyId) {\n\t\t\tthrow new Boom('App state key not present!', { statusCode: 400 })\n\t\t}\n\n\t\tlet initial: LTHashState\n\t\tlet encodeResult: { patch: proto.ISyncdPatch, state: LTHashState }\n\n\t\tawait processingMutex.mutex(\n\t\t\tasync() => {\n\t\t\t\tawait authState.keys.transaction(\n\t\t\t\t\tasync() => {\n\t\t\t\t\t\tlogger.debug({ patch: patchCreate }, 'applying app patch')\n\n\t\t\t\t\t\tawait resyncAppState([name], false)\n\n\t\t\t\t\t\tconst { [name]: currentSyncVersion } = await authState.keys.get('app-state-sync-version', [name])\n\t\t\t\t\t\tinitial = currentSyncVersion || newLTHashState()\n\n\t\t\t\t\t\tencodeResult = await encodeSyncdPatch(\n\t\t\t\t\t\t\tpatchCreate,\n\t\t\t\t\t\t\tmyAppStateKeyId,\n\t\t\t\t\t\t\tinitial,\n\t\t\t\t\t\t\tgetAppStateSyncKey,\n\t\t\t\t\t\t)\n\t\t\t\t\t\tconst { patch, state } = encodeResult\n\n\t\t\t\t\t\tconst node: BinaryNode = {\n\t\t\t\t\t\t\ttag: 'iq',\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\t\t\t\t\ttype: 'set',\n\t\t\t\t\t\t\t\txmlns: 'w:sync:app:state'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttag: 'sync',\n\t\t\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttag: 'collection',\n\t\t\t\t\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t\t\tversion: (state.version - 1).toString(),\n\t\t\t\t\t\t\t\t\t\t\t\t'return_snapshot': 'false'\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\ttag: 'patch',\n\t\t\t\t\t\t\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontent: proto.SyncdPatch.encode(patch).finish()\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait query(node)\n\n\t\t\t\t\t\tawait authState.keys.set({ 'app-state-sync-version': { [name]: state } })\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\n\t\tif(config.emitOwnEvents) {\n\t\t\tconst { onMutation } = newAppStateChunkHandler(false)\n\t\t\tconst { mutationMap } = await decodePatches(\n\t\t\t\tname,\n\t\t\t\t[{ ...encodeResult!.patch, version: { version: encodeResult!.state.version }, }],\n\t\t\t\tinitial!,\n\t\t\t\tgetAppStateSyncKey,\n\t\t\t\tconfig.options,\n\t\t\t\tundefined,\n\t\t\t\tlogger,\n\t\t\t)\n\t\t\tfor(const key in mutationMap) {\n\t\t\t\tonMutation(mutationMap[key])\n\t\t\t}\n\t\t}\n\t}\n\n\t/** sending abt props may fix QR scan fail if server expects */\n\tconst fetchAbt = async() => {\n\t\tconst abtNode = await query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\txmlns: 'abt',\n\t\t\t\ttype: 'get',\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{ tag: 'props', attrs: { protocol: '1' } }\n\t\t\t]\n\t\t})\n\n\t\tconst propsNode = getBinaryNodeChild(abtNode, 'props')\n\n\t\tlet props: { [_: string]: string } = {}\n\t\tif(propsNode) {\n\t\t\tprops = reduceBinaryNodeToDictionary(propsNode, 'prop')\n\t\t}\n\n\t\tlogger.debug('fetched abt')\n\n\t\treturn props\n\t}\n\n\t/** sending non-abt props may fix QR scan fail if server expects */\n\tconst fetchProps = async() => {\n\t\tconst resultNode = await query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\txmlns: 'w',\n\t\t\t\ttype: 'get',\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{ tag: 'props', attrs: {} }\n\t\t\t]\n\t\t})\n\n\t\tconst propsNode = getBinaryNodeChild(resultNode, 'props')\n\n\t\tlet props: { [_: string]: string } = {}\n\t\tif(propsNode) {\n\t\t\tprops = reduceBinaryNodeToDictionary(propsNode, 'prop')\n\t\t}\n\n\t\tlogger.debug('fetched props')\n\n\t\treturn props\n\t}\n\n\t/**\n\t * modify a chat -- mark unread, read etc.\n\t * lastMessages must be sorted in reverse chronologically\n\t * requires the last messages till the last message received; required for archive & unread\n\t*/\n\tconst chatModify = (mod: ChatModification, jid: string) => {\n\t\tconst patch = chatModificationToAppPatch(mod, jid)\n\t\treturn appPatch(patch)\n\t}\n\n\t/**\n\t * Star or Unstar a message\n\t */\n\tconst star = (jid: string, messages: { id: string, fromMe?: boolean }[], star: boolean) => {\n\t\treturn chatModify({\n\t\t\tstar: {\n\t\t\t\tmessages,\n\t\t\t\tstar\n\t\t\t}\n\t\t}, jid)\n\t}\n\n\t/**\n\t * Adds label for the chats\n\t */\n\tconst addChatLabel = (jid: string, labelId: string) => {\n\t\treturn chatModify({\n\t\t\taddChatLabel: {\n\t\t\t\tlabelId\n\t\t\t}\n\t\t}, jid)\n\t}\n\n\t/**\n\t * Removes label for the chat\n\t */\n\tconst removeChatLabel = (jid: string, labelId: string) => {\n\t\treturn chatModify({\n\t\t\tremoveChatLabel: {\n\t\t\t\tlabelId\n\t\t\t}\n\t\t}, jid)\n\t}\n\n\t/**\n\t * Adds label for the message\n\t */\n\tconst addMessageLabel = (jid: string, messageId: string, labelId: string) => {\n\t\treturn chatModify({\n\t\t\taddMessageLabel: {\n\t\t\t\tmessageId,\n\t\t\t\tlabelId\n\t\t\t}\n\t\t}, jid)\n\t}\n\n\t/**\n\t * Removes label for the message\n\t */\n\tconst removeMessageLabel = (jid: string, messageId: string, labelId: string) => {\n\t\treturn chatModify({\n\t\t\tremoveMessageLabel: {\n\t\t\t\tmessageId,\n\t\t\t\tlabelId\n\t\t\t}\n\t\t}, jid)\n\t}\n\n\t/**\n\t * queries need to be fired on connection open\n\t * help ensure parity with WA Web\n\t * */\n\tconst executeInitQueries = async() => {\n\t\tawait Promise.all([\n\t\t\tfetchAbt(),\n\t\t\tfetchProps(),\n\t\t\tfetchBlocklist(),\n\t\t\tfetchPrivacySettings(),\n\t\t])\n\t}\n\n\tconst upsertMessage = ev.createBufferedFunction(async(msg: WAMessage, type: MessageUpsertType) => {\n\t\tev.emit('messages.upsert', { messages: [msg], type })\n\n\t\tif(!!msg.pushName) {\n\t\t\tlet jid = msg.key.fromMe ? authState.creds.me!.id : (msg.key.participant || msg.key.remoteJid)\n\t\t\tjid = jidNormalizedUser(jid!)\n\n\t\t\tif(!msg.key.fromMe) {\n\t\t\t\tev.emit('contacts.update', [{ id: jid, notify: msg.pushName, verifiedName: msg.verifiedBizName! }])\n\t\t\t}\n\n\t\t\t// update our pushname too\n\t\t\tif(msg.key.fromMe && msg.pushName && authState.creds.me?.name !== msg.pushName) {\n\t\t\t\tev.emit('creds.update', { me: { ...authState.creds.me!, name: msg.pushName } })\n\t\t\t}\n\t\t}\n\n\t\tconst historyMsg = getHistoryMsg(msg.message!)\n\t\tconst shouldProcessHistoryMsg = historyMsg\n\t\t\t? (\n\t\t\t\tshouldSyncHistoryMessage(historyMsg)\n\t\t\t\t&& PROCESSABLE_HISTORY_TYPES.includes(historyMsg.syncType!)\n\t\t\t)\n\t\t\t: false\n\n\t\tif(historyMsg && !authState.creds.myAppStateKeyId) {\n\t\t\tlogger.warn('skipping app state sync, as myAppStateKeyId is not set')\n\t\t\tpendingAppStateSync = true\n\t\t}\n\n\t\tawait Promise.all([\n\t\t\t(async() => {\n\t\t\t\tif(\n\t\t\t\t\thistoryMsg\n\t\t\t\t\t&& authState.creds.myAppStateKeyId\n\t\t\t\t) {\n\t\t\t\t\tpendingAppStateSync = false\n\t\t\t\t\tawait doAppStateSync()\n\t\t\t\t}\n\t\t\t})(),\n\t\t\tprocessMessage(\n\t\t\t\tmsg,\n\t\t\t\t{\n\t\t\t\t\tshouldProcessHistoryMsg,\n\t\t\t\t\tev,\n\t\t\t\t\tcreds: authState.creds,\n\t\t\t\t\tkeyStore: authState.keys,\n\t\t\t\t\tlogger,\n\t\t\t\t\toptions: config.options,\n\t\t\t\t\tgetMessage: config.getMessage,\n\t\t\t\t}\n\t\t\t)\n\t\t])\n\n\t\tif(\n\t\t\tmsg.message?.protocolMessage?.appStateSyncKeyShare\n\t\t\t&& pendingAppStateSync\n\t\t) {\n\t\t\tawait doAppStateSync()\n\t\t\tpendingAppStateSync = false\n\t\t}\n\n\t\tasync function doAppStateSync() {\n\t\t\tif(!authState.creds.accountSyncCounter) {\n\t\t\t\tlogger.info('doing initial app state sync')\n\t\t\t\tawait resyncAppState(ALL_WA_PATCH_NAMES, true)\n\n\t\t\t\tconst accountSyncCounter = (authState.creds.accountSyncCounter || 0) + 1\n\t\t\t\tev.emit('creds.update', { accountSyncCounter })\n\n\t\t\t\tif(needToFlushWithAppStateSync) {\n\t\t\t\t\tlogger.debug('flushing with app state sync')\n\t\t\t\t\tev.flush()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\n\tws.on('CB:presence', handlePresenceUpdate)\n\tws.on('CB:chatstate', handlePresenceUpdate)\n\n\tws.on('CB:ib,,dirty', async(node: BinaryNode) => {\n\t\tconst { attrs } = getBinaryNodeChild(node, 'dirty')!\n\t\tconst type = attrs.type\n\t\tswitch (type) {\n\t\tcase 'account_sync':\n\t\t\tif(attrs.timestamp) {\n\t\t\t\tlet { lastAccountSyncTimestamp } = authState.creds\n\t\t\t\tif(lastAccountSyncTimestamp) {\n\t\t\t\t\tawait cleanDirtyBits('account_sync', lastAccountSyncTimestamp)\n\t\t\t\t}\n\n\t\t\t\tlastAccountSyncTimestamp = +attrs.timestamp\n\t\t\t\tev.emit('creds.update', { lastAccountSyncTimestamp })\n\t\t\t}\n\n\t\t\tbreak\n\t\tcase 'groups':\n\t\t\t// handled in groups.ts\n\t\t\tbreak\n\t\tdefault:\n\t\t\tlogger.info({ node }, 'received unknown sync')\n\t\t\tbreak\n\t\t}\n\t})\n\n\tev.on('connection.update', ({ connection, receivedPendingNotifications }) => {\n\t\tif(connection === 'open') {\n\t\t\tif(fireInitQueries) {\n\t\t\t\texecuteInitQueries()\n\t\t\t\t\t.catch(\n\t\t\t\t\t\terror => onUnexpectedError(error, 'init queries')\n\t\t\t\t\t)\n\t\t\t}\n\n\t\t\tsendPresenceUpdate(markOnlineOnConnect ? 'available' : 'unavailable')\n\t\t\t\t.catch(\n\t\t\t\t\terror => onUnexpectedError(error, 'presence update requests')\n\t\t\t\t)\n\t\t}\n\n\t\tif(receivedPendingNotifications) {\n\t\t\t// if we don't have the app state key\n\t\t\t// we keep buffering events until we finally have\n\t\t\t// the key and can sync the messages\n\t\t\tif(!authState.creds?.myAppStateKeyId && !config.mobile) {\n\t\t\t\tev.buffer()\n\t\t\t\tneedToFlushWithAppStateSync = true\n\t\t\t}\n\t\t}\n\t})\n\n\treturn {\n\t\t...sock,\n\t\tprocessingMutex,\n\t\tfetchPrivacySettings,\n\t\tupsertMessage,\n\t\tappPatch,\n\t\tsendPresenceUpdate,\n\t\tpresenceSubscribe,\n\t\tprofilePictureUrl,\n\t\tonWhatsApp,\n\t\tfetchBlocklist,\n\t\tfetchStatus,\n\t\tupdateProfilePicture,\n\t\tremoveProfilePicture,\n\t\tupdateProfileStatus,\n\t\tupdateProfileName,\n\t\tupdateBlockStatus,\n\t\tupdateLastSeenPrivacy,\n\t\tupdateOnlinePrivacy,\n\t\tupdateProfilePicturePrivacy,\n\t\tupdateStatusPrivacy,\n\t\tupdateReadReceiptsPrivacy,\n\t\tupdateGroupsAddPrivacy,\n\t\tupdateDefaultDisappearingMode,\n\t\tgetBusinessProfile,\n\t\tresyncAppState,\n\t\tchatModify,\n\t\tcleanDirtyBits,\n\t\taddChatLabel,\n\t\tremoveChatLabel,\n\t\taddMessageLabel,\n\t\tremoveMessageLabel,\n\t\tstar\n\t}\n}\n"]}