{"version":3,"file":"groups.js","sourceRoot":"/","sources":["Socket/groups.ts"],"names":[],"mappings":"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","sourcesContent":["import { proto } from '../../WAProto'\nimport { GroupMetadata, GroupParticipant, ParticipantAction, SocketConfig, WAMessageKey, WAMessageStubType } from '../Types'\nimport { generateMessageID, unixTimestampSeconds } from '../Utils'\nimport { BinaryNode, getBinaryNodeChild, getBinaryNodeChildren, getBinaryNodeChildString, jidEncode, jidNormalizedUser } from '../WABinary'\nimport { makeChatsSocket } from './chats'\n\nexport const makeGroupsSocket = (config: SocketConfig) => {\n\tconst sock = makeChatsSocket(config)\n\tconst { authState, ev, query, upsertMessage } = sock\n\n\tconst groupQuery = async(jid: string, type: 'get' | 'set', content: BinaryNode[]) => (\n\t\tquery({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\ttype,\n\t\t\t\txmlns: 'w:g2',\n\t\t\t\tto: jid,\n\t\t\t},\n\t\t\tcontent\n\t\t})\n\t)\n\n\tconst groupMetadata = async(jid: string) => {\n\t\tconst result = await groupQuery(\n\t\t\tjid,\n\t\t\t'get',\n\t\t\t[ { tag: 'query', attrs: { request: 'interactive' } } ]\n\t\t)\n\t\treturn extractGroupMetadata(result)\n\t}\n\n\n\tconst groupFetchAllParticipating = async() => {\n\t\tconst result = await query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: '@g.us',\n\t\t\t\txmlns: 'w:g2',\n\t\t\t\ttype: 'get',\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'participating',\n\t\t\t\t\tattrs: { },\n\t\t\t\t\tcontent: [\n\t\t\t\t\t\t{ tag: 'participants', attrs: { } },\n\t\t\t\t\t\t{ tag: 'description', attrs: { } }\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t})\n\t\tconst data: { [_: string]: GroupMetadata } = { }\n\t\tconst groupsChild = getBinaryNodeChild(result, 'groups')\n\t\tif(groupsChild) {\n\t\t\tconst groups = getBinaryNodeChildren(groupsChild, 'group')\n\t\t\tfor(const groupNode of groups) {\n\t\t\t\tconst meta = extractGroupMetadata({\n\t\t\t\t\ttag: 'result',\n\t\t\t\t\tattrs: { },\n\t\t\t\t\tcontent: [groupNode]\n\t\t\t\t})\n\t\t\t\tdata[meta.id] = meta\n\t\t\t}\n\t\t}\n\n\t\tsock.ev.emit('groups.update', Object.values(data))\n\n\t\treturn data\n\t}\n\n\tsock.ws.on('CB:ib,,dirty', async(node: BinaryNode) => {\n\t\tconst { attrs } = getBinaryNodeChild(node, 'dirty')!\n\t\tif(attrs.type !== 'groups') {\n\t\t\treturn\n\t\t}\n\n\t\tawait groupFetchAllParticipating()\n\t\tawait sock.cleanDirtyBits('groups')\n\t})\n\n\treturn {\n\t\t...sock,\n\t\tgroupMetadata,\n\t\tgroupCreate: async(subject: string, participants: string[]) => {\n\t\t\tconst key = generateMessageID()\n\t\t\tconst result = await groupQuery(\n\t\t\t\t'@g.us',\n\t\t\t\t'set',\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'create',\n\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\tkey\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontent: participants.map(jid => ({\n\t\t\t\t\t\t\ttag: 'participant',\n\t\t\t\t\t\t\tattrs: { jid }\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t)\n\t\t\treturn extractGroupMetadata(result)\n\t\t},\n\t\tgroupLeave: async(id: string) => {\n\t\t\tawait groupQuery(\n\t\t\t\t'@g.us',\n\t\t\t\t'set',\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'leave',\n\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t{ tag: 'group', attrs: { id } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t)\n\t\t},\n\t\tgroupUpdateSubject: async(jid: string, subject: string) => {\n\t\t\tawait groupQuery(\n\t\t\t\tjid,\n\t\t\t\t'set',\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'subject',\n\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\tcontent: Buffer.from(subject, 'utf-8')\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t)\n\t\t},\n\t\tgroupRequestParticipantsList: async(jid: string) => {\n\t\t\tconst result = await groupQuery(\n\t\t\t\tjid,\n\t\t\t\t'get',\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'membership_approval_requests',\n\t\t\t\t\t\tattrs: {}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t)\n\t\t\tconst node = getBinaryNodeChild(result, 'membership_approval_requests')\n\t\t\tconst participants = getBinaryNodeChildren(node, 'membership_approval_request')\n\t\t\treturn participants.map(v => v.attrs)\n\t\t},\n\t\tgroupRequestParticipantsUpdate: async(jid: string, participants: string[], action: 'approve' | 'reject') => {\n\t\t\tconst result = await groupQuery(\n\t\t\t\tjid,\n\t\t\t\t'set',\n\t\t\t\t[{\n\t\t\t\t\ttag: 'membership_requests_action',\n\t\t\t\t\tattrs: {},\n\t\t\t\t\tcontent: \t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: action,\n\t\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\t\tcontent: participants.map(jid => ({\n\t\t\t\t\t\t\t\ttag: 'participant',\n\t\t\t\t\t\t\t\tattrs: { jid }\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}]\n\t\t\t)\n\t\t\tconst node = getBinaryNodeChild(result, 'membership_requests_action')\n\t\t\tconst nodeAction = getBinaryNodeChild(node, action)\n\t\t\tconst participantsAffected = getBinaryNodeChildren(nodeAction, 'participant')\n\t\t\treturn participantsAffected.map(p => {\n\t\t\t\treturn { status: p.attrs.error || '200', jid: p.attrs.jid }\n\t\t\t})\n\t\t},\n\t\tgroupParticipantsUpdate: async(\n\t\t\tjid: string,\n\t\t\tparticipants: string[],\n\t\t\taction: ParticipantAction\n\t\t) => {\n\t\t\tconst result = await groupQuery(\n\t\t\t\tjid,\n\t\t\t\t'set',\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: action,\n\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\tcontent: participants.map(jid => ({\n\t\t\t\t\t\t\ttag: 'participant',\n\t\t\t\t\t\t\tattrs: { jid }\n\t\t\t\t\t\t}))\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t)\n\t\t\tconst node = getBinaryNodeChild(result, action)\n\t\t\tconst participantsAffected = getBinaryNodeChildren(node, 'participant')\n\t\t\treturn participantsAffected.map(p => {\n\t\t\t\treturn { status: p.attrs.error || '200', jid: p.attrs.jid, content: p }\n\t\t\t})\n\t\t},\n\t\tgroupUpdateDescription: async(jid: string, description?: string) => {\n\t\t\tconst metadata = await groupMetadata(jid)\n\t\t\tconst prev = metadata.descId ?? null\n\n\t\t\tawait groupQuery(\n\t\t\t\tjid,\n\t\t\t\t'set',\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'description',\n\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t...(description ? { id: generateMessageID() } : { delete: 'true' }),\n\t\t\t\t\t\t\t...(prev ? { prev } : {})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontent: description ? [\n\t\t\t\t\t\t\t{ tag: 'body', attrs: {}, content: Buffer.from(description, 'utf-8') }\n\t\t\t\t\t\t] : undefined\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t)\n\t\t},\n\t\tgroupInviteCode: async(jid: string) => {\n\t\t\tconst result = await groupQuery(jid, 'get', [{ tag: 'invite', attrs: {} }])\n\t\t\tconst inviteNode = getBinaryNodeChild(result, 'invite')\n\t\t\treturn inviteNode?.attrs.code\n\t\t},\n\t\tgroupRevokeInvite: async(jid: string) => {\n\t\t\tconst result = await groupQuery(jid, 'set', [{ tag: 'invite', attrs: {} }])\n\t\t\tconst inviteNode = getBinaryNodeChild(result, 'invite')\n\t\t\treturn inviteNode?.attrs.code\n\t\t},\n\t\tgroupAcceptInvite: async(code: string) => {\n\t\t\tconst results = await groupQuery('@g.us', 'set', [{ tag: 'invite', attrs: { code } }])\n\t\t\tconst result = getBinaryNodeChild(results, 'group')\n\t\t\treturn result?.attrs.jid\n\t\t},\n\t\t/**\n\t\t * accept a GroupInviteMessage\n\t\t * @param key the key of the invite message, or optionally only provide the jid of the person who sent the invite\n\t\t * @param inviteMessage the message to accept\n\t\t */\n\t\tgroupAcceptInviteV4: ev.createBufferedFunction(async(key: string | WAMessageKey, inviteMessage: proto.Message.IGroupInviteMessage) => {\n\t\t\tkey = typeof key === 'string' ? { remoteJid: key } : key\n\t\t\tconst results = await groupQuery(inviteMessage.groupJid!, 'set', [{\n\t\t\t\ttag: 'accept',\n\t\t\t\tattrs: {\n\t\t\t\t\tcode: inviteMessage.inviteCode!,\n\t\t\t\t\texpiration: inviteMessage.inviteExpiration!.toString(),\n\t\t\t\t\tadmin: key.remoteJid!\n\t\t\t\t}\n\t\t\t}])\n\n\t\t\t// if we have the full message key\n\t\t\t// update the invite message to be expired\n\t\t\tif(key.id) {\n\t\t\t\t// create new invite message that is expired\n\t\t\t\tinviteMessage = proto.Message.GroupInviteMessage.fromObject(inviteMessage)\n\t\t\t\tinviteMessage.inviteExpiration = 0\n\t\t\t\tinviteMessage.inviteCode = ''\n\t\t\t\tev.emit('messages.update', [\n\t\t\t\t\t{\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\t\tgroupInviteMessage: inviteMessage\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t])\n\t\t\t}\n\n\t\t\t// generate the group add message\n\t\t\tawait upsertMessage(\n\t\t\t\t{\n\t\t\t\t\tkey: {\n\t\t\t\t\t\tremoteJid: inviteMessage.groupJid,\n\t\t\t\t\t\tid: generateMessageID(),\n\t\t\t\t\t\tfromMe: false,\n\t\t\t\t\t\tparticipant: key.remoteJid,\n\t\t\t\t\t},\n\t\t\t\t\tmessageStubType: WAMessageStubType.GROUP_PARTICIPANT_ADD,\n\t\t\t\t\tmessageStubParameters: [\n\t\t\t\t\t\tauthState.creds.me!.id\n\t\t\t\t\t],\n\t\t\t\t\tparticipant: key.remoteJid,\n\t\t\t\t\tmessageTimestamp: unixTimestampSeconds()\n\t\t\t\t},\n\t\t\t\t'notify'\n\t\t\t)\n\n\t\t\treturn results.attrs.from\n\t\t}),\n\t\tgroupGetInviteInfo: async(code: string) => {\n\t\t\tconst results = await groupQuery('@g.us', 'get', [{ tag: 'invite', attrs: { code } }])\n\t\t\treturn extractGroupMetadata(results)\n\t\t},\n\t\tgroupToggleEphemeral: async(jid: string, ephemeralExpiration: number) => {\n\t\t\tconst content: BinaryNode = ephemeralExpiration ?\n\t\t\t\t{ tag: 'ephemeral', attrs: { expiration: ephemeralExpiration.toString() } } :\n\t\t\t\t{ tag: 'not_ephemeral', attrs: { } }\n\t\t\tawait groupQuery(jid, 'set', [content])\n\t\t},\n\t\tgroupSettingUpdate: async(jid: string, setting: 'announcement' | 'not_announcement' | 'locked' | 'unlocked') => {\n\t\t\tawait groupQuery(jid, 'set', [ { tag: setting, attrs: { } } ])\n\t\t},\n\t\tgroupFetchAllParticipating\n\t}\n}\n\n\nexport const extractGroupMetadata = (result: BinaryNode) => {\n\tconst group = getBinaryNodeChild(result, 'group')!\n\tconst descChild = getBinaryNodeChild(group, 'description')\n\tlet desc: string | undefined\n\tlet descId: string | undefined\n\tif(descChild) {\n\t\tdesc = getBinaryNodeChildString(descChild, 'body')\n\t\tdescId = descChild.attrs.id\n\t}\n\n\tconst groupId = group.attrs.id.includes('@') ? group.attrs.id : jidEncode(group.attrs.id, 'g.us')\n\tconst eph = getBinaryNodeChild(group, 'ephemeral')?.attrs.expiration\n\tconst memberAddMode = getBinaryNodeChildString(group, 'member_add_mode') === 'all_member_add'\n\tconst metadata: GroupMetadata = {\n\t\tid: groupId,\n\t\tsubject: group.attrs.subject,\n\t\tsubjectOwner: group.attrs.s_o,\n\t\tsubjectTime: +group.attrs.s_t,\n\t\tsize: +group.attrs.size,\n\t\tcreation: +group.attrs.creation,\n\t\towner: group.attrs.creator ? jidNormalizedUser(group.attrs.creator) : undefined,\n\t\tdesc,\n\t\tdescId,\n\t\trestrict: !!getBinaryNodeChild(group, 'locked'),\n\t\tannounce: !!getBinaryNodeChild(group, 'announcement'),\n\t\tisCommunity: !!getBinaryNodeChild(group, 'parent'),\n\t\tisCommunityAnnounce: !!getBinaryNodeChild(group, 'default_sub_group'),\n\t\tmemberAddMode,\n\t\tparticipants: getBinaryNodeChildren(group, 'participant').map(\n\t\t\t({ attrs }) => {\n\t\t\t\treturn {\n\t\t\t\t\tid: attrs.jid,\n\t\t\t\t\tadmin: (attrs.type || null) as GroupParticipant['admin'],\n\t\t\t\t}\n\t\t\t}\n\t\t),\n\t\tephemeralDuration: eph ? +eph : undefined\n\t}\n\treturn metadata\n}\n"]}