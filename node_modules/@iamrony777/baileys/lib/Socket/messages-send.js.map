{"version":3,"file":"messages-send.js","sourceRoot":"/","sources":["Socket/messages-send.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { Boom } from '@hapi/boom'\nimport NodeCache from 'node-cache'\nimport { proto } from '../../WAProto'\nimport { DEFAULT_CACHE_TTLS, WA_DEFAULT_EPHEMERAL } from '../Defaults'\nimport { AnyMessageContent, MediaConnInfo, MessageReceiptType, MessageRelayOptions, MiscMessageGenerationOptions, SocketConfig, WAMessageKey } from '../Types'\nimport { aggregateMessageKeysNotFromMe, assertMediaContent, bindWaitForEvent, decryptMediaRetryData, encodeSignedDeviceIdentity, encodeWAMessage, encryptMediaRetryRequest, extractDeviceJids, generateMessageID, generateWAMessage, getStatusCodeForMediaRetry, getUrlFromDirectPath, getWAUploadToServer, parseAndInjectE2ESessions, unixTimestampSeconds } from '../Utils'\nimport { getUrlInfo } from '../Utils/link-preview'\nimport { areJidsSameUser, BinaryNode, BinaryNodeAttributes, getBinaryNodeChild, getBinaryNodeChildren, isJidGroup, isJidUser, jidDecode, jidEncode, jidNormalizedUser, JidWithDevice, S_WHATSAPP_NET } from '../WABinary'\nimport { makeGroupsSocket } from './groups'\nimport ListType = proto.Message.ListMessage.ListType;\n\nexport const makeMessagesSocket = (config: SocketConfig) => {\n\tconst {\n\t\tlogger,\n\t\tlinkPreviewImageThumbnailWidth,\n\t\tgenerateHighQualityLinkPreview,\n\t\toptions: axiosOptions,\n\t\tpatchMessageBeforeSending,\n\t} = config\n\tconst sock = makeGroupsSocket(config)\n\tconst {\n\t\tev,\n\t\tauthState,\n\t\tprocessingMutex,\n\t\tsignalRepository,\n\t\tupsertMessage,\n\t\tquery,\n\t\tfetchPrivacySettings,\n\t\tgenerateMessageTag,\n\t\tsendNode,\n\t\tgroupMetadata,\n\t\tgroupToggleEphemeral\n\t} = sock\n\n\tconst userDevicesCache = config.userDevicesCache || new NodeCache({\n\t\tstdTTL: DEFAULT_CACHE_TTLS.USER_DEVICES, // 5 minutes\n\t\tuseClones: false\n\t})\n\n\tlet mediaConn: Promise<MediaConnInfo>\n\tconst refreshMediaConn = async(forceGet = false) => {\n\t\tconst media = await mediaConn\n\t\tif(!media || forceGet || (new Date().getTime() - media.fetchDate.getTime()) > media.ttl * 1000) {\n\t\t\tmediaConn = (async() => {\n\t\t\t\tconst result = await query({\n\t\t\t\t\ttag: 'iq',\n\t\t\t\t\tattrs: {\n\t\t\t\t\t\ttype: 'set',\n\t\t\t\t\t\txmlns: 'w:m',\n\t\t\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\t\t},\n\t\t\t\t\tcontent: [ { tag: 'media_conn', attrs: { } } ]\n\t\t\t\t})\n\t\t\t\tconst mediaConnNode = getBinaryNodeChild(result, 'media_conn')\n\t\t\t\tconst node: MediaConnInfo = {\n\t\t\t\t\thosts: getBinaryNodeChildren(mediaConnNode, 'host').map(\n\t\t\t\t\t\t({ attrs }) => ({\n\t\t\t\t\t\t\thostname: attrs.hostname,\n\t\t\t\t\t\t\tmaxContentLengthBytes: +attrs.maxContentLengthBytes,\n\t\t\t\t\t\t})\n\t\t\t\t\t),\n\t\t\t\t\tauth: mediaConnNode!.attrs.auth,\n\t\t\t\t\tttl: +mediaConnNode!.attrs.ttl,\n\t\t\t\t\tfetchDate: new Date()\n\t\t\t\t}\n\t\t\t\tlogger.debug('fetched media conn')\n\t\t\t\treturn node\n\t\t\t})()\n\t\t}\n\n\t\treturn mediaConn\n\t}\n\n\t/**\n     * generic send receipt function\n     * used for receipts of phone call, read, delivery etc.\n     * */\n\tconst sendReceipt = async(jid: string, participant: string | undefined, messageIds: string[], type: MessageReceiptType) => {\n\t\tconst node: BinaryNode = {\n\t\t\ttag: 'receipt',\n\t\t\tattrs: {\n\t\t\t\tid: messageIds[0],\n\t\t\t},\n\t\t}\n\t\tconst isReadReceipt = type === 'read' || type === 'read-self'\n\t\tif(isReadReceipt) {\n\t\t\tnode.attrs.t = unixTimestampSeconds().toString()\n\t\t}\n\n\t\tif(type === 'sender' && isJidUser(jid)) {\n\t\t\tnode.attrs.recipient = jid\n\t\t\tnode.attrs.to = participant!\n\t\t} else {\n\t\t\tnode.attrs.to = jid\n\t\t\tif(participant) {\n\t\t\t\tnode.attrs.participant = participant\n\t\t\t}\n\t\t}\n\n\t\tif(type) {\n\t\t\tnode.attrs.type = type\n\t\t}\n\n\t\tconst remainingMessageIds = messageIds.slice(1)\n\t\tif(remainingMessageIds.length) {\n\t\t\tnode.content = [\n\t\t\t\t{\n\t\t\t\t\ttag: 'list',\n\t\t\t\t\tattrs: { },\n\t\t\t\t\tcontent: remainingMessageIds.map(id => ({\n\t\t\t\t\t\ttag: 'item',\n\t\t\t\t\t\tattrs: { id }\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\n\t\tlogger.debug({ attrs: node.attrs, messageIds }, 'sending receipt for messages')\n\t\tawait sendNode(node)\n\t}\n\n\t/** Correctly bulk send receipts to multiple chats, participants */\n\tconst sendReceipts = async(keys: WAMessageKey[], type: MessageReceiptType) => {\n\t\tconst recps = aggregateMessageKeysNotFromMe(keys)\n\t\tfor(const { jid, participant, messageIds } of recps) {\n\t\t\tawait sendReceipt(jid, participant, messageIds, type)\n\t\t}\n\t}\n\n\t/** Bulk read messages. Keys can be from different chats & participants */\n\tconst readMessages = async(keys: WAMessageKey[]) => {\n\t\tconst privacySettings = await fetchPrivacySettings()\n\t\t// based on privacy settings, we have to change the read type\n\t\tconst readType = privacySettings.readreceipts === 'all' ? 'read' : 'read-self'\n\t\tawait sendReceipts(keys, readType)\n \t}\n\n\t/** Fetch all the devices we've to send a message to */\n\tconst getUSyncDevices = async(jids: string[], useCache: boolean, ignoreZeroDevices: boolean) => {\n\t\tconst deviceResults: JidWithDevice[] = []\n\n\t\tif(!useCache) {\n\t\t\tlogger.debug('not using cache for devices')\n\t\t}\n\n\t\tconst users: BinaryNode[] = []\n\t\tjids = Array.from(new Set(jids))\n\t\tfor(let jid of jids) {\n\t\t\tconst user = jidDecode(jid)?.user\n\t\t\tjid = jidNormalizedUser(jid)\n\n\t\t\tconst devices = userDevicesCache.get<JidWithDevice[]>(user!)\n\t\t\tif(devices && useCache) {\n\t\t\t\tdeviceResults.push(...devices)\n\n\t\t\t\tlogger.trace({ user }, 'using cache for devices')\n\t\t\t} else {\n\t\t\t\tusers.push({ tag: 'user', attrs: { jid } })\n\t\t\t}\n\t\t}\n\n\t\tconst iq: BinaryNode = {\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'get',\n\t\t\t\txmlns: 'usync',\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'usync',\n\t\t\t\t\tattrs: {\n\t\t\t\t\t\tsid: generateMessageTag(),\n\t\t\t\t\t\tmode: 'query',\n\t\t\t\t\t\tlast: 'true',\n\t\t\t\t\t\tindex: '0',\n\t\t\t\t\t\tcontext: 'message',\n\t\t\t\t\t},\n\t\t\t\t\tcontent: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'query',\n\t\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttag: 'devices',\n\t\t\t\t\t\t\t\t\tattrs: { version: '2' }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ tag: 'list', attrs: { }, content: users }\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t],\n\t\t}\n\t\tconst result = await query(iq)\n\t\tconst extracted = extractDeviceJids(result, authState.creds.me!.id, ignoreZeroDevices)\n\t\tconst deviceMap: { [_: string]: JidWithDevice[] } = {}\n\n\t\tfor(const item of extracted) {\n\t\t\tdeviceMap[item.user] = deviceMap[item.user] || []\n\t\t\tdeviceMap[item.user].push(item)\n\n\t\t\tdeviceResults.push(item)\n\t\t}\n\n\t\tfor(const key in deviceMap) {\n\t\t\tuserDevicesCache.set(key, deviceMap[key])\n\t\t}\n\n\t\treturn deviceResults\n\t}\n\n\tconst assertSessions = async(jids: string[], force: boolean) => {\n\t\tlet didFetchNewSession = false\n\t\tlet jidsRequiringFetch: string[] = []\n\t\tif(force) {\n\t\t\tjidsRequiringFetch = jids\n\t\t} else {\n\t\t\tconst addrs = jids.map(jid => (\n\t\t\t\tsignalRepository\n\t\t\t\t\t.jidToSignalProtocolAddress(jid)\n\t\t\t))\n\t\t\tconst sessions = await authState.keys.get('session', addrs)\n\t\t\tfor(const jid of jids) {\n\t\t\t\tconst signalId = signalRepository\n\t\t\t\t\t.jidToSignalProtocolAddress(jid)\n\t\t\t\tif(!sessions[signalId]) {\n\t\t\t\t\tjidsRequiringFetch.push(jid)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(jidsRequiringFetch.length) {\n\t\t\tlogger.debug({ jidsRequiringFetch }, 'fetching sessions')\n\t\t\tconst result = await query({\n\t\t\t\ttag: 'iq',\n\t\t\t\tattrs: {\n\t\t\t\t\txmlns: 'encrypt',\n\t\t\t\t\ttype: 'get',\n\t\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\t},\n\t\t\t\tcontent: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'key',\n\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\tcontent: jidsRequiringFetch.map(\n\t\t\t\t\t\t\tjid => ({\n\t\t\t\t\t\t\t\ttag: 'user',\n\t\t\t\t\t\t\t\tattrs: { jid },\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t})\n\t\t\tawait parseAndInjectE2ESessions(result, signalRepository)\n\n\t\t\tdidFetchNewSession = true\n\t\t}\n\n\t\treturn didFetchNewSession\n\t}\n\n\tconst createParticipantNodes = async(\n\t\tjids: string[],\n\t\tmessage: proto.IMessage,\n\t\textraAttrs?: BinaryNode['attrs']\n\t) => {\n\t\tconst patched = await patchMessageBeforeSending(message, jids)\n\t\tconst bytes = encodeWAMessage(patched)\n\n\t\tlet shouldIncludeDeviceIdentity = false\n\t\tconst nodes = await Promise.all(\n\t\t\tjids.map(\n\t\t\t\tasync jid => {\n\t\t\t\t\tconst { type, ciphertext } = await signalRepository\n\t\t\t\t\t\t.encryptMessage({ jid, data: bytes })\n\t\t\t\t\tif(type === 'pkmsg') {\n\t\t\t\t\t\tshouldIncludeDeviceIdentity = true\n\t\t\t\t\t}\n\n\t\t\t\t\tconst node: BinaryNode = {\n\t\t\t\t\t\ttag: 'to',\n\t\t\t\t\t\tattrs: { jid },\n\t\t\t\t\t\tcontent: [{\n\t\t\t\t\t\t\ttag: 'enc',\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tv: '2',\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\t...extraAttrs || {}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcontent: ciphertext\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t\treturn node\n\t\t\t\t}\n\t\t\t)\n\t\t)\n\t\treturn { nodes, shouldIncludeDeviceIdentity }\n\t}\n\n\tconst relayMessage = async(\n\t\tjid: string,\n\t\tmessage: proto.IMessage,\n\t\t{ messageId: msgId, participant, additionalAttributes, useUserDevicesCache, cachedGroupMetadata, statusJidList }: MessageRelayOptions\n\t) => {\n\t\tconst meId = authState.creds.me!.id\n\n\t\tlet shouldIncludeDeviceIdentity = false\n\n\t\tconst { user, server } = jidDecode(jid)!\n\t\tconst statusJid = 'status@broadcast'\n\t\tconst isGroup = server === 'g.us'\n\t\tconst isStatus = jid === statusJid\n\t\tconst isLid = server === 'lid'\n\n\t\tmsgId = msgId || generateMessageID()\n\t\tuseUserDevicesCache = useUserDevicesCache !== false\n\n\t\tconst participants: BinaryNode[] = []\n\t\tconst destinationJid = (!isStatus) ? jidEncode(user, isLid ? 'lid' : isGroup ? 'g.us' : 's.whatsapp.net') : statusJid\n\t\tconst binaryNodeContent: BinaryNode[] = []\n\t\tconst devices: JidWithDevice[] = []\n\n\t\tconst meMsg: proto.IMessage = {\n\t\t\tdeviceSentMessage: {\n\t\t\t\tdestinationJid,\n\t\t\t\tmessage\n\t\t\t}\n\t\t}\n\n\t\tif(participant) {\n\t\t\t// when the retry request is not for a group\n\t\t\t// only send to the specific device that asked for a retry\n\t\t\t// otherwise the message is sent out to every device that should be a recipient\n\t\t\tif(!isGroup && !isStatus) {\n\t\t\t\tadditionalAttributes = { ...additionalAttributes, 'device_fanout': 'false' }\n\t\t\t}\n\n\t\t\tconst { user, device } = jidDecode(participant.jid)!\n\t\t\tdevices.push({ user, device })\n\t\t}\n\n\t\tawait authState.keys.transaction(\n\t\t\tasync() => {\n\t\t\t\tconst mediaType = getMediaType(message)\n\t\t\t\tif(isGroup || isStatus) {\n\t\t\t\t\tconst [groupData, senderKeyMap] = await Promise.all([\n\t\t\t\t\t\t(async() => {\n\t\t\t\t\t\t\tlet groupData = cachedGroupMetadata ? await cachedGroupMetadata(jid) : undefined\n\t\t\t\t\t\t\tif(groupData) {\n\t\t\t\t\t\t\t\tlogger.trace({ jid, participants: groupData.participants.length }, 'using cached group metadata')\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(!groupData && !isStatus) {\n\t\t\t\t\t\t\t\tgroupData = await groupMetadata(jid)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn groupData\n\t\t\t\t\t\t})(),\n\t\t\t\t\t\t(async() => {\n\t\t\t\t\t\t\tif(!participant && !isStatus) {\n\t\t\t\t\t\t\t\tconst result = await authState.keys.get('sender-key-memory', [jid])\n\t\t\t\t\t\t\t\treturn result[jid] || { }\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn { }\n\t\t\t\t\t\t})()\n\t\t\t\t\t])\n\n\t\t\t\t\tif(!participant) {\n\t\t\t\t\t\tconst participantsList = (groupData && !isStatus) ? groupData.participants.map(p => p.id) : []\n\t\t\t\t\t\tif(isStatus && statusJidList) {\n\t\t\t\t\t\t\tparticipantsList.push(...statusJidList)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst additionalDevices = await getUSyncDevices(participantsList, !!useUserDevicesCache, false)\n\t\t\t\t\t\tdevices.push(...additionalDevices)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst patched = await patchMessageBeforeSending(message, devices.map(d => jidEncode(d.user, isLid ? 'lid' : 's.whatsapp.net', d.device)))\n\t\t\t\t\tconst bytes = encodeWAMessage(patched)\n\n\t\t\t\t\tconst { ciphertext, senderKeyDistributionMessage } = await signalRepository.encryptGroupMessage(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgroup: destinationJid,\n\t\t\t\t\t\t\tdata: bytes,\n\t\t\t\t\t\t\tmeId,\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\n\t\t\t\t\tconst senderKeyJids: string[] = []\n\t\t\t\t\t// ensure a connection is established with every device\n\t\t\t\t\tfor(const { user, device } of devices) {\n\t\t\t\t\t\tconst jid = jidEncode(user, isLid ? 'lid' : 's.whatsapp.net', device)\n\t\t\t\t\t\tif(!senderKeyMap[jid] || !!participant) {\n\t\t\t\t\t\t\tsenderKeyJids.push(jid)\n\t\t\t\t\t\t\t// store that this person has had the sender keys sent to them\n\t\t\t\t\t\t\tsenderKeyMap[jid] = true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// if there are some participants with whom the session has not been established\n\t\t\t\t\t// if there are, we re-send the senderkey\n\t\t\t\t\tif(senderKeyJids.length) {\n\t\t\t\t\t\tlogger.debug({ senderKeyJids }, 'sending new sender key')\n\n\t\t\t\t\t\tconst senderKeyMsg: proto.IMessage = {\n\t\t\t\t\t\t\tsenderKeyDistributionMessage: {\n\t\t\t\t\t\t\t\taxolotlSenderKeyDistributionMessage: senderKeyDistributionMessage,\n\t\t\t\t\t\t\t\tgroupId: destinationJid\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait assertSessions(senderKeyJids, false)\n\n\t\t\t\t\t\tconst result = await createParticipantNodes(senderKeyJids, senderKeyMsg, mediaType ? { mediatype: mediaType } : undefined)\n\t\t\t\t\t\tshouldIncludeDeviceIdentity = shouldIncludeDeviceIdentity || result.shouldIncludeDeviceIdentity\n\n\t\t\t\t\t\tparticipants.push(...result.nodes)\n\t\t\t\t\t}\n\n\t\t\t\t\tbinaryNodeContent.push({\n\t\t\t\t\t\ttag: 'enc',\n\t\t\t\t\t\tattrs: { v: '2', type: 'skmsg' },\n\t\t\t\t\t\tcontent: ciphertext\n\t\t\t\t\t})\n\n\t\t\t\t\tawait authState.keys.set({ 'sender-key-memory': { [jid]: senderKeyMap } })\n\t\t\t\t} else {\n\t\t\t\t\tconst { user: meUser, device: meDevice } = jidDecode(meId)!\n\n\t\t\t\t\tif(!participant) {\n\t\t\t\t\t\tdevices.push({ user })\n\t\t\t\t\t\t// do not send message to self if the device is 0 (mobile)\n\t\t\t\t\t\tif(meDevice !== undefined && meDevice !== 0) {\n\t\t\t\t\t\t\tdevices.push({ user: meUser })\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst additionalDevices = await getUSyncDevices([ meId, jid ], !!useUserDevicesCache, true)\n\t\t\t\t\t\tdevices.push(...additionalDevices)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst allJids: string[] = []\n\t\t\t\t\tconst meJids: string[] = []\n\t\t\t\t\tconst otherJids: string[] = []\n\t\t\t\t\tfor(const { user, device } of devices) {\n\t\t\t\t\t\tconst isMe = user === meUser\n\t\t\t\t\t\tconst jid = jidEncode(isMe && isLid ? authState.creds?.me?.lid!.split(':')[0] || user : user, isLid ? 'lid' : 's.whatsapp.net', device)\n\t\t\t\t\t\tif(isMe) {\n\t\t\t\t\t\t\tmeJids.push(jid)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\totherJids.push(jid)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tallJids.push(jid)\n\t\t\t\t\t}\n\n\t\t\t\t\tawait assertSessions(allJids, false)\n\n\t\t\t\t\tconst [\n\t\t\t\t\t\t{ nodes: meNodes, shouldIncludeDeviceIdentity: s1 },\n\t\t\t\t\t\t{ nodes: otherNodes, shouldIncludeDeviceIdentity: s2 }\n\t\t\t\t\t] = await Promise.all([\n\t\t\t\t\t\tcreateParticipantNodes(meJids, meMsg, mediaType ? { mediatype: mediaType } : undefined),\n\t\t\t\t\t\tcreateParticipantNodes(otherJids, message, mediaType ? { mediatype: mediaType } : undefined)\n\t\t\t\t\t])\n\t\t\t\t\tparticipants.push(...meNodes)\n\t\t\t\t\tparticipants.push(...otherNodes)\n\n\t\t\t\t\tshouldIncludeDeviceIdentity = shouldIncludeDeviceIdentity || s1 || s2\n\t\t\t\t}\n\n\t\t\t\tif(participants.length) {\n\t\t\t\t\tbinaryNodeContent.push({\n\t\t\t\t\t\ttag: 'participants',\n\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\tcontent: participants\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tconst stanza: BinaryNode = {\n\t\t\t\t\ttag: 'message',\n\t\t\t\t\tattrs: {\n\t\t\t\t\t\tid: msgId!,\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t...(additionalAttributes || {})\n\t\t\t\t\t},\n\t\t\t\t\tcontent: binaryNodeContent\n\t\t\t\t}\n\t\t\t\t// if the participant to send to is explicitly specified (generally retry recp)\n\t\t\t\t// ensure the message is only sent to that person\n\t\t\t\t// if a retry receipt is sent to everyone -- it'll fail decryption for everyone else who received the msg\n\t\t\t\tif(participant) {\n\t\t\t\t\tif(isJidGroup(destinationJid)) {\n\t\t\t\t\t\tstanza.attrs.to = destinationJid\n\t\t\t\t\t\tstanza.attrs.participant = participant.jid\n\t\t\t\t\t} else if(areJidsSameUser(participant.jid, meId)) {\n\t\t\t\t\t\tstanza.attrs.to = participant.jid\n\t\t\t\t\t\tstanza.attrs.recipient = destinationJid\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstanza.attrs.to = participant.jid\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstanza.attrs.to = destinationJid\n\t\t\t\t}\n\n\t\t\t\tif(shouldIncludeDeviceIdentity) {\n\t\t\t\t\t(stanza.content as BinaryNode[]).push({\n\t\t\t\t\t\ttag: 'device-identity',\n\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\tcontent: encodeSignedDeviceIdentity(authState.creds.account!, true)\n\t\t\t\t\t})\n\n\t\t\t\t\tlogger.debug({ jid }, 'adding device identity')\n\t\t\t\t}\n\n\t\t\t\tconst buttonType = getButtonType(message)\n\t\t\t\tif(buttonType) {\n\t\t\t\t\t(stanza.content as BinaryNode[]).push({\n\t\t\t\t\t\ttag: 'biz',\n\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttag: buttonType,\n\t\t\t\t\t\t\t\tattrs: getButtonArgs(message),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\n\t\t\t\t\tlogger.debug({ jid }, 'adding business node')\n\t\t\t\t}\n\n\t\t\t\tlogger.debug({ msgId }, `sending message to ${participants.length} devices`)\n\n\t\t\t\tawait sendNode(stanza)\n\t\t\t}\n\t\t)\n\n\t\treturn msgId\n\t}\n\n\tconst getMediaType = (message: proto.IMessage) => {\n\t\tif(message.imageMessage) {\n\t\t\treturn 'image'\n\t\t} else if(message.videoMessage) {\n\t\t\treturn message.videoMessage.gifPlayback ? 'gif' : 'video'\n\t\t} else if(message.audioMessage) {\n\t\t\treturn message.audioMessage.ptt ? 'ptt' : 'audio'\n\t\t} else if(message.contactMessage) {\n\t\t\treturn 'vcard'\n\t\t} else if(message.documentMessage) {\n\t\t\treturn 'document'\n\t\t} else if(message.contactsArrayMessage) {\n\t\t\treturn 'contact_array'\n\t\t} else if(message.liveLocationMessage) {\n\t\t\treturn 'livelocation'\n\t\t} else if(message.stickerMessage) {\n\t\t\treturn 'sticker'\n\t\t} else if(message.listMessage) {\n\t\t\treturn 'list'\n\t\t} else if(message.listResponseMessage) {\n\t\t\treturn 'list_response'\n\t\t} else if(message.buttonsResponseMessage) {\n\t\t\treturn 'buttons_response'\n\t\t} else if(message.orderMessage) {\n\t\t\treturn 'order'\n\t\t} else if(message.productMessage) {\n\t\t\treturn 'product'\n\t\t} else if(message.interactiveResponseMessage) {\n\t\t\treturn 'native_flow_response'\n\t\t}\n\t}\n\n\tconst getButtonType = (message: proto.IMessage) => {\n\t\tif(message.buttonsMessage) {\n\t\t\treturn 'buttons'\n\t\t} else if(message.buttonsResponseMessage) {\n\t\t\treturn 'buttons_response'\n\t\t} else if(message.interactiveResponseMessage) {\n\t\t\treturn 'interactive_response'\n\t\t} else if(message.listMessage) {\n\t\t\treturn 'list'\n\t\t} else if(message.listResponseMessage) {\n\t\t\treturn 'list_response'\n\t\t}\n\t}\n\n\tconst getButtonArgs = (message: proto.IMessage): BinaryNode['attrs'] => {\n\t\tif(message.templateMessage) {\n\t\t\t// TODO: Add attributes\n\t\t\treturn {}\n\t\t} else if(message.listMessage) {\n\t\t\tconst type = message.listMessage.listType\n\t\t\tif(!type) {\n\t\t\t\tthrow new Boom('Expected list type inside message')\n\t\t\t}\n\n\t\t\treturn { v: '2', type: ListType[type].toLowerCase() }\n\t\t} else {\n\t\t\treturn {}\n\t\t}\n\t}\n\n\tconst getPrivacyTokens = async(jids: string[]) => {\n\t\tconst t = unixTimestampSeconds().toString()\n\t\tconst result = await query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'set',\n\t\t\t\txmlns: 'privacy'\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'tokens',\n\t\t\t\t\tattrs: { },\n\t\t\t\t\tcontent: jids.map(\n\t\t\t\t\t\tjid => ({\n\t\t\t\t\t\t\ttag: 'token',\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tjid: jidNormalizedUser(jid),\n\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\ttype: 'trusted_contact'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t]\n\t\t})\n\n\t\treturn result\n\t}\n\n\tconst waUploadToServer = getWAUploadToServer(config, refreshMediaConn)\n\n\tconst waitForMsgMediaUpdate = bindWaitForEvent(ev, 'messages.media-update')\n\n\treturn {\n\t\t...sock,\n\t\tgetPrivacyTokens,\n\t\tassertSessions,\n\t\trelayMessage,\n\t\tsendReceipt,\n\t\tsendReceipts,\n\t\tgetButtonArgs,\n\t\treadMessages,\n\t\trefreshMediaConn,\n\t\twaUploadToServer,\n\t\tfetchPrivacySettings,\n\t\tupdateMediaMessage: async(message: proto.IWebMessageInfo) => {\n\t\t\tconst content = assertMediaContent(message.message)\n\t\t\tconst mediaKey = content.mediaKey!\n\t\t\tconst meId = authState.creds.me!.id\n\t\t\tconst node = encryptMediaRetryRequest(message.key, mediaKey, meId)\n\n\t\t\tlet error: Error | undefined = undefined\n\t\t\tawait Promise.all(\n\t\t\t\t[\n\t\t\t\t\tsendNode(node),\n\t\t\t\t\twaitForMsgMediaUpdate(update => {\n\t\t\t\t\t\tconst result = update.find(c => c.key.id === message.key.id)\n\t\t\t\t\t\tif(result) {\n\t\t\t\t\t\t\tif(result.error) {\n\t\t\t\t\t\t\t\terror = result.error\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst media = decryptMediaRetryData(result.media!, mediaKey, result.key.id!)\n\t\t\t\t\t\t\t\t\tif(media.result !== proto.MediaRetryNotification.ResultType.SUCCESS) {\n\t\t\t\t\t\t\t\t\t\tconst resultStr = proto.MediaRetryNotification.ResultType[media.result]\n\t\t\t\t\t\t\t\t\t\tthrow new Boom(\n\t\t\t\t\t\t\t\t\t\t\t`Media re-upload failed by device (${resultStr})`,\n\t\t\t\t\t\t\t\t\t\t\t{ data: media, statusCode: getStatusCodeForMediaRetry(media.result) || 404 }\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcontent.directPath = media.directPath\n\t\t\t\t\t\t\t\t\tcontent.url = getUrlFromDirectPath(content.directPath)\n\n\t\t\t\t\t\t\t\t\tlogger.debug({ directPath: media.directPath, key: result.key }, 'media update successful')\n\t\t\t\t\t\t\t\t} catch(err) {\n\t\t\t\t\t\t\t\t\terror = err\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t)\n\n\t\t\tif(error) {\n\t\t\t\tthrow error\n\t\t\t}\n\n\t\t\tev.emit('messages.update', [\n\t\t\t\t{ key: message.key, update: { message: message.message } }\n\t\t\t])\n\n\t\t\treturn message\n\t\t},\n\t\tsendMessage: async(\n\t\t\tjid: string,\n\t\t\tcontent: AnyMessageContent,\n\t\t\toptions: MiscMessageGenerationOptions = { }\n\t\t) => {\n\t\t\tconst userJid = authState.creds.me!.id\n\t\t\tif(\n\t\t\t\ttypeof content === 'object' &&\n\t\t\t\t'disappearingMessagesInChat' in content &&\n\t\t\t\ttypeof content['disappearingMessagesInChat'] !== 'undefined' &&\n\t\t\t\tisJidGroup(jid)\n\t\t\t) {\n\t\t\t\tconst { disappearingMessagesInChat } = content\n\t\t\t\tconst value = typeof disappearingMessagesInChat === 'boolean' ?\n\t\t\t\t\t(disappearingMessagesInChat ? WA_DEFAULT_EPHEMERAL : 0) :\n\t\t\t\t\tdisappearingMessagesInChat\n\t\t\t\tawait groupToggleEphemeral(jid, value)\n\t\t\t} else {\n\t\t\t\tconst fullMsg = await generateWAMessage(\n\t\t\t\t\tjid,\n\t\t\t\t\tcontent,\n\t\t\t\t\t{\n\t\t\t\t\t\tlogger,\n\t\t\t\t\t\tuserJid,\n\t\t\t\t\t\tgetUrlInfo: text => getUrlInfo(\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthumbnailWidth: linkPreviewImageThumbnailWidth,\n\t\t\t\t\t\t\t\tfetchOpts: {\n\t\t\t\t\t\t\t\t\ttimeout: 3_000,\n\t\t\t\t\t\t\t\t\t...axiosOptions || { }\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tlogger,\n\t\t\t\t\t\t\t\tuploadImage: generateHighQualityLinkPreview\n\t\t\t\t\t\t\t\t\t? waUploadToServer\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t\tupload: waUploadToServer,\n\t\t\t\t\t\tmediaCache: config.mediaCache,\n\t\t\t\t\t\toptions: config.options,\n\t\t\t\t\t\t...options,\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tconst isDeleteMsg = 'delete' in content && !!content.delete\n\t\t\t\tconst isEditMsg = 'edit' in content && !!content.edit\n\t\t\t\tconst additionalAttributes: BinaryNodeAttributes = { }\n\t\t\t\t// required for delete\n\t\t\t\tif(isDeleteMsg) {\n\t\t\t\t\t// if the chat is a group, and I am not the author, then delete the message as an admin\n\t\t\t\t\tif(isJidGroup(content.delete?.remoteJid as string) && !content.delete?.fromMe) {\n\t\t\t\t\t\tadditionalAttributes.edit = '8'\n\t\t\t\t\t} else {\n\t\t\t\t\t\tadditionalAttributes.edit = '7'\n\t\t\t\t\t}\n\t\t\t\t} else if(isEditMsg) {\n\t\t\t\t\tadditionalAttributes.edit = '1'\n\t\t\t\t}\n\n\t\t\t\tawait relayMessage(jid, fullMsg.message!, { messageId: fullMsg.key.id!, cachedGroupMetadata: options.cachedGroupMetadata, additionalAttributes, statusJidList: options.statusJidList })\n\t\t\t\tif(config.emitOwnEvents) {\n\t\t\t\t\tprocess.nextTick(() => {\n\t\t\t\t\t\tprocessingMutex.mutex(() => (\n\t\t\t\t\t\t\tupsertMessage(fullMsg, 'append')\n\t\t\t\t\t\t))\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\treturn fullMsg\n\t\t\t}\n\t\t}\n\t}\n}\n"]}