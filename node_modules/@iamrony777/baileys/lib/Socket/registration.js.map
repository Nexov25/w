{"version":3,"file":"registration.js","sourceRoot":"/","sources":["Socket/registration.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport axios, { AxiosRequestConfig } from 'axios'\nimport { MOBILE_REGISTRATION_ENDPOINT, MOBILE_TOKEN, MOBILE_USERAGENT, REGISTRATION_PUBLIC_KEY } from '../Defaults'\nimport { KeyPair, SignedKeyPair, SocketConfig } from '../Types'\nimport { aesEncryptGCM, Curve, md5 } from '../Utils/crypto'\nimport { jidEncode } from '../WABinary'\nimport { makeBusinessSocket } from './business'\n\nfunction urlencode(str: string) {\n\treturn str.replace(/-/g, '%2d').replace(/_/g, '%5f').replace(/~/g, '%7e')\n}\n\nconst validRegistrationOptions = (config: RegistrationOptions) => config?.phoneNumberCountryCode &&\n\tconfig.phoneNumberNationalNumber &&\n\tconfig.phoneNumberMobileCountryCode\n\nexport const makeRegistrationSocket = (config: SocketConfig) => {\n\tconst sock = makeBusinessSocket(config)\n\n\tconst register = async(code: string) => {\n\t\tif(!validRegistrationOptions(config.auth.creds.registration)) {\n\t\t\tthrow new Error('please specify the registration options')\n\t\t}\n\n\t\tconst result = await mobileRegister({ ...sock.authState.creds, ...sock.authState.creds.registration, code }, config.options)\n\n\t\tsock.authState.creds.me = {\n\t\t\tid: jidEncode(result.login!, 's.whatsapp.net'),\n\t\t\tname: '~'\n\t\t}\n\n\t\tsock.authState.creds.registered = true\n\t\tsock.ev.emit('creds.update', sock.authState.creds)\n\n\t\treturn result\n\t}\n\n\tconst requestRegistrationCode = async(registrationOptions?: RegistrationOptions) => {\n\t\tregistrationOptions = registrationOptions || config.auth.creds.registration\n\t\tif(!validRegistrationOptions(registrationOptions)) {\n\t\t\tthrow new Error('Invalid registration options')\n\t\t}\n\n\t\tsock.authState.creds.registration = registrationOptions\n\n\t\tsock.ev.emit('creds.update', sock.authState.creds)\n\n\t\treturn mobileRegisterCode({ ...config.auth.creds, ...registrationOptions }, config.options)\n\t}\n\n\treturn {\n\t\t...sock,\n\t\tregister,\n\t\trequestRegistrationCode,\n\t}\n}\n\n// Backup_token: Base64.getEncoder().encodeToString(Arrays.copyOfRange(Base64.getDecoder().decode(UUID.randomUUID().toString().replace('-','')),0,15))\n\nexport interface RegistrationData {\n\tregistrationId: number\n\tsignedPreKey: SignedKeyPair\n\tnoiseKey: KeyPair\n\tsignedIdentityKey: KeyPair\n\tidentityId: Buffer\n\tphoneId: string\n\tdeviceId: string\n\tbackupToken: Buffer\n}\n\nexport interface RegistrationOptions {\n\t/** your phone number */\n\tphoneNumber?: string\n\t/** the country code of your phone number */\n\tphoneNumberCountryCode: string\n\t/** your phone number without country code */\n\tphoneNumberNationalNumber: string\n\t/** the country code of your mobile network\n\t * @see {@link https://de.wikipedia.org/wiki/Mobile_Country_Code}\n\t */\n\tphoneNumberMobileCountryCode: string\n\t/** the network code of your mobile network\n\t * @see {@link https://de.wikipedia.org/wiki/Mobile_Network_Code}\n\t */\n\tphoneNumberMobileNetworkCode: string\n\t/**\n\t * How to send the one time code\n\t */\n\tmethod?: 'sms' | 'voice' | 'captcha'\n\t/**\n\t * The captcha code if it was requested\n\t */\n\tcaptcha?: string\n}\n\nexport type RegistrationParams = RegistrationData & RegistrationOptions\n\nfunction convertBufferToUrlHex(buffer: Buffer) {\n\tvar id = ''\n\n\tbuffer.forEach((x) => {\n\t\t// encode random identity_id buffer as percentage url encoding\n\t\tid += `%${x.toString(16).padStart(2, '0').toLowerCase()}`\n\t})\n\n\treturn id\n}\n\nexport function registrationParams(params: RegistrationParams) {\n\tconst e_regid = Buffer.alloc(4)\n\te_regid.writeInt32BE(params.registrationId)\n\n\tconst e_skey_id = Buffer.alloc(3)\n\te_skey_id.writeInt16BE(params.signedPreKey.keyId)\n\n\tparams.phoneNumberCountryCode = params.phoneNumberCountryCode.replace('+', '').trim()\n\tparams.phoneNumberNationalNumber = params.phoneNumberNationalNumber.replace(/[/-\\s)(]/g, '').trim()\n\n\treturn {\n\t\tcc: params.phoneNumberCountryCode,\n\t\tin: params.phoneNumberNationalNumber,\n\t\tRc: '0',\n\t\tlg: 'en',\n\t\tlc: 'GB',\n\t\tmistyped: '6',\n\t\tauthkey: Buffer.from(params.noiseKey.public).toString('base64url'),\n\t\te_regid: e_regid.toString('base64url'),\n\t\te_keytype: 'BQ',\n\t\te_ident: Buffer.from(params.signedIdentityKey.public).toString('base64url'),\n\t\t// e_skey_id: e_skey_id.toString('base64url'),\n\t\te_skey_id: 'AAAA',\n\t\te_skey_val: Buffer.from(params.signedPreKey.keyPair.public).toString('base64url'),\n\t\te_skey_sig: Buffer.from(params.signedPreKey.signature).toString('base64url'),\n\t\tfdid: params.phoneId,\n\t\tnetwork_ratio_type: '1',\n\t\texpid: params.deviceId,\n\t\tsimnum: '1',\n\t\thasinrc: '1',\n\t\tpid: Math.floor(Math.random() * 1000).toString(),\n\t\tid: convertBufferToUrlHex(params.identityId),\n\t\tbackup_token: convertBufferToUrlHex(params.backupToken),\n\t\ttoken: md5(Buffer.concat([MOBILE_TOKEN, Buffer.from(params.phoneNumberNationalNumber)])).toString('hex'),\n\t\tfraud_checkpoint_code: params.captcha,\n\t}\n}\n\n/**\n * Requests a registration code for the given phone number.\n */\nexport function mobileRegisterCode(params: RegistrationParams, fetchOptions?: AxiosRequestConfig) {\n\treturn mobileRegisterFetch('/code', {\n\t\tparams: {\n\t\t\t...registrationParams(params),\n\t\t\tmcc: `${params.phoneNumberMobileCountryCode}`.padStart(3, '0'),\n\t\t\tmnc: `${params.phoneNumberMobileNetworkCode || '001'}`.padStart(3, '0'),\n\t\t\tsim_mcc: '000',\n\t\t\tsim_mnc: '000',\n\t\t\tmethod: params?.method || 'sms',\n\t\t\treason: '',\n\t\t\thasav: '1'\n\t\t},\n\t\t...fetchOptions,\n\t})\n}\n\nexport function mobileRegisterExists(params: RegistrationParams, fetchOptions?: AxiosRequestConfig) {\n\treturn mobileRegisterFetch('/exist', {\n\t\tparams: registrationParams(params),\n\t\t...fetchOptions\n\t})\n}\n\n/**\n * Registers the phone number on whatsapp with the received OTP code.\n */\nexport async function mobileRegister(params: RegistrationParams & { code: string }, fetchOptions?: AxiosRequestConfig) {\n\t//const result = await mobileRegisterFetch(`/reg_onboard_abprop?cc=${params.phoneNumberCountryCode}&in=${params.phoneNumberNationalNumber}&rc=0`)\n\n\treturn mobileRegisterFetch('/register', {\n\t\tparams: { ...registrationParams(params), code: params.code.replace('-', '') },\n\t\t...fetchOptions,\n\t})\n}\n\n/**\n * Encrypts the given string as AEAD aes-256-gcm with the public whatsapp key and a random keypair.\n */\nexport function mobileRegisterEncrypt(data: string) {\n\tconst keypair = Curve.generateKeyPair()\n\tconst key = Curve.sharedKey(keypair.private, REGISTRATION_PUBLIC_KEY)\n\n\tconst buffer = aesEncryptGCM(Buffer.from(data), new Uint8Array(key), Buffer.alloc(12), Buffer.alloc(0))\n\n\treturn Buffer.concat([Buffer.from(keypair.public), buffer]).toString('base64url')\n}\n\nexport async function mobileRegisterFetch(path: string, opts: AxiosRequestConfig = {}) {\n\tlet url = `${MOBILE_REGISTRATION_ENDPOINT}${path}`\n\n\tif(opts.params) {\n\t\tconst parameter = [] as string[]\n\n\t\tfor(const param in opts.params) {\n\t\t\tif(opts.params[param] !== null && opts.params[param] !== undefined) {\n\t\t\t\tparameter.push(param + '=' + urlencode(opts.params[param]))\n\t\t\t}\n\t\t}\n\n\t\turl += `?${parameter.join('&')}`\n\t\tdelete opts.params\n\t}\n\n\tif(!opts.headers) {\n\t\topts.headers = {}\n\t}\n\n\topts.headers['User-Agent'] = MOBILE_USERAGENT\n\n\tconst response = await axios(url, opts)\n\n\tvar json = response.data\n\n\tif(response.status > 300 || json.reason) {\n\t\tthrow json\n\t}\n\n\tif(json.status && !['ok', 'sent'].includes(json.status)) {\n\t\tthrow json\n\t}\n\n\treturn json as ExistsResponse\n}\n\n\nexport interface ExistsResponse {\n\tstatus: 'fail' | 'sent'\n\tvoice_length?: number\n\tvoice_wait?: number\n\tsms_length?: number\n\tsms_wait?: number\n\treason?: 'incorrect' | 'missing_param' | 'code_checkpoint'\n\tlogin?: string\n\tflash_type?: number\n\tab_hash?: string\n\tab_key?: string\n\texp_cfg?: string\n\tlid?: string\n\timage_blob?: string\n\taudio_blob?: string\n}\n"]}