{"version":3,"file":"socket.js","sourceRoot":"/","sources":["Socket/socket.ts"],"names":[],"mappings":"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","sourcesContent":["import { Boom } from '@hapi/boom'\nimport { randomBytes } from 'crypto'\nimport { URL } from 'url'\nimport { promisify } from 'util'\nimport { proto } from '../../WAProto'\nimport {\n\tDEF_CALLBACK_PREFIX,\n\tDEF_TAG_PREFIX,\n\tINITIAL_PREKEY_COUNT,\n\tMIN_PREKEY_COUNT,\n\tMOBILE_ENDPOINT,\n\tMOBILE_NOISE_HEADER,\n\tMOBILE_PORT,\n\tNOISE_WA_HEADER\n} from '../Defaults'\nimport { DisconnectReason, SocketConfig } from '../Types'\nimport {\n\taddTransactionCapability,\n\taesEncryptCTR,\n\tbindWaitForConnectionUpdate,\n\tbytesToCrockford,\n\tconfigureSuccessfulPairing,\n\tCurve,\n\tderivePairingCodeKey,\n\tgenerateLoginNode,\n\tgenerateMdTagPrefix,\n\tgenerateMobileNode,\n\tgenerateRegistrationNode,\n\tgetCodeFromWSError,\n\tgetErrorCodeFromStreamError,\n\tgetNextPreKeysNode,\n\tmakeEventBuffer,\n\tmakeNoiseHandler,\n\tprintQRIfNecessaryListener,\n\tpromiseTimeout\n} from '../Utils'\nimport {\n\tassertNodeErrorFree,\n\tBinaryNode,\n\tbinaryNodeToString,\n\tencodeBinaryNode,\n\tgetBinaryNodeChild,\n\tgetBinaryNodeChildren,\n\tjidEncode,\n\tS_WHATSAPP_NET\n} from '../WABinary'\nimport { MobileSocketClient, WebSocketClient } from './Client'\n\n/**\n * Connects to WA servers and performs:\n * - simple queries (no retry mechanism, wait for connection establishment)\n * - listen to messages and emit events\n * - query phone connection\n */\n\nexport const makeSocket = (config: SocketConfig) => {\n\tconst {\n\t\twaWebSocketUrl,\n\t\tconnectTimeoutMs,\n\t\tlogger,\n\t\tkeepAliveIntervalMs,\n\t\tbrowser,\n\t\tauth: authState,\n\t\tprintQRInTerminal,\n\t\tdefaultQueryTimeoutMs,\n\t\ttransactionOpts,\n\t\tqrTimeout,\n\t\tmakeSignalRepository,\n\t} = config\n\n\tlet url = typeof waWebSocketUrl === 'string' ? new URL(waWebSocketUrl) : waWebSocketUrl\n\n\tconfig.mobile = config.mobile || url.protocol === 'tcp:'\n\n\tif(config.mobile && url.protocol !== 'tcp:') {\n\t\turl = new URL(`tcp://${MOBILE_ENDPOINT}:${MOBILE_PORT}`)\n\t}\n\n\tconst ws = config.socket ? config.socket : config.mobile ? new MobileSocketClient(url, config) : new WebSocketClient(url, config)\n\n\tws.connect()\n\n\tconst ev = makeEventBuffer(logger)\n\t/** ephemeral key pair used to encrypt/decrypt communication. Unique for each connection */\n\tconst ephemeralKeyPair = Curve.generateKeyPair()\n\t/** WA noise protocol wrapper */\n\tconst noise = makeNoiseHandler({\n\t\tkeyPair: ephemeralKeyPair,\n\t\tNOISE_HEADER: config.mobile ? MOBILE_NOISE_HEADER : NOISE_WA_HEADER,\n\t\tmobile: config.mobile,\n\t\tlogger\n\t})\n\n\tconst { creds } = authState\n\t// add transaction capability\n\tconst keys = addTransactionCapability(authState.keys, logger, transactionOpts)\n\tconst signalRepository = makeSignalRepository({ creds, keys })\n\n\tlet lastDateRecv: Date\n\tlet epoch = 1\n\tlet keepAliveReq: NodeJS.Timeout\n\tlet qrTimer: NodeJS.Timeout\n\tlet closed = false\n\n\tconst uqTagId = generateMdTagPrefix()\n\tconst generateMessageTag = () => `${uqTagId}${epoch++}`\n\n\tconst sendPromise = promisify(ws.send)\n\t/** send a raw buffer */\n\tconst sendRawMessage = async(data: Uint8Array | Buffer) => {\n\t\tif(!ws.isOpen) {\n\t\t\tthrow new Boom('Connection Closed', { statusCode: DisconnectReason.connectionClosed })\n\t\t}\n\n\t\tconst bytes = noise.encodeFrame(data)\n\t\tawait promiseTimeout<void>(\n\t\t\tconnectTimeoutMs,\n\t\t\tasync(resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait sendPromise.call(ws, bytes)\n\t\t\t\t\tresolve()\n\t\t\t\t} catch(error) {\n\t\t\t\t\treject(error)\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\t}\n\n\t/** send a binary node */\n\tconst sendNode = (frame: BinaryNode) => {\n\t\tif(logger.level === 'trace') {\n\t\t\tlogger.trace(binaryNodeToString(frame), 'xml send')\n\t\t}\n\n\t\tconst buff = encodeBinaryNode(frame)\n\t\treturn sendRawMessage(buff)\n\t}\n\n\t/** log & process any unexpected errors */\n\tconst onUnexpectedError = (err: Error | Boom, msg: string) => {\n\t\tlogger.error(\n\t\t\t{ err },\n\t\t\t`unexpected error in '${msg}'`\n\t\t)\n\t}\n\n\t/** await the next incoming message */\n\tconst awaitNextMessage = async<T>(sendMsg?: Uint8Array) => {\n\t\tif(!ws.isOpen) {\n\t\t\tthrow new Boom('Connection Closed', {\n\t\t\t\tstatusCode: DisconnectReason.connectionClosed\n\t\t\t})\n\t\t}\n\n\t\tlet onOpen: (data: T) => void\n\t\tlet onClose: (err: Error) => void\n\n\t\tconst result = promiseTimeout<T>(connectTimeoutMs, (resolve, reject) => {\n\t\t\tonOpen = resolve\n\t\t\tonClose = mapWebSocketError(reject)\n\t\t\tws.on('frame', onOpen)\n\t\t\tws.on('close', onClose)\n\t\t\tws.on('error', onClose)\n\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tws.off('frame', onOpen)\n\t\t\t\tws.off('close', onClose)\n\t\t\t\tws.off('error', onClose)\n\t\t\t})\n\n\t\tif(sendMsg) {\n\t\t\tsendRawMessage(sendMsg).catch(onClose!)\n\t\t}\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Wait for a message with a certain tag to be received\n\t * @param msgId the message tag to await\n\t * @param timeoutMs timeout after which the promise will reject\n\t */\n\tconst waitForMessage = async<T>(msgId: string, timeoutMs = defaultQueryTimeoutMs) => {\n\t\tlet onRecv: (json) => void\n\t\tlet onErr: (err) => void\n\t\ttry {\n\t\t\treturn await promiseTimeout<T>(timeoutMs,\n\t\t\t\t(resolve, reject) => {\n\t\t\t\t\tonRecv = resolve\n\t\t\t\t\tonErr = err => {\n\t\t\t\t\t\treject(err || new Boom('Connection Closed', { statusCode: DisconnectReason.connectionClosed }))\n\t\t\t\t\t}\n\n\t\t\t\t\tws.on(`TAG:${msgId}`, onRecv)\n\t\t\t\t\tws.on('close', onErr) // if the socket closes, you'll never receive the message\n\t\t\t\t\tws.off('error', onErr)\n\t\t\t\t},\n\t\t\t)\n\t\t} finally {\n\t\t\tws.off(`TAG:${msgId}`, onRecv!)\n\t\t\tws.off('close', onErr!) // if the socket closes, you'll never receive the message\n\t\t\tws.off('error', onErr!)\n\t\t}\n\t}\n\n\t/** send a query, and wait for its response. auto-generates message ID if not provided */\n\tconst query = async(node: BinaryNode, timeoutMs?: number) => {\n\t\tif(!node.attrs.id) {\n\t\t\tnode.attrs.id = generateMessageTag()\n\t\t}\n\n\t\tconst msgId = node.attrs.id\n\t\tconst wait = waitForMessage(msgId, timeoutMs)\n\n\t\tawait sendNode(node)\n\n\t\tconst result = await (wait as Promise<BinaryNode>)\n\t\tif('tag' in result) {\n\t\t\tassertNodeErrorFree(result)\n\t\t}\n\n\t\treturn result\n\t}\n\n\t/** connection handshake */\n\tconst validateConnection = async() => {\n\t\tlet helloMsg: proto.IHandshakeMessage = {\n\t\t\tclientHello: { ephemeral: ephemeralKeyPair.public }\n\t\t}\n\t\thelloMsg = proto.HandshakeMessage.fromObject(helloMsg)\n\n\t\tlogger.info({ browser, helloMsg }, 'connected to WA')\n\n\t\tconst init = proto.HandshakeMessage.encode(helloMsg).finish()\n\n\t\tconst result = await awaitNextMessage<Uint8Array>(init)\n\t\tconst handshake = proto.HandshakeMessage.decode(result)\n\n\t\tlogger.trace({ handshake }, 'handshake recv from WA')\n\n\t\tconst keyEnc = noise.processHandshake(handshake, creds.noiseKey)\n\n\t\tlet node: proto.IClientPayload\n\t\tif(config.mobile) {\n\t\t\tnode = generateMobileNode(config)\n\t\t} else if(!creds.me) {\n\t\t\tnode = generateRegistrationNode(creds, config)\n\t\t\tlogger.info({ node }, 'not logged in, attempting registration...')\n\t\t} else {\n\t\t\tnode = generateLoginNode(creds.me.id, config)\n\t\t\tlogger.info({ node }, 'logging in...')\n\t\t}\n\n\t\tconst payloadEnc = noise.encrypt(\n\t\t\tproto.ClientPayload.encode(node).finish()\n\t\t)\n\t\tawait sendRawMessage(\n\t\t\tproto.HandshakeMessage.encode({\n\t\t\t\tclientFinish: {\n\t\t\t\t\tstatic: keyEnc,\n\t\t\t\t\tpayload: payloadEnc,\n\t\t\t\t},\n\t\t\t}).finish()\n\t\t)\n\t\tnoise.finishInit()\n\t\tstartKeepAliveRequest()\n\t}\n\n\tconst getAvailablePreKeysOnServer = async() => {\n\t\tconst result = await query({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tid: generateMessageTag(),\n\t\t\t\txmlns: 'encrypt',\n\t\t\t\ttype: 'get',\n\t\t\t\tto: S_WHATSAPP_NET\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{ tag: 'count', attrs: {} }\n\t\t\t]\n\t\t})\n\t\tconst countChild = getBinaryNodeChild(result, 'count')\n\t\treturn +countChild!.attrs.value\n\t}\n\n\t/** generates and uploads a set of pre-keys to the server */\n\tconst uploadPreKeys = async(count = INITIAL_PREKEY_COUNT) => {\n\t\tawait keys.transaction(\n\t\t\tasync() => {\n\t\t\t\tlogger.info({ count }, 'uploading pre-keys')\n\t\t\t\tconst { update, node } = await getNextPreKeysNode({ creds, keys }, count)\n\n\t\t\t\tawait query(node)\n\t\t\t\tev.emit('creds.update', update)\n\n\t\t\t\tlogger.info({ count }, 'uploaded pre-keys')\n\t\t\t}\n\t\t)\n\t}\n\n\tconst uploadPreKeysToServerIfRequired = async() => {\n\t\tconst preKeyCount = await getAvailablePreKeysOnServer()\n\t\tlogger.info(`${preKeyCount} pre-keys found on server`)\n\t\tif(preKeyCount <= MIN_PREKEY_COUNT) {\n\t\t\tawait uploadPreKeys()\n\t\t}\n\t}\n\n\tconst onMessageRecieved = (data: Buffer) => {\n\t\tnoise.decodeFrame(data, frame => {\n\t\t\t// reset ping timeout\n\t\t\tlastDateRecv = new Date()\n\n\t\t\tlet anyTriggered = false\n\n\t\t\tanyTriggered = ws.emit('frame', frame)\n\t\t\t// if it's a binary node\n\t\t\tif(!(frame instanceof Uint8Array)) {\n\t\t\t\tconst msgId = frame.attrs.id\n\n\t\t\t\tif(logger.level === 'trace') {\n\t\t\t\t\tlogger.trace(binaryNodeToString(frame), 'recv xml')\n\t\t\t\t}\n\n\t\t\t\t/* Check if this is a response to a message we sent */\n\t\t\t\tanyTriggered = ws.emit(`${DEF_TAG_PREFIX}${msgId}`, frame) || anyTriggered\n\t\t\t\t/* Check if this is a response to a message we are expecting */\n\t\t\t\tconst l0 = frame.tag\n\t\t\t\tconst l1 = frame.attrs || {}\n\t\t\t\tconst l2 = Array.isArray(frame.content) ? frame.content[0]?.tag : ''\n\n\t\t\t\tObject.keys(l1).forEach(key => {\n\t\t\t\t\tanyTriggered = ws.emit(`${DEF_CALLBACK_PREFIX}${l0},${key}:${l1[key]},${l2}`, frame) || anyTriggered\n\t\t\t\t\tanyTriggered = ws.emit(`${DEF_CALLBACK_PREFIX}${l0},${key}:${l1[key]}`, frame) || anyTriggered\n\t\t\t\t\tanyTriggered = ws.emit(`${DEF_CALLBACK_PREFIX}${l0},${key}`, frame) || anyTriggered\n\t\t\t\t})\n\t\t\t\tanyTriggered = ws.emit(`${DEF_CALLBACK_PREFIX}${l0},,${l2}`, frame) || anyTriggered\n\t\t\t\tanyTriggered = ws.emit(`${DEF_CALLBACK_PREFIX}${l0}`, frame) || anyTriggered\n\n\t\t\t\tif(!anyTriggered && logger.level === 'debug') {\n\t\t\t\t\tlogger.debug({ unhandled: true, msgId, fromMe: false, frame }, 'communication recv')\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tconst end = (error: Error | undefined) => {\n\t\tif(closed) {\n\t\t\tlogger.trace({ trace: error?.stack }, 'connection already closed')\n\t\t\treturn\n\t\t}\n\n\t\tclosed = true\n\t\tlogger.info(\n\t\t\t{ trace: error?.stack },\n\t\t\terror ? 'connection errored' : 'connection closed'\n\t\t)\n\n\t\tclearInterval(keepAliveReq)\n\t\tclearTimeout(qrTimer)\n\n\t\tws.removeAllListeners('close')\n\t\tws.removeAllListeners('error')\n\t\tws.removeAllListeners('open')\n\t\tws.removeAllListeners('message')\n\n\t\tif(!ws.isClosed && !ws.isClosing) {\n\t\t\ttry {\n\t\t\t\tws.close()\n\t\t\t} catch{ }\n\t\t}\n\n\t\tev.emit('connection.update', {\n\t\t\tconnection: 'close',\n\t\t\tlastDisconnect: {\n\t\t\t\terror,\n\t\t\t\tdate: new Date()\n\t\t\t}\n\t\t})\n\t\tev.removeAllListeners('connection.update')\n\t}\n\n\tconst waitForSocketOpen = async() => {\n\t\tif(ws.isOpen) {\n\t\t\treturn\n\t\t}\n\n\t\tif(ws.isClosed || ws.isClosing) {\n\t\t\tthrow new Boom('Connection Closed', { statusCode: DisconnectReason.connectionClosed })\n\t\t}\n\n\t\tlet onOpen: () => void\n\t\tlet onClose: (err: Error) => void\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tonOpen = () => resolve(undefined)\n\t\t\tonClose = mapWebSocketError(reject)\n\t\t\tws.on('open', onOpen)\n\t\t\tws.on('close', onClose)\n\t\t\tws.on('error', onClose)\n\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tws.off('open', onOpen)\n\t\t\t\tws.off('close', onClose)\n\t\t\t\tws.off('error', onClose)\n\t\t\t})\n\t}\n\n\tconst startKeepAliveRequest = () => (\n\t\tkeepAliveReq = setInterval(() => {\n\t\t\tif(!lastDateRecv) {\n\t\t\t\tlastDateRecv = new Date()\n\t\t\t}\n\n\t\t\tconst diff = Date.now() - lastDateRecv.getTime()\n\t\t\t/*\n\t\t\t\tcheck if it's been a suspicious amount of time since the server responded with our last seen\n\t\t\t\tit could be that the network is down\n\t\t\t*/\n\t\t\tif(diff > keepAliveIntervalMs + 5000) {\n\t\t\t\tend(new Boom('Connection was lost', { statusCode: DisconnectReason.connectionLost }))\n\t\t\t} else if(ws.isOpen) {\n\t\t\t\t// if its all good, send a keep alive request\n\t\t\t\tquery(\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'iq',\n\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\tid: generateMessageTag(),\n\t\t\t\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\t\t\t\ttype: 'get',\n\t\t\t\t\t\t\txmlns: 'w:p',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontent: [{ tag: 'ping', attrs: {} }]\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tlogger.error({ trace: err.stack }, 'error in sending keep alive')\n\t\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tlogger.warn('keep alive called when WS not open')\n\t\t\t}\n\t\t}, keepAliveIntervalMs)\n\t)\n\t/** i have no idea why this exists. pls enlighten me */\n\tconst sendPassiveIq = (tag: 'passive' | 'active') => (\n\t\tquery({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\txmlns: 'passive',\n\t\t\t\ttype: 'set',\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{ tag, attrs: {} }\n\t\t\t]\n\t\t})\n\t)\n\n\t/** logout & invalidate connection */\n\tconst logout = async(msg?: string) => {\n\t\tconst jid = authState.creds.me?.id\n\t\tif(jid) {\n\t\t\tawait sendNode({\n\t\t\t\ttag: 'iq',\n\t\t\t\tattrs: {\n\t\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\t\ttype: 'set',\n\t\t\t\t\tid: generateMessageTag(),\n\t\t\t\t\txmlns: 'md'\n\t\t\t\t},\n\t\t\t\tcontent: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'remove-companion-device',\n\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\tjid,\n\t\t\t\t\t\t\treason: 'user_initiated'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t})\n\t\t}\n\n\t\tend(new Boom(msg || 'Intentional Logout', { statusCode: DisconnectReason.loggedOut }))\n\t}\n\n\tconst requestPairingCode = async(phoneNumber: string): Promise<string> => {\n\t\tauthState.creds.pairingCode = bytesToCrockford(randomBytes(5))\n\t\tauthState.creds.me = {\n\t\t\tid: jidEncode(phoneNumber, 's.whatsapp.net'),\n\t\t\tname: '~'\n\t\t}\n\t\tev.emit('creds.update', authState.creds)\n\t\tawait sendNode({\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'set',\n\t\t\t\tid: generateMessageTag(),\n\t\t\t\txmlns: 'md'\n\t\t\t},\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'link_code_companion_reg',\n\t\t\t\t\tattrs: {\n\t\t\t\t\t\tjid: authState.creds.me.id,\n\t\t\t\t\t\tstage: 'companion_hello',\n\t\t\t\t\t\t// eslint-disable-next-line camelcase\n\t\t\t\t\t\tshould_show_push_notification: 'true'\n\t\t\t\t\t},\n\t\t\t\t\tcontent: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'link_code_pairing_wrapped_companion_ephemeral_pub',\n\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\tcontent: await generatePairingKey()\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'companion_server_auth_key_pub',\n\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\tcontent: authState.creds.noiseKey.public\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'companion_platform_id',\n\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\tcontent: '49' // Chrome\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'companion_platform_display',\n\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\tcontent: config.browser[0]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'link_code_pairing_nonce',\n\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\tcontent: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t})\n\t\treturn authState.creds.pairingCode\n\t}\n\n\tasync function generatePairingKey() {\n\t\tconst salt = randomBytes(32)\n\t\tconst randomIv = randomBytes(16)\n\t\tconst key = derivePairingCodeKey(authState.creds.pairingCode!, salt)\n\t\tconst ciphered = aesEncryptCTR(authState.creds.pairingEphemeralKeyPair.public, key, randomIv)\n\t\treturn Buffer.concat([salt, randomIv, ciphered])\n\t}\n\n\tws.on('message', onMessageRecieved)\n\tws.on('open', async() => {\n\t\ttry {\n\t\t\tawait validateConnection()\n\t\t} catch(err) {\n\t\t\tlogger.error({ err }, 'error in validating connection')\n\t\t\tend(err)\n\t\t}\n\t})\n\tws.on('error', mapWebSocketError(end))\n\tws.on('close', () => end(new Boom('Connection Terminated', { statusCode: DisconnectReason.connectionClosed })))\n\t// the server terminated the connection\n\tws.on('CB:xmlstreamend', () => end(new Boom('Connection Terminated by Server', { statusCode: DisconnectReason.connectionClosed })))\n\t// QR gen\n\tws.on('CB:iq,type:set,pair-device', async(stanza: BinaryNode) => {\n\t\tconst iq: BinaryNode = {\n\t\t\ttag: 'iq',\n\t\t\tattrs: {\n\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\ttype: 'result',\n\t\t\t\tid: stanza.attrs.id,\n\t\t\t}\n\t\t}\n\t\tawait sendNode(iq)\n\n\t\tconst pairDeviceNode = getBinaryNodeChild(stanza, 'pair-device')\n\t\tconst refNodes = getBinaryNodeChildren(pairDeviceNode, 'ref')\n\t\tconst noiseKeyB64 = Buffer.from(creds.noiseKey.public).toString('base64')\n\t\tconst identityKeyB64 = Buffer.from(creds.signedIdentityKey.public).toString('base64')\n\t\tconst advB64 = creds.advSecretKey\n\n\t\tlet qrMs = qrTimeout || 60_000 // time to let a QR live\n\t\tconst genPairQR = () => {\n\t\t\tif(!ws.isOpen) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst refNode = refNodes.shift()\n\t\t\tif(!refNode) {\n\t\t\t\tend(new Boom('QR refs attempts ended', { statusCode: DisconnectReason.timedOut }))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst ref = (refNode.content as Buffer).toString('utf-8')\n\t\t\tconst qr = [ref, noiseKeyB64, identityKeyB64, advB64].join(',')\n\n\t\t\tev.emit('connection.update', { qr })\n\n\t\t\tqrTimer = setTimeout(genPairQR, qrMs)\n\t\t\tqrMs = qrTimeout || 20_000 // shorter subsequent qrs\n\t\t}\n\n\t\tgenPairQR()\n\t})\n\t// device paired for the first time\n\t// if device pairs successfully, the server asks to restart the connection\n\tws.on('CB:iq,,pair-success', async(stanza: BinaryNode) => {\n\t\tlogger.debug('pair success recv')\n\t\ttry {\n\t\t\tconst { reply, creds: updatedCreds } = configureSuccessfulPairing(stanza, creds)\n\n\t\t\tlogger.info(\n\t\t\t\t{ me: updatedCreds.me, platform: updatedCreds.platform },\n\t\t\t\t'pairing configured successfully, expect to restart the connection...'\n\t\t\t)\n\n\t\t\tev.emit('creds.update', updatedCreds)\n\t\t\tev.emit('connection.update', { isNewLogin: true, qr: undefined })\n\n\t\t\tawait sendNode(reply)\n\t\t} catch(error) {\n\t\t\tlogger.info({ trace: error.stack }, 'error in pairing')\n\t\t\tend(error)\n\t\t}\n\t})\n\t// login complete\n\tws.on('CB:success', async(node: BinaryNode) => {\n\t\tawait uploadPreKeysToServerIfRequired()\n\t\tawait sendPassiveIq('active')\n\n\t\tlogger.info('opened connection to WA')\n\t\tclearTimeout(qrTimer) // will never happen in all likelyhood -- but just in case WA sends success on first try\n\n\t\tev.emit('creds.update', { me: { id: authState.creds.me!.id, lid: node.attrs.lid } })\n\n\t\tev.emit('connection.update', { connection: 'open' })\n\t})\n\n\tws.on('CB:stream:error', (node: BinaryNode) => {\n\t\tlogger.error({ node }, 'stream errored out')\n\n\t\tconst { reason, statusCode } = getErrorCodeFromStreamError(node)\n\n\t\tend(new Boom(`Stream Errored (${reason})`, { statusCode, data: node }))\n\t})\n\t// stream fail, possible logout\n\tws.on('CB:failure', (node: BinaryNode) => {\n\t\tconst reason = +(node.attrs.reason || 500)\n\t\tend(new Boom('Connection Failure', { statusCode: reason, data: node.attrs }))\n\t})\n\n\tws.on('CB:ib,,downgrade_webclient', () => {\n\t\tend(new Boom('Multi-device beta not joined', { statusCode: DisconnectReason.multideviceMismatch }))\n\t})\n\n\tlet didStartBuffer = false\n\tprocess.nextTick(() => {\n\t\tif(creds.me?.id) {\n\t\t\t// start buffering important events\n\t\t\t// if we're logged in\n\t\t\tev.buffer()\n\t\t\tdidStartBuffer = true\n\t\t}\n\n\t\tev.emit('connection.update', { connection: 'connecting', receivedPendingNotifications: false, qr: undefined })\n\t})\n\n\t// called when all offline notifs are handled\n\tws.on('CB:ib,,offline', (node: BinaryNode) => {\n\t\tconst child = getBinaryNodeChild(node, 'offline')\n\t\tconst offlineNotifs = +(child?.attrs.count || 0)\n\n\t\tlogger.info(`handled ${offlineNotifs} offline messages/notifications`)\n\t\tif(didStartBuffer) {\n\t\t\tev.flush()\n\t\t\tlogger.trace('flushed events for initial buffer')\n\t\t}\n\n\t\tev.emit('connection.update', { receivedPendingNotifications: true })\n\t})\n\n\t// update credentials when required\n\tev.on('creds.update', update => {\n\t\tconst name = update.me?.name\n\t\t// if name has just been received\n\t\tif(creds.me?.name !== name) {\n\t\t\tlogger.debug({ name }, 'updated pushName')\n\t\t\tsendNode({\n\t\t\t\ttag: 'presence',\n\t\t\t\tattrs: { name: name! }\n\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tlogger.warn({ trace: err.stack }, 'error in sending presence update on name change')\n\t\t\t\t})\n\t\t}\n\n\t\tObject.assign(creds, update)\n\t})\n\n\tif(printQRInTerminal) {\n\t\tprintQRIfNecessaryListener(ev, logger)\n\t}\n\n\treturn {\n\t\ttype: 'md' as 'md',\n\t\tws,\n\t\tev,\n\t\tauthState: { creds, keys },\n\t\tsignalRepository,\n\t\tget user() {\n\t\t\treturn authState.creds.me\n\t\t},\n\t\tgenerateMessageTag,\n\t\tquery,\n\t\twaitForMessage,\n\t\twaitForSocketOpen,\n\t\tsendRawMessage,\n\t\tsendNode,\n\t\tlogout,\n\t\tend,\n\t\tonUnexpectedError,\n\t\tuploadPreKeys,\n\t\tuploadPreKeysToServerIfRequired,\n\t\trequestPairingCode,\n\t\t/** Waits for the connection to WA to reach a state */\n\t\twaitForConnectionUpdate: bindWaitForConnectionUpdate(ev),\n\t}\n}\n\n/**\n * map the websocket error to the right type\n * so it can be retried by the caller\n * */\nfunction mapWebSocketError(handler: (err: Error) => void) {\n\treturn (error: Error) => {\n\t\thandler(\n\t\t\tnew Boom(\n\t\t\t\t`WebSocket Error (${error?.message})`,\n\t\t\t\t{ statusCode: getCodeFromWSError(error), data: error }\n\t\t\t)\n\t\t)\n\t}\n}\n\nexport type Socket = ReturnType<typeof makeSocket>\n"]}