{"version":3,"file":"messages-recv.js","sourceRoot":"/","sources":["Socket/messages-recv.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { Boom } from '@hapi/boom'\nimport { randomBytes } from 'crypto'\nimport NodeCache from 'node-cache'\nimport { proto } from '../../WAProto'\nimport { DEFAULT_CACHE_TTLS, KEY_BUNDLE_TYPE, MIN_PREKEY_COUNT } from '../Defaults'\nimport { MessageReceiptType, MessageRelayOptions, MessageUserReceipt, SocketConfig, WACallEvent, WAMessageKey, WAMessageStatus, WAMessageStubType, WAPatchName } from '../Types'\nimport {\n\taesDecryptCTR,\n\taesEncryptGCM,\n\tCurve,\n\tdecodeMediaRetryNode,\n\tdecryptMessageNode,\n\tdelay,\n\tderivePairingCodeKey,\n\tencodeBigEndian,\n\tencodeSignedDeviceIdentity,\n\tgetCallStatusFromNode,\n\tgetHistoryMsg,\n\tgetNextPreKeys,\n\tgetStatusFromReceiptType, hkdf,\n\tunixTimestampSeconds,\n\txmppPreKey,\n\txmppSignedPreKey\n} from '../Utils'\nimport { cleanMessage } from '../Utils'\nimport { makeMutex } from '../Utils/make-mutex'\nimport {\n\tareJidsSameUser,\n\tBinaryNode,\n\tgetAllBinaryNodeChildren,\n\tgetBinaryNodeChild,\n\tgetBinaryNodeChildBuffer,\n\tgetBinaryNodeChildren,\n\tisJidGroup,\n\tisJidUser,\n\tjidDecode,\n\tjidNormalizedUser,\n\tS_WHATSAPP_NET\n} from '../WABinary'\nimport { extractGroupMetadata } from './groups'\nimport { makeMessagesSocket } from './messages-send'\n\nexport const makeMessagesRecvSocket = (config: SocketConfig) => {\n\tconst {\n\t\tlogger,\n\t\tretryRequestDelayMs,\n\t\tgetMessage,\n\t\tshouldIgnoreJid\n\t} = config\n\tconst sock = makeMessagesSocket(config)\n\tconst {\n\t\tev,\n\t\tauthState,\n\t\tws,\n\t\tprocessingMutex,\n\t\tsignalRepository,\n\t\tquery,\n\t\tupsertMessage,\n\t\tresyncAppState,\n\t\tonUnexpectedError,\n\t\tassertSessions,\n\t\tsendNode,\n\t\trelayMessage,\n\t\tsendReceipt,\n\t\tuploadPreKeys,\n\t} = sock\n\n\t/** this mutex ensures that each retryRequest will wait for the previous one to finish */\n\tconst retryMutex = makeMutex()\n\n\tconst msgRetryCache = config.msgRetryCounterCache || new NodeCache({\n\t\tstdTTL: DEFAULT_CACHE_TTLS.MSG_RETRY, // 1 hour\n\t\tuseClones: false\n\t})\n\tconst callOfferCache = config.callOfferCache || new NodeCache({\n\t\tstdTTL: DEFAULT_CACHE_TTLS.CALL_OFFER, // 5 mins\n\t\tuseClones: false\n\t})\n\n\tlet sendActiveReceipts = false\n\n\tconst sendMessageAck = async({ tag, attrs }: BinaryNode) => {\n\t\tconst stanza: BinaryNode = {\n\t\t\ttag: 'ack',\n\t\t\tattrs: {\n\t\t\t\tid: attrs.id,\n\t\t\t\tto: attrs.from,\n\t\t\t\tclass: tag,\n\t\t\t}\n\t\t}\n\n\t\tif(!!attrs.participant) {\n\t\t\tstanza.attrs.participant = attrs.participant\n\t\t}\n\n\t\tif(!!attrs.recipient) {\n\t\t\tstanza.attrs.recipient = attrs.recipient\n\t\t}\n\n\t\tif(tag !== 'message' && attrs.type) {\n\t\t\tstanza.attrs.type = attrs.type\n\t\t}\n\n\t\tlogger.debug({ recv: { tag, attrs }, sent: stanza.attrs }, 'sent ack')\n\t\tawait sendNode(stanza)\n\t}\n\n\tconst rejectCall = async(callId: string, callFrom: string) => {\n\t\tconst stanza: BinaryNode = ({\n\t\t\ttag: 'call',\n\t\t\tattrs: {\n\t\t\t\tfrom: authState.creds.me!.id,\n\t\t\t\tto: callFrom,\n\t\t\t},\n\t\t\tcontent: [{\n\t\t\t    tag: 'reject',\n\t\t\t    attrs: {\n\t\t\t\t\t'call-id': callId,\n\t\t\t\t\t'call-creator': callFrom,\n\t\t\t\t\tcount: '0',\n\t\t\t    },\n\t\t\t    content: undefined,\n\t\t\t}],\n\t\t})\n\t\tawait query(stanza)\n\t}\n\n\tconst sendRetryRequest = async(node: BinaryNode, forceIncludeKeys = false) => {\n\t\tconst msgId = node.attrs.id\n\n\t\tlet retryCount = msgRetryCache.get<number>(msgId) || 0\n\t\tif(retryCount >= 5) {\n\t\t\tlogger.debug({ retryCount, msgId }, 'reached retry limit, clearing')\n\t\t\tmsgRetryCache.del(msgId)\n\t\t\treturn\n\t\t}\n\n\t\tretryCount += 1\n\t\tmsgRetryCache.set(msgId, retryCount)\n\n\t\tconst { account, signedPreKey, signedIdentityKey: identityKey } = authState.creds\n\n\t\tconst deviceIdentity = encodeSignedDeviceIdentity(account!, true)\n\t\tawait authState.keys.transaction(\n\t\t\tasync() => {\n\t\t\t\tconst receipt: BinaryNode = {\n\t\t\t\t\ttag: 'receipt',\n\t\t\t\t\tattrs: {\n\t\t\t\t\t\tid: msgId,\n\t\t\t\t\t\ttype: 'retry',\n\t\t\t\t\t\tto: node.attrs.from\n\t\t\t\t\t},\n\t\t\t\t\tcontent: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'retry',\n\t\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\t\tcount: retryCount.toString(),\n\t\t\t\t\t\t\t\tid: node.attrs.id,\n\t\t\t\t\t\t\t\tt: node.attrs.t,\n\t\t\t\t\t\t\t\tv: '1'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'registration',\n\t\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\t\tcontent: encodeBigEndian(authState.creds.registrationId)\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\n\t\t\t\tif(node.attrs.recipient) {\n\t\t\t\t\treceipt.attrs.recipient = node.attrs.recipient\n\t\t\t\t}\n\n\t\t\t\tif(node.attrs.participant) {\n\t\t\t\t\treceipt.attrs.participant = node.attrs.participant\n\t\t\t\t}\n\n\t\t\t\tif(retryCount > 1 || forceIncludeKeys) {\n\t\t\t\t\tconst { update, preKeys } = await getNextPreKeys(authState, 1)\n\n\t\t\t\t\tconst [keyId] = Object.keys(preKeys)\n\t\t\t\t\tconst key = preKeys[+keyId]\n\n\t\t\t\t\tconst content = receipt.content! as BinaryNode[]\n\t\t\t\t\tcontent.push({\n\t\t\t\t\t\ttag: 'keys',\n\t\t\t\t\t\tattrs: { },\n\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t{ tag: 'type', attrs: { }, content: Buffer.from(KEY_BUNDLE_TYPE) },\n\t\t\t\t\t\t\t{ tag: 'identity', attrs: { }, content: identityKey.public },\n\t\t\t\t\t\t\txmppPreKey(key, +keyId),\n\t\t\t\t\t\t\txmppSignedPreKey(signedPreKey),\n\t\t\t\t\t\t\t{ tag: 'device-identity', attrs: { }, content: deviceIdentity }\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\n\t\t\t\t\tev.emit('creds.update', update)\n\t\t\t\t}\n\n\t\t\t\tawait sendNode(receipt)\n\n\t\t\t\tlogger.info({ msgAttrs: node.attrs, retryCount }, 'sent retry receipt')\n\t\t\t}\n\t\t)\n\t}\n\n\tconst handleEncryptNotification = async(node: BinaryNode) => {\n\t\tconst from = node.attrs.from\n\t\tif(from === S_WHATSAPP_NET) {\n\t\t\tconst countChild = getBinaryNodeChild(node, 'count')\n\t\t\tconst count = +countChild!.attrs.value\n\t\t\tconst shouldUploadMorePreKeys = count < MIN_PREKEY_COUNT\n\n\t\t\tlogger.debug({ count, shouldUploadMorePreKeys }, 'recv pre-key count')\n\t\t\tif(shouldUploadMorePreKeys) {\n\t\t\t\tawait uploadPreKeys()\n\t\t\t}\n\t\t} else {\n\t\t\tconst identityNode = getBinaryNodeChild(node, 'identity')\n\t\t\tif(identityNode) {\n\t\t\t\tlogger.info({ jid: from }, 'identity changed')\n\t\t\t\t// not handling right now\n\t\t\t\t// signal will override new identity anyway\n\t\t\t} else {\n\t\t\t\tlogger.info({ node }, 'unknown encrypt notification')\n\t\t\t}\n\t\t}\n\t}\n\n\tconst handleGroupNotification = (\n\t\tparticipant: string,\n\t\tchild: BinaryNode,\n\t\tmsg: Partial<proto.IWebMessageInfo>\n\t) => {\n\t\tswitch (child?.tag) {\n\t\tcase 'create':\n\t\t\tconst metadata = extractGroupMetadata(child)\n\n\t\t\tmsg.messageStubType = WAMessageStubType.GROUP_CREATE\n\t\t\tmsg.messageStubParameters = [metadata.subject]\n\t\t\tmsg.key = { participant: metadata.owner }\n\n\t\t\tev.emit('chats.upsert', [{\n\t\t\t\tid: metadata.id,\n\t\t\t\tname: metadata.subject,\n\t\t\t\tconversationTimestamp: metadata.creation,\n\t\t\t}])\n\t\t\tev.emit('groups.upsert', [{\n\t\t\t\t...metadata,\n\t\t\t\tauthor: participant\n\t\t\t}])\n\t\t\tbreak\n\t\tcase 'ephemeral':\n\t\tcase 'not_ephemeral':\n\t\t\tmsg.message = {\n\t\t\t\tprotocolMessage: {\n\t\t\t\t\ttype: proto.Message.ProtocolMessage.Type.EPHEMERAL_SETTING,\n\t\t\t\t\tephemeralExpiration: +(child.attrs.expiration || 0)\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'promote':\n\t\tcase 'demote':\n\t\tcase 'remove':\n\t\tcase 'add':\n\t\tcase 'leave':\n\t\t\tconst stubType = `GROUP_PARTICIPANT_${child.tag.toUpperCase()}`\n\t\t\tmsg.messageStubType = WAMessageStubType[stubType]\n\n\t\t\tconst participants = getBinaryNodeChildren(child, 'participant').map(p => p.attrs.jid)\n\t\t\tif(\n\t\t\t\tparticipants.length === 1 &&\n\t\t\t\t\t// if recv. \"remove\" message and sender removed themselves\n\t\t\t\t\t// mark as left\n\t\t\t\t\tareJidsSameUser(participants[0], participant) &&\n\t\t\t\t\tchild.tag === 'remove'\n\t\t\t) {\n\t\t\t\tmsg.messageStubType = WAMessageStubType.GROUP_PARTICIPANT_LEAVE\n\t\t\t}\n\n\t\t\tmsg.messageStubParameters = participants\n\t\t\tbreak\n\t\tcase 'subject':\n\t\t\tmsg.messageStubType = WAMessageStubType.GROUP_CHANGE_SUBJECT\n\t\t\tmsg.messageStubParameters = [ child.attrs.subject ]\n\t\t\tbreak\n\t\tcase 'announcement':\n\t\tcase 'not_announcement':\n\t\t\tmsg.messageStubType = WAMessageStubType.GROUP_CHANGE_ANNOUNCE\n\t\t\tmsg.messageStubParameters = [ (child.tag === 'announcement') ? 'on' : 'off' ]\n\t\t\tbreak\n\t\tcase 'locked':\n\t\tcase 'unlocked':\n\t\t\tmsg.messageStubType = WAMessageStubType.GROUP_CHANGE_RESTRICT\n\t\t\tmsg.messageStubParameters = [ (child.tag === 'locked') ? 'on' : 'off' ]\n\t\t\tbreak\n\t\tcase 'invite':\n\t\t\tmsg.messageStubType = WAMessageStubType.GROUP_CHANGE_INVITE_LINK\n\t\t\tmsg.messageStubParameters = [ child.attrs.code ]\n\t\t\tbreak\n\t\t}\n\t}\n\n\tconst processNotification = async(node: BinaryNode) => {\n\t\tconst result: Partial<proto.IWebMessageInfo> = { }\n\t\tconst [child] = getAllBinaryNodeChildren(node)\n\t\tconst nodeType = node.attrs.type\n\t\tconst from = jidNormalizedUser(node.attrs.from)\n\n\t\tswitch (nodeType) {\n\t\tcase 'privacy_token':\n\t\t\tconst tokenList = getBinaryNodeChildren(child, 'token')\n\t\t\tfor(const { attrs, content } of tokenList) {\n\t\t\t\tconst jid = attrs.jid\n\t\t\t\tev.emit('chats.update', [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: jid,\n\t\t\t\t\t\ttcToken: content as Buffer\n\t\t\t\t\t}\n\t\t\t\t])\n\n\t\t\t\tlogger.debug({ jid }, 'got privacy token update')\n\t\t\t}\n\n\t\t\tbreak\n\t\tcase 'w:gp2':\n\t\t\thandleGroupNotification(node.attrs.participant, child, result)\n\t\t\tbreak\n\t\tcase 'mediaretry':\n\t\t\tconst event = decodeMediaRetryNode(node)\n\t\t\tev.emit('messages.media-update', [event])\n\t\t\tbreak\n\t\tcase 'encrypt':\n\t\t\tawait handleEncryptNotification(node)\n\t\t\tbreak\n\t\tcase 'devices':\n\t\t\tconst devices = getBinaryNodeChildren(child, 'device')\n\t\t\tif(areJidsSameUser(child.attrs.jid, authState.creds.me!.id)) {\n\t\t\t\tconst deviceJids = devices.map(d => d.attrs.jid)\n\t\t\t\tlogger.info({ deviceJids }, 'got my own devices')\n\t\t\t}\n\n\t\t\tbreak\n\t\tcase 'server_sync':\n\t\t\tconst update = getBinaryNodeChild(node, 'collection')\n\t\t\tif(update) {\n\t\t\t\tconst name = update.attrs.name as WAPatchName\n\t\t\t\tawait resyncAppState([name], false)\n\t\t\t}\n\n\t\t\tbreak\n\t\tcase 'picture':\n\t\t\tconst setPicture = getBinaryNodeChild(node, 'set')\n\t\t\tconst delPicture = getBinaryNodeChild(node, 'delete')\n\n\t\t\tev.emit('contacts.update', [{\n\t\t\t\tid: from,\n\t\t\t\timgUrl: setPicture ? 'changed' : null\n\t\t\t}])\n\n\t\t\tif(isJidGroup(from)) {\n\t\t\t\tconst node = setPicture || delPicture\n\t\t\t\tresult.messageStubType = WAMessageStubType.GROUP_CHANGE_ICON\n\n\t\t\t\tif(setPicture) {\n\t\t\t\t\tresult.messageStubParameters = [setPicture.attrs.id]\n\t\t\t\t}\n\n\t\t\t\tresult.participant = node?.attrs.author\n\t\t\t\tresult.key = {\n\t\t\t\t\t...result.key || {},\n\t\t\t\t\tparticipant: setPicture?.attrs.author\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak\n\t\tcase 'account_sync':\n\t\t\tif(child.tag === 'disappearing_mode') {\n\t\t\t\tconst newDuration = +child.attrs.duration\n\t\t\t\tconst timestamp = +child.attrs.t\n\n\t\t\t\tlogger.info({ newDuration }, 'updated account disappearing mode')\n\n\t\t\t\tev.emit('creds.update', {\n\t\t\t\t\taccountSettings: {\n\t\t\t\t\t\t...authState.creds.accountSettings,\n\t\t\t\t\t\tdefaultDisappearingMode: {\n\t\t\t\t\t\t\tephemeralExpiration: newDuration,\n\t\t\t\t\t\t\tephemeralSettingTimestamp: timestamp,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else if(child.tag === 'blocklist') {\n\t\t\t\tconst blocklists = getBinaryNodeChildren(child, 'item')\n\n\t\t\t\tfor(const { attrs } of blocklists) {\n\t\t\t\t\tconst blocklist = [attrs.jid]\n\t\t\t\t\tconst type = (attrs.action === 'block') ? 'add' : 'remove'\n\n\t\t\t\t\tev.emit('blocklist.update', { blocklist, type })\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak\n\t\tcase 'link_code_companion_reg':\n\t\t\tconst linkCodeCompanionReg = getBinaryNodeChild(node, 'link_code_companion_reg')\n\t\t\tconst ref = toRequiredBuffer(getBinaryNodeChildBuffer(linkCodeCompanionReg, 'link_code_pairing_ref'))\n\t\t\tconst primaryIdentityPublicKey = toRequiredBuffer(getBinaryNodeChildBuffer(linkCodeCompanionReg, 'primary_identity_pub'))\n\t\t\tconst primaryEphemeralPublicKeyWrapped = toRequiredBuffer(getBinaryNodeChildBuffer(linkCodeCompanionReg, 'link_code_pairing_wrapped_primary_ephemeral_pub'))\n\t\t\tconst codePairingPublicKey = decipherLinkPublicKey(primaryEphemeralPublicKeyWrapped)\n\t\t\tconst companionSharedKey = Curve.sharedKey(authState.creds.pairingEphemeralKeyPair.private, codePairingPublicKey)\n\t\t\tconst random = randomBytes(32)\n\t\t\tconst linkCodeSalt = randomBytes(32)\n\t\t\tconst linkCodePairingExpanded = hkdf(companionSharedKey, 32, {\n\t\t\t\tsalt: linkCodeSalt,\n\t\t\t\tinfo: 'link_code_pairing_key_bundle_encryption_key'\n\t\t\t})\n\t\t\tconst encryptPayload = Buffer.concat([Buffer.from(authState.creds.signedIdentityKey.public), primaryIdentityPublicKey, random])\n\t\t\tconst encryptIv = randomBytes(12)\n\t\t\tconst encrypted = aesEncryptGCM(encryptPayload, linkCodePairingExpanded, encryptIv, Buffer.alloc(0))\n\t\t\tconst encryptedPayload = Buffer.concat([linkCodeSalt, encryptIv, encrypted])\n\t\t\tconst identitySharedKey = Curve.sharedKey(authState.creds.signedIdentityKey.private, primaryIdentityPublicKey)\n\t\t\tconst identityPayload = Buffer.concat([companionSharedKey, identitySharedKey, random])\n\t\t\tauthState.creds.advSecretKey = hkdf(identityPayload, 32, { info: 'adv_secret' }).toString('base64')\n\t\t\tawait query({\n\t\t\t\ttag: 'iq',\n\t\t\t\tattrs: {\n\t\t\t\t\tto: S_WHATSAPP_NET,\n\t\t\t\t\ttype: 'set',\n\t\t\t\t\tid: sock.generateMessageTag(),\n\t\t\t\t\txmlns: 'md'\n\t\t\t\t},\n\t\t\t\tcontent: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'link_code_companion_reg',\n\t\t\t\t\t\tattrs: {\n\t\t\t\t\t\t\tjid: authState.creds.me!.id,\n\t\t\t\t\t\t\tstage: 'companion_finish',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttag: 'link_code_pairing_wrapped_key_bundle',\n\t\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\t\tcontent: encryptedPayload\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttag: 'companion_identity_public',\n\t\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\t\tcontent: authState.creds.signedIdentityKey.public\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttag: 'link_code_pairing_ref',\n\t\t\t\t\t\t\t\tattrs: {},\n\t\t\t\t\t\t\t\tcontent: ref\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t})\n\t\t\tauthState.creds.registered = true\n\t\t\tev.emit('creds.update', authState.creds)\n\t\t}\n\n\t\tif(Object.keys(result).length) {\n\t\t\treturn result\n\t\t}\n\t}\n\n\tfunction decipherLinkPublicKey(data: Uint8Array | Buffer) {\n\t\tconst buffer = toRequiredBuffer(data)\n\t\tconst salt = buffer.slice(0, 32)\n\t\tconst secretKey = derivePairingCodeKey(authState.creds.pairingCode!, salt)\n\t\tconst iv = buffer.slice(32, 48)\n\t\tconst payload = buffer.slice(48, 80)\n\t\treturn aesDecryptCTR(payload, secretKey, iv)\n\t}\n\n\tfunction toRequiredBuffer(data: Uint8Array | Buffer | undefined) {\n\t\tif(data === undefined) {\n\t\t\tthrow new Boom('Invalid buffer', { statusCode: 400 })\n\t\t}\n\n\t\treturn data instanceof Buffer ? data : Buffer.from(data)\n\t}\n\n\tconst willSendMessageAgain = (id: string, participant: string) => {\n\t\tconst key = `${id}:${participant}`\n\t\tconst retryCount = msgRetryCache.get<number>(key) || 0\n\t\treturn retryCount < 5\n\t}\n\n\tconst updateSendMessageAgainCount = (id: string, participant: string) => {\n\t\tconst key = `${id}:${participant}`\n\t\tconst newValue = (msgRetryCache.get<number>(key) || 0) + 1\n\t\tmsgRetryCache.set(key, newValue)\n\t}\n\n\tconst sendMessagesAgain = async(\n\t\tkey: proto.IMessageKey,\n\t\tids: string[],\n\t\tretryNode: BinaryNode\n\t) => {\n\t\tconst msgs = await Promise.all(ids.map(id => getMessage({ ...key, id })))\n\t\tconst remoteJid = key.remoteJid!\n\t\tconst participant = key.participant || remoteJid\n\t\t// if it's the primary jid sending the request\n\t\t// just re-send the message to everyone\n\t\t// prevents the first message decryption failure\n\t\tconst sendToAll = !jidDecode(participant)?.device\n\t\tawait assertSessions([participant], true)\n\n\t\tif(isJidGroup(remoteJid)) {\n\t\t\tawait authState.keys.set({ 'sender-key-memory': { [remoteJid]: null } })\n\t\t}\n\n\t\tlogger.debug({ participant, sendToAll }, 'forced new session for retry recp')\n\n\t\tfor(let i = 0; i < msgs.length;i++) {\n\t\t\tconst msg = msgs[i]\n\t\t\tif(msg) {\n\t\t\t\tupdateSendMessageAgainCount(ids[i], participant)\n\t\t\t\tconst msgRelayOpts: MessageRelayOptions = { messageId: ids[i] }\n\n\t\t\t\tif(sendToAll) {\n\t\t\t\t\tmsgRelayOpts.useUserDevicesCache = false\n\t\t\t\t} else {\n\t\t\t\t\tmsgRelayOpts.participant = {\n\t\t\t\t\t\tjid: participant,\n\t\t\t\t\t\tcount: +retryNode.attrs.count\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait relayMessage(key.remoteJid!, msg, msgRelayOpts)\n\t\t\t} else {\n\t\t\t\tlogger.debug({ jid: key.remoteJid, id: ids[i] }, 'recv retry request, but message not available')\n\t\t\t}\n\t\t}\n\t}\n\n\tconst handleReceipt = async(node: BinaryNode) => {\n\t\tconst { attrs, content } = node\n\t\tconst isLid = attrs.from.includes('lid')\n\t\tconst isNodeFromMe = areJidsSameUser(attrs.participant || attrs.from, isLid ? authState.creds.me?.lid : authState.creds.me?.id)\n\t\tconst remoteJid = !isNodeFromMe || isJidGroup(attrs.from) ? attrs.from : attrs.recipient\n\t\tconst fromMe = !attrs.recipient || (attrs.type === 'retry' && isNodeFromMe)\n\n\t\tconst key: proto.IMessageKey = {\n\t\t\tremoteJid,\n\t\t\tid: '',\n\t\t\tfromMe,\n\t\t\tparticipant: attrs.participant\n\t\t}\n\n\t\tif(shouldIgnoreJid(remoteJid)) {\n\t\t\tlogger.debug({ remoteJid }, 'ignoring receipt from jid')\n\t\t\tawait sendMessageAck(node)\n\t\t\treturn\n\t\t}\n\n\t\tconst ids = [attrs.id]\n\t\tif(Array.isArray(content)) {\n\t\t\tconst items = getBinaryNodeChildren(content[0], 'item')\n\t\t\tids.push(...items.map(i => i.attrs.id))\n\t\t}\n\n\t\tawait Promise.all([\n\t\t\tprocessingMutex.mutex(\n\t\t\t\tasync() => {\n\t\t\t\t\tconst status = getStatusFromReceiptType(attrs.type)\n\t\t\t\t\tif(\n\t\t\t\t\t\ttypeof status !== 'undefined' &&\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t// basically, we only want to know when a message from us has been delivered to/read by the other person\n\t\t\t\t\t\t\t// or another device of ours has read some messages\n\t\t\t\t\t\t\tstatus > proto.WebMessageInfo.Status.DELIVERY_ACK ||\n\t\t\t\t\t\t\t!isNodeFromMe\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif(isJidGroup(remoteJid)) {\n\t\t\t\t\t\t\tif(attrs.participant) {\n\t\t\t\t\t\t\t\tconst updateKey: keyof MessageUserReceipt = status === proto.WebMessageInfo.Status.DELIVERY_ACK ? 'receiptTimestamp' : 'readTimestamp'\n\t\t\t\t\t\t\t\tev.emit(\n\t\t\t\t\t\t\t\t\t'message-receipt.update',\n\t\t\t\t\t\t\t\t\tids.map(id => ({\n\t\t\t\t\t\t\t\t\t\tkey: { ...key, id },\n\t\t\t\t\t\t\t\t\t\treceipt: {\n\t\t\t\t\t\t\t\t\t\t\tuserJid: jidNormalizedUser(attrs.participant),\n\t\t\t\t\t\t\t\t\t\t\t[updateKey]: +attrs.t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tev.emit(\n\t\t\t\t\t\t\t\t'messages.update',\n\t\t\t\t\t\t\t\tids.map(id => ({\n\t\t\t\t\t\t\t\t\tkey: { ...key, id },\n\t\t\t\t\t\t\t\t\tupdate: { status }\n\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(attrs.type === 'retry') {\n\t\t\t\t\t\t// correctly set who is asking for the retry\n\t\t\t\t\t\tkey.participant = key.participant || attrs.from\n\t\t\t\t\t\tconst retryNode = getBinaryNodeChild(node, 'retry')\n\t\t\t\t\t\tif(willSendMessageAgain(ids[0], key.participant)) {\n\t\t\t\t\t\t\tif(key.fromMe) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tlogger.debug({ attrs, key }, 'recv retry request')\n\t\t\t\t\t\t\t\t\tawait sendMessagesAgain(key, ids, retryNode!)\n\t\t\t\t\t\t\t\t} catch(error) {\n\t\t\t\t\t\t\t\t\tlogger.error({ key, ids, trace: error.stack }, 'error in sending message again')\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlogger.info({ attrs, key }, 'recv retry for not fromMe message')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogger.info({ attrs, key }, 'will not send message again, as sent too many times')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t),\n\t\t\tsendMessageAck(node)\n\t\t])\n\t}\n\n\tconst handleNotification = async(node: BinaryNode) => {\n\t\tconst remoteJid = node.attrs.from\n\t\tif(shouldIgnoreJid(remoteJid)) {\n\t\t\tlogger.debug({ remoteJid, id: node.attrs.id }, 'ignored notification')\n\t\t\tawait sendMessageAck(node)\n\t\t\treturn\n\t\t}\n\n\t\tawait Promise.all([\n\t\t\tprocessingMutex.mutex(\n\t\t\t\tasync() => {\n\t\t\t\t\tconst msg = await processNotification(node)\n\t\t\t\t\tif(msg) {\n\t\t\t\t\t\tconst fromMe = areJidsSameUser(node.attrs.participant || remoteJid, authState.creds.me!.id)\n\t\t\t\t\t\tmsg.key = {\n\t\t\t\t\t\t\tremoteJid,\n\t\t\t\t\t\t\tfromMe,\n\t\t\t\t\t\t\tparticipant: node.attrs.participant,\n\t\t\t\t\t\t\tid: node.attrs.id,\n\t\t\t\t\t\t\t...(msg.key || {})\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmsg.participant ??= node.attrs.participant\n\t\t\t\t\t\tmsg.messageTimestamp = +node.attrs.t\n\n\t\t\t\t\t\tconst fullMsg = proto.WebMessageInfo.fromObject(msg)\n\t\t\t\t\t\tawait upsertMessage(fullMsg, 'append')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t),\n\t\t\tsendMessageAck(node)\n\t\t])\n\t}\n\n\tconst handleMessage = async(node: BinaryNode) => {\n\t\tconst { fullMessage: msg, category, author, decrypt } = decryptMessageNode(\n\t\t\tnode,\n\t\t\tauthState.creds.me!.id,\n\t\t\tauthState.creds.me!.lid || '',\n\t\t\tsignalRepository,\n\t\t\tlogger,\n\t\t)\n\n\t\tif(msg.message?.protocolMessage?.type === proto.Message.ProtocolMessage.Type.SHARE_PHONE_NUMBER) {\n\t\t\tif(node.attrs.sender_pn) {\n\t\t\t\tev.emit('chats.phoneNumberShare', { lid: node.attrs.from, jid: node.attrs.sender_pn })\n\t\t\t}\n\t\t}\n\n\t\tif(shouldIgnoreJid(msg.key.remoteJid!)) {\n\t\t\tlogger.debug({ key: msg.key }, 'ignored message')\n\t\t\tawait sendMessageAck(node)\n\t\t\treturn\n\t\t}\n\n\t\tawait Promise.all([\n\t\t\tprocessingMutex.mutex(\n\t\t\t\tasync() => {\n\t\t\t\t\tawait decrypt()\n\t\t\t\t\t// message failed to decrypt\n\t\t\t\t\tif(msg.messageStubType === proto.WebMessageInfo.StubType.CIPHERTEXT) {\n\t\t\t\t\t\tretryMutex.mutex(\n\t\t\t\t\t\t\tasync() => {\n\t\t\t\t\t\t\t\tif(ws.isOpen) {\n\t\t\t\t\t\t\t\t\tconst encNode = getBinaryNodeChild(node, 'enc')\n\t\t\t\t\t\t\t\t\tawait sendRetryRequest(node, !encNode)\n\t\t\t\t\t\t\t\t\tif(retryRequestDelayMs) {\n\t\t\t\t\t\t\t\t\t\tawait delay(retryRequestDelayMs)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tlogger.debug({ node }, 'connection closed, ignoring retry req')\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// no type in the receipt => message delivered\n\t\t\t\t\t\tlet type: MessageReceiptType = undefined\n\t\t\t\t\t\tlet participant = msg.key.participant\n\t\t\t\t\t\tif(category === 'peer') { // special peer message\n\t\t\t\t\t\t\ttype = 'peer_msg'\n\t\t\t\t\t\t} else if(msg.key.fromMe) { // message was sent by us from a different device\n\t\t\t\t\t\t\ttype = 'sender'\n\t\t\t\t\t\t\t// need to specially handle this case\n\t\t\t\t\t\t\tif(isJidUser(msg.key.remoteJid!)) {\n\t\t\t\t\t\t\t\tparticipant = author\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if(!sendActiveReceipts) {\n\t\t\t\t\t\t\ttype = 'inactive'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait sendReceipt(msg.key.remoteJid!, participant!, [msg.key.id!], type)\n\n\t\t\t\t\t\t// send ack for history message\n\t\t\t\t\t\tconst isAnyHistoryMsg = getHistoryMsg(msg.message!)\n\t\t\t\t\t\tif(isAnyHistoryMsg) {\n\t\t\t\t\t\t\tconst jid = jidNormalizedUser(msg.key.remoteJid!)\n\t\t\t\t\t\t\tawait sendReceipt(jid, undefined, [msg.key.id!], 'hist_sync')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcleanMessage(msg, authState.creds.me!.id)\n\n\t\t\t\t\tawait upsertMessage(msg, node.attrs.offline ? 'append' : 'notify')\n\t\t\t\t}\n\t\t\t),\n\t\t\tsendMessageAck(node)\n\t\t])\n\t}\n\n\tconst handleCall = async(node: BinaryNode) => {\n\t\tconst { attrs } = node\n\t\tconst [infoChild] = getAllBinaryNodeChildren(node)\n\t\tconst callId = infoChild.attrs['call-id']\n\t\tconst from = infoChild.attrs.from || infoChild.attrs['call-creator']\n\t\tconst status = getCallStatusFromNode(infoChild)\n\t\tconst call: WACallEvent = {\n\t\t\tchatId: attrs.from,\n\t\t\tfrom,\n\t\t\tid: callId,\n\t\t\tdate: new Date(+attrs.t * 1000),\n\t\t\toffline: !!attrs.offline,\n\t\t\tstatus,\n\t\t}\n\n\t\tif(status === 'offer') {\n\t\t\tcall.isVideo = !!getBinaryNodeChild(infoChild, 'video')\n\t\t\tcall.isGroup = infoChild.attrs.type === 'group'\n\t\t\tcallOfferCache.set(call.id, call)\n\t\t}\n\n\t\tconst existingCall = callOfferCache.get<WACallEvent>(call.id)\n\n\t\t// use existing call info to populate this event\n\t\tif(existingCall) {\n\t\t\tcall.isVideo = existingCall.isVideo\n\t\t\tcall.isGroup = existingCall.isGroup\n\t\t}\n\n\t\t// delete data once call has ended\n\t\tif(status === 'reject' || status === 'accept' || status === 'timeout') {\n\t\t\tcallOfferCache.del(call.id)\n\t\t}\n\n\t\tev.emit('call', [call])\n\n\t\tawait sendMessageAck(node)\n\t}\n\n\tconst handleBadAck = async({ attrs }: BinaryNode) => {\n\t\tconst key: WAMessageKey = { remoteJid: attrs.from, fromMe: true, id: attrs.id }\n\t\t// current hypothesis is that if pash is sent in the ack\n\t\t// it means -- the message hasn't reached all devices yet\n\t\t// we'll retry sending the message here\n\t\tif(attrs.phash) {\n\t\t\tlogger.info({ attrs }, 'received phash in ack, resending message...')\n\t\t\tconst msg = await getMessage(key)\n\t\t\tif(msg) {\n\t\t\t\tawait relayMessage(key.remoteJid!, msg, { messageId: key.id!, useUserDevicesCache: false })\n\t\t\t} else {\n\t\t\t\tlogger.warn({ attrs }, 'could not send message again, as it was not found')\n\t\t\t}\n\t\t}\n\n\t\t// error in acknowledgement,\n\t\t// device could not display the message\n\t\tif(attrs.error) {\n\t\t\tlogger.warn({ attrs }, 'received error in ack')\n\t\t\tev.emit(\n\t\t\t\t'messages.update',\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\tstatus: WAMessageStatus.ERROR,\n\t\t\t\t\t\t\tmessageStubParameters: [\n\t\t\t\t\t\t\t\tattrs.error\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t)\n\t\t}\n\t}\n\n\t/// processes a node with the given function\n\t/// and adds the task to the existing buffer if we're buffering events\n\tconst processNodeWithBuffer = async<T>(\n\t\tnode: BinaryNode,\n\t\tidentifier: string,\n\t\texec: (node: BinaryNode) => Promise<T>\n\t) => {\n\t\tev.buffer()\n\t\tawait execTask()\n\t\tev.flush()\n\n\t\tfunction execTask() {\n\t\t\treturn exec(node)\n\t\t\t\t.catch(err => onUnexpectedError(err, identifier))\n\t\t}\n\t}\n\n\t// recv a message\n\tws.on('CB:message', (node: BinaryNode) => {\n\t\tprocessNodeWithBuffer(node, 'processing message', handleMessage)\n\t})\n\n\tws.on('CB:call', async(node: BinaryNode) => {\n\t\tprocessNodeWithBuffer(node, 'handling call', handleCall)\n\t})\n\n\tws.on('CB:receipt', node => {\n\t\tprocessNodeWithBuffer(node, 'handling receipt', handleReceipt)\n\t})\n\n\tws.on('CB:notification', async(node: BinaryNode) => {\n\t\tprocessNodeWithBuffer(node, 'handling notification', handleNotification)\n\t})\n\n\tws.on('CB:ack,class:message', (node: BinaryNode) => {\n\t\thandleBadAck(node)\n\t\t\t.catch(error => onUnexpectedError(error, 'handling bad ack'))\n\t})\n\n\tev.on('call', ([ call ]) => {\n\t\t// missed call + group call notification message generation\n\t\tif(call.status === 'timeout' || (call.status === 'offer' && call.isGroup)) {\n\t\t\tconst msg: proto.IWebMessageInfo = {\n\t\t\t\tkey: {\n\t\t\t\t\tremoteJid: call.chatId,\n\t\t\t\t\tid: call.id,\n\t\t\t\t\tfromMe: false\n\t\t\t\t},\n\t\t\t\tmessageTimestamp: unixTimestampSeconds(call.date),\n\t\t\t}\n\t\t\tif(call.status === 'timeout') {\n\t\t\t\tif(call.isGroup) {\n\t\t\t\t\tmsg.messageStubType = call.isVideo ? WAMessageStubType.CALL_MISSED_GROUP_VIDEO : WAMessageStubType.CALL_MISSED_GROUP_VOICE\n\t\t\t\t} else {\n\t\t\t\t\tmsg.messageStubType = call.isVideo ? WAMessageStubType.CALL_MISSED_VIDEO : WAMessageStubType.CALL_MISSED_VOICE\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmsg.message = { call: { callKey: Buffer.from(call.id) } }\n\t\t\t}\n\n\t\t\tconst protoMsg = proto.WebMessageInfo.fromObject(msg)\n\t\t\tupsertMessage(protoMsg, call.offline ? 'append' : 'notify')\n\t\t}\n\t})\n\n\tev.on('connection.update', ({ isOnline }) => {\n\t\tif(typeof isOnline !== 'undefined') {\n\t\t\tsendActiveReceipts = isOnline\n\t\t\tlogger.trace(`sendActiveReceipts set to \"${sendActiveReceipts}\"`)\n\t\t}\n\t})\n\n\treturn {\n\t\t...sock,\n\t\tsendMessageAck,\n\t\tsendRetryRequest,\n\t\trejectCall\n\t}\n}"]}