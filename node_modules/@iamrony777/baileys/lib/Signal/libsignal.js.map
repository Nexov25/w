{"version":3,"file":"libsignal.js","sourceRoot":"/","sources":["Signal/libsignal.ts"],"names":[],"mappings":"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","sourcesContent":["import * as libsignal from 'libsignal'\nimport { GroupCipher, GroupSessionBuilder, SenderKeyDistributionMessage, SenderKeyName, SenderKeyRecord } from '../../WASignalGroup'\nimport { SignalAuthState } from '../Types'\nimport { SignalRepository } from '../Types/Signal'\nimport { generateSignalPubKey } from '../Utils'\nimport { jidDecode } from '../WABinary'\n\nexport function makeLibSignalRepository(auth: SignalAuthState): SignalRepository {\n\tconst storage = signalStorage(auth)\n\treturn {\n\t\tdecryptGroupMessage({ group, authorJid, msg }) {\n\t\t\tconst senderName = jidToSignalSenderKeyName(group, authorJid)\n\t\t\tconst cipher = new GroupCipher(storage, senderName)\n\n\t\t\treturn cipher.decrypt(msg)\n\t\t},\n\t\tasync processSenderKeyDistributionMessage({ item, authorJid }) {\n\t\t\tconst builder = new GroupSessionBuilder(storage)\n\t\t\tconst senderName = jidToSignalSenderKeyName(item.groupId!, authorJid)\n\n\t\t\tconst senderMsg = new SenderKeyDistributionMessage(null, null, null, null, item.axolotlSenderKeyDistributionMessage)\n\t\t\tconst { [senderName]: senderKey } = await auth.keys.get('sender-key', [senderName])\n\t\t\tif(!senderKey) {\n\t\t\t\tawait storage.storeSenderKey(senderName, new SenderKeyRecord())\n\t\t\t}\n\n\t\t\tawait builder.process(senderName, senderMsg)\n\t\t},\n\t\tasync decryptMessage({ jid, type, ciphertext }) {\n\t\t\tconst addr = jidToSignalProtocolAddress(jid)\n\t\t\tconst session = new libsignal.SessionCipher(storage, addr)\n\t\t\tlet result: Buffer\n\t\t\tswitch (type) {\n\t\t\tcase 'pkmsg':\n\t\t\t\tresult = await session.decryptPreKeyWhisperMessage(ciphertext)\n\t\t\t\tbreak\n\t\t\tcase 'msg':\n\t\t\t\tresult = await session.decryptWhisperMessage(ciphertext)\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\treturn result\n\t\t},\n\t\tasync encryptMessage({ jid, data }) {\n\t\t\tconst addr = jidToSignalProtocolAddress(jid)\n\t\t\tconst cipher = new libsignal.SessionCipher(storage, addr)\n\n\t\t\tconst { type: sigType, body } = await cipher.encrypt(data)\n\t\t\tconst type = sigType === 3 ? 'pkmsg' : 'msg'\n\t\t\treturn { type, ciphertext: Buffer.from(body, 'binary') }\n\t\t},\n\t\tasync encryptGroupMessage({ group, meId, data }) {\n\t\t\tconst senderName = jidToSignalSenderKeyName(group, meId)\n\t\t\tconst builder = new GroupSessionBuilder(storage)\n\n\t\t\tconst { [senderName]: senderKey } = await auth.keys.get('sender-key', [senderName])\n\t\t\tif(!senderKey) {\n\t\t\t\tawait storage.storeSenderKey(senderName, new SenderKeyRecord())\n\t\t\t}\n\n\t\t\tconst senderKeyDistributionMessage = await builder.create(senderName)\n\t\t\tconst session = new GroupCipher(storage, senderName)\n\t\t\tconst ciphertext = await session.encrypt(data)\n\n\t\t\treturn {\n\t\t\t\tciphertext,\n\t\t\t\tsenderKeyDistributionMessage: senderKeyDistributionMessage.serialize(),\n\t\t\t}\n\t\t},\n\t\tasync injectE2ESession({ jid, session }) {\n\t\t\tconst cipher = new libsignal.SessionBuilder(storage, jidToSignalProtocolAddress(jid))\n\t\t\tawait cipher.initOutgoing(session)\n\t\t},\n\t\tjidToSignalProtocolAddress(jid) {\n\t\t\treturn jidToSignalProtocolAddress(jid).toString()\n\t\t},\n\t}\n}\n\nconst jidToSignalProtocolAddress = (jid: string) => {\n\tconst { user, device } = jidDecode(jid)!\n\treturn new libsignal.ProtocolAddress(user, device || 0)\n}\n\nconst jidToSignalSenderKeyName = (group: string, user: string): string => {\n\treturn new SenderKeyName(group, jidToSignalProtocolAddress(user)).toString()\n}\n\nfunction signalStorage({ creds, keys }: SignalAuthState) {\n\treturn {\n\t\tloadSession: async(id: string) => {\n\t\t\tconst { [id]: sess } = await keys.get('session', [id])\n\t\t\tif(sess) {\n\t\t\t\treturn libsignal.SessionRecord.deserialize(sess)\n\t\t\t}\n\t\t},\n\t\tstoreSession: async(id, session) => {\n\t\t\tawait keys.set({ 'session': { [id]: session.serialize() } })\n\t\t},\n\t\tisTrustedIdentity: () => {\n\t\t\treturn true\n\t\t},\n\t\tloadPreKey: async(id: number | string) => {\n\t\t\tconst keyId = id.toString()\n\t\t\tconst { [keyId]: key } = await keys.get('pre-key', [keyId])\n\t\t\tif(key) {\n\t\t\t\treturn {\n\t\t\t\t\tprivKey: Buffer.from(key.private),\n\t\t\t\t\tpubKey: Buffer.from(key.public)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tremovePreKey: (id: number) => keys.set({ 'pre-key': { [id]: null } }),\n\t\tloadSignedPreKey: () => {\n\t\t\tconst key = creds.signedPreKey\n\t\t\treturn {\n\t\t\t\tprivKey: Buffer.from(key.keyPair.private),\n\t\t\t\tpubKey: Buffer.from(key.keyPair.public)\n\t\t\t}\n\t\t},\n\t\tloadSenderKey: async(keyId: string) => {\n\t\t\tconst { [keyId]: key } = await keys.get('sender-key', [keyId])\n\t\t\tif(key) {\n\t\t\t\treturn new SenderKeyRecord(key)\n\t\t\t}\n\t\t},\n\t\tstoreSenderKey: async(keyId, key) => {\n\t\t\tawait keys.set({ 'sender-key': { [keyId]: key.serialize() } })\n\t\t},\n\t\tgetOurRegistrationId: () => (\n\t\t\tcreds.registrationId\n\t\t),\n\t\tgetOurIdentity: () => {\n\t\t\tconst { signedIdentityKey } = creds\n\t\t\treturn {\n\t\t\t\tprivKey: Buffer.from(signedIdentityKey.private),\n\t\t\t\tpubKey: generateSignalPubKey(signedIdentityKey.public),\n\t\t\t}\n\t\t}\n\t}\n}"]}