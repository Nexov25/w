{"version":3,"file":"make-mongo-store.js","sourceRoot":"/","sources":["Store/make-mongo-store.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Comparable } from '@adiwajshing/keyed-db/lib/Types'\nimport { CronJob } from 'cron'\nimport moment from 'moment-timezone'\nimport { Db } from 'mongodb'\nimport type { Logger } from 'pino'\nimport { proto } from '../../WAProto'\nimport { DEFAULT_CONNECTION_CONFIG } from '../Defaults'\nimport type makeMDSocket from '../Socket'\nimport type {\n\tBaileysEventEmitter,\n\tChat,\n\tConnectionState,\n\tContact,\n\tGroupMetadata,\n\tPresenceData,\n\tWAMessage,\n\tWAMessageCursor,\n\tWAMessageKey,\n} from '../Types'\nimport { Label } from '../Types/Label'\nimport {\n\tLabelAssociation,\n\tLabelAssociationType,\n\tMessageLabelAssociation,\n} from '../Types/LabelAssociation'\nimport {\n\ttoNumber,\n\tupdateMessageWithReaction,\n\tupdateMessageWithReceipt,\n} from '../Utils'\nimport { jidNormalizedUser } from '../WABinary'\nimport makeOrderedDictionary from './make-ordered-dictionary'\nimport { ObjectRepository } from './object-repository'\n\ntype WASocket = ReturnType<typeof makeMDSocket>;\n\nexport const waChatKey = (pin: boolean) => ({\n\tkey: (c: Chat) => (pin ? (c.pinned ? '1' : '0') : '') +\n    (c.archived ? '0' : '1') +\n    (c.conversationTimestamp\n    \t? c.conversationTimestamp.toString(16).padStart(8, '0')\n    \t: '') +\n    c.id,\n\tcompare: (k1: string, k2: string) => k2.localeCompare(k1),\n})\n\nexport const waMessageID = (m: WAMessage) => m.key.id || ''\n\nexport const waLabelAssociationKey: Comparable<LabelAssociation, string> = {\n\tkey: (la: LabelAssociation) => la.type === LabelAssociationType.Chat\n\t\t? la.chatId + la.labelId\n\t\t: la.chatId + la.messageId + la.labelId,\n\tcompare: (k1: string, k2: string) => k2.localeCompare(k1),\n}\nexport type CronJobConfig = {\n  /**\n   * Create crontab expressions from https://crontab.guru/\n   */\n  cronTime: string | Date\n  /**\n   * Timezone of the cron job\n   * @default \"Asia/Calcutta\"\n   */\n  timeZone?: string\n  onComplete?: Function\n};\n\nexport type BaileyesMongoStoreConfig = {\n  chatKey?: Comparable<Chat, string>\n  labelAssociationKey?: Comparable<LabelAssociation, string>\n  logger?: Logger\n  /**\n   * You can set it to not save chats without messages.\n   *\n   * Use this filter to identify unsaved chat types in your current databse.\n   *\n   *     \t{ $and: [\n   * \t\t\t\t\t{ 'messages.message.messageStubType': { $exists: true } },\n   * \t\t\t\t\t{ 'messages.message.message': { $exists: true } }\n   * \t\t\t\t]\n   * \t\t}\n   *\n   */\n  filterChats?: boolean\n  /**\n   * Cron job to delete status message. Set to false to disable\n   *\n   * Deletes all status messages older than 24 hours on At 00:00 (default)\n   * @default config {cronTime: \"0 0 * * *\", timeZone: \"Asia/Calcutta\"}\n   */\n  autoDeleteStatusMessage: boolean | CronJobConfig\n  db: Db\n};\n\nconst makeMessagesDictionary = () => makeOrderedDictionary(waMessageID)\n\nconst predefinedLabels = Object.freeze<Record<string, Label>>({\n\t'0': {\n\t\tid: '0',\n\t\tname: 'New customer',\n\t\tpredefinedId: '0',\n\t\tcolor: 0,\n\t\tdeleted: false,\n\t},\n\t'1': {\n\t\tid: '1',\n\t\tname: 'New order',\n\t\tpredefinedId: '1',\n\t\tcolor: 1,\n\t\tdeleted: false,\n\t},\n\t'2': {\n\t\tid: '2',\n\t\tname: 'Pending payment',\n\t\tpredefinedId: '2',\n\t\tcolor: 2,\n\t\tdeleted: false,\n\t},\n\t'3': {\n\t\tid: '3',\n\t\tname: 'Paid',\n\t\tpredefinedId: '3',\n\t\tcolor: 3,\n\t\tdeleted: false,\n\t},\n\t'4': {\n\t\tid: '4',\n\t\tname: 'Order completed',\n\t\tpredefinedId: '4',\n\t\tcolor: 4,\n\t\tdeleted: false,\n\t},\n})\n\nexport default ({\n\tlogger: _logger,\n\tdb,\n\tfilterChats,\n\tautoDeleteStatusMessage,\n}: BaileyesMongoStoreConfig) => {\n\tconst isOlderThan24Hours = (timestamp: number): boolean => {\n\t\tconst currentTime = moment(new Date()).tz('Asia/Kolkata')\n\n\t\tconst hoursDifference = currentTime.diff(\n\t\t\tmoment(timestamp * 1000).tz('Asia/Kolkata'),\n\t\t\t'hours'\n\t\t)\n\t\treturn hoursDifference > 24\n\t}\n\n\tif(autoDeleteStatusMessage) {\n\t\tif(typeof autoDeleteStatusMessage === 'boolean') {\n\t\t\tautoDeleteStatusMessage = {\n\t\t\t\tcronTime: '0 0 * * *',\n\t\t\t\ttimeZone: 'Asia/Calcutta',\n\t\t\t}\n\t\t}\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tmessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$not: {\n\t\t\t\t\t\t\t\t$or: [] as {\n                  $eq: Array<string>\n                }[],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\tnew CronJob(\n\t\t\tautoDeleteStatusMessage.cronTime, // cronTime\n\t\t\tasync() => {\n\t\t\t\tconst statusMesasges = await chats.findOne(\n\t\t\t\t\t{ id: 'status@broadcast' },\n\t\t\t\t\t{ projection: { _id: 0 } }\n\t\t\t\t)\n\n\t\t\t\tif(statusMesasges) {\n\t\t\t\t\tfor(const m of statusMesasges?.messages!) {\n\t\t\t\t\t\tif(\n\t\t\t\t\t\t\tisOlderThan24Hours(\n\t\t\t\t\t\t\t\ttypeof m.message?.messageTimestamp === 'number'\n\t\t\t\t\t\t\t\t\t? m.message?.messageTimestamp\n\t\t\t\t\t\t\t\t\t: (m.message?.messageTimestamp?.low as number)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tupdate.$set.messages.$filter.cond.$not.$or.push({\n\t\t\t\t\t\t\t\t'$eq': ['$$this.message.key.id', m.message?.key.id as string],\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(update.$set.messages.$filter.cond.$not.$or.length > 0) {\n\t\t\t\t\t\tconst updateResult = await chats.updateOne(\n\t\t\t\t\t\t\t{ id: 'status@broadcast' },\n\t\t\t\t\t\t\t[update]\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\tlogger?.debug(updateResult, 'updated statusMessages')\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tlogger?.debug('cleared statusMessages')\n\t\t\t},\n\t\t\ttrue, // start\n\t\t\tautoDeleteStatusMessage?.timeZone\n\t\t)\n\t}\n\n\tconst logger =\n    _logger ||\n    DEFAULT_CONNECTION_CONFIG.logger.child({ stream: 'mongo-store' })\n\tconst chats = db.collection<Chat>('chats')\n\tconst messages: { [_: string]: ReturnType<typeof makeMessagesDictionary> } =\n    {}\n\tconst contacts = db.collection<Contact>('contacts')\n\tconst groupMetadata: { [_: string]: GroupMetadata } = {}\n\tconst presences: { [id: string]: { [participant: string]: PresenceData } } =\n    {}\n\tconst state: ConnectionState = { connection: 'close' }\n\tconst labels = new ObjectRepository<Label>(predefinedLabels)\n\tconst labelAssociations =\n    db.collection<LabelAssociation>('labelAssociations')\n\n\tconst assertMessageList = (jid: string) => {\n\t\tif(!messages[jid]) {\n\t\t\tmessages[jid] = makeMessagesDictionary()\n\t\t}\n\n\t\treturn messages[jid]\n\t}\n\n\tconst labelsUpsert = (newLabels: Label[]) => {\n\t\tfor(const label of newLabels) {\n\t\t\tlabels.upsertById(label.id, label)\n\t\t}\n\t}\n\n\tconst bind = (ev: BaileysEventEmitter) => {\n\t\tev.on('connection.update', (update) => {\n\t\t\tObject.assign(state, update)\n\t\t})\n\n\t\tev.on(\n\t\t\t'messaging-history.set',\n\t\t\tasync({\n\t\t\t\tchats: newChats,\n\t\t\t\tcontacts: newContacts,\n\t\t\t\tmessages: newMessages,\n\t\t\t}) => {\n\t\t\t\tif(filterChats) {\n\t\t\t\t\tnewChats = newChats\n\t\t\t\t\t\t.map((chat) => {\n\t\t\t\t\t\t\tif(\n\t\t\t\t\t\t\t\tchat.messages?.some(\n\t\t\t\t\t\t\t\t\t(m) => !m.message?.message && m.message?.messageStubType\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn undefined\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn chat\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(Boolean) as Chat[]\n\t\t\t\t}\n\n\t\t\t\tif(newChats.length) {\n\t\t\t\t\tconst chatsAdded = await chats.bulkWrite(\n\t\t\t\t\t\tnewChats.map((chat) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tinsertOne: {\n\t\t\t\t\t\t\t\t\tdocument: chat,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t{ chatsAdded: chatsAdded.insertedCount },\n\t\t\t\t\t\t'synced chats'\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug('no chats added')\n\t\t\t\t}\n\n\t\t\t\tconst oldContacts = await contacts.bulkWrite(\n\t\t\t\t\tnewContacts.map((contact) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tinsertOne: {\n\t\t\t\t\t\t\t\tdocument: contact,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\tlogger.debug(\n\t\t\t\t\t{ insertedContacts: oldContacts.insertedCount },\n\t\t\t\t\t'synced contacts'\n\t\t\t\t)\n\n\t\t\t\tif(!oldContacts.insertedCount) {\n\t\t\t\t\tthrow new Error('no contacts added')\n\t\t\t\t}\n\n\t\t\t\tfor(const msg of newMessages) {\n\t\t\t\t\tconst jid = msg.key.remoteJid!\n\t\t\t\t\tconst list = assertMessageList(jid)\n\t\t\t\t\tlist.upsert(msg, 'prepend')\n\n\t\t\t\t\tconst chat = await chats.findOne(\n\t\t\t\t\t\t{ id: jid },\n\t\t\t\t\t\t{ projection: { _id: 0 } }\n\t\t\t\t\t)\n\n\t\t\t\t\tif(chat) {\n\t\t\t\t\t\tchat.messages?.push({ message: msg }) ||\n              (chat.messages = [{ message: msg }])\n\t\t\t\t\t\tawait chats.findOneAndUpdate(\n\t\t\t\t\t\t\t{ id: jid },\n\t\t\t\t\t\t\t{ $set: chat },\n\t\t\t\t\t\t\t{ upsert: true }\n\t\t\t\t\t\t)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug({ jid }, 'chat not found')\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlogger.debug({ messages: newMessages.length }, 'synced messages')\n\t\t\t}\n\t\t)\n\n\t\tev.on('contacts.upsert', async(Contacts) => {\n\t\t\tfor(const contact of Contacts) {\n\t\t\t\tawait contacts.updateOne(\n\t\t\t\t\t{ id: contact.id },\n\t\t\t\t\t{ $set: contact },\n\t\t\t\t\t{ upsert: true }\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tlogger?.debug({ contactsUpserted: Contacts.length }, 'contacts upserted')\n\t\t})\n\n\t\tev.on('contacts.update', async(updates) => {\n\t\t\tfor(const update of updates) {\n\t\t\t\tconst contact: Partial<Contact> | null = await contacts.findOne(\n\t\t\t\t\t{ id: update.id },\n\t\t\t\t\t{ projection: { _id: 0 } }\n\t\t\t\t)\n\n\t\t\t\tif(contact) {\n\t\t\t\t\tObject.assign(contact, update)\n\t\t\t\t\tawait contacts.updateOne(\n\t\t\t\t\t\t{ id: update.id },\n\t\t\t\t\t\t{ $set: contact },\n\t\t\t\t\t\t{ upsert: true }\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug('got update for non-existent contact')\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('chats.upsert', async(newChats) => {\n\t\t\tawait chats.bulkWrite(\n\t\t\t\tnewChats.map((chat) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOne: {\n\t\t\t\t\t\t\tfilter: { id: chat.id },\n\t\t\t\t\t\t\tupdate: { $set: chat },\n\t\t\t\t\t\t\tupsert: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t)\n\t\t})\n\n\t\tev.on('chats.update', async(updates) => {\n\t\t\t// try {\n\t\t\tfor(const update of updates) {\n\t\t\t\tconst chat = await chats.findOneAndUpdate(\n\t\t\t\t\t{ id: update.id },\n\t\t\t\t\t{\n\t\t\t\t\t\t$set: update,\n\t\t\t\t\t},\n\t\t\t\t\t{ upsert: true }\n\t\t\t\t)\n\n\t\t\t\tif(!chat) {\n\t\t\t\t\tlogger.debug('got update for non-existant chat')\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('labels.edit', (label: Label) => {\n\t\t\tif(label.deleted) {\n\t\t\t\treturn labels.deleteById(label.id)\n\t\t\t}\n\n\t\t\t// WhatsApp can store only up to 20 labels\n\t\t\tif(labels.count() < 20) {\n\t\t\t\treturn labels.upsertById(label.id, label)\n\t\t\t}\n\n\t\t\tlogger.error('Labels count exceed')\n\t\t})\n\n\t\tev.on('labels.association', async({ type, association }) => {\n\t\t\tswitch (type) {\n\t\t\tcase 'add':\n\t\t\t\tawait labelAssociations.updateOne(\n\t\t\t\t\t{ id: association?.chatId || association?.labelId },\n\t\t\t\t\t{ $set: association },\n\t\t\t\t\t{ upsert: true }\n\t\t\t\t)\n\t\t\t\tbreak\n\t\t\tcase 'remove':\n\t\t\t\tawait labelAssociations.deleteOne({\n\t\t\t\t\tid: association?.chatId || association?.labelId,\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tlogger.error(`unknown operation type [${type}]`)\n\t\t\t}\n\t\t})\n\n\t\tev.on('presence.update', ({ id, presences: update }) => {\n\t\t\tpresences[id] = presences[id] || {}\n\t\t\tObject.assign(presences[id], update)\n\t\t})\n\n\t\tev.on('chats.delete', async(deletions) => {\n\t\t\tfor(const item of deletions) {\n\t\t\t\tawait chats.deleteOne({ id: item })\n\t\t\t}\n\t\t})\n\n\t\tev.on('messages.upsert', async({ messages: newMessages, type }) => {\n\t\t\t// try {\n\t\t\tswitch (type) {\n\t\t\tcase 'append':\n\t\t\tcase 'notify':\n\t\t\t\tfor(const msg of newMessages) {\n\t\t\t\t\tconst jid = jidNormalizedUser(msg.key.remoteJid!)\n\t\t\t\t\tconst list = assertMessageList(jid)\n\t\t\t\t\tlist.upsert(msg, 'append')\n\n\t\t\t\t\tconst chat = await chats.findOne({ id: jid })\n\t\t\t\t\tif(type === 'notify') {\n\t\t\t\t\t\tif(!chat) {\n\t\t\t\t\t\t\tev.emit('chats.upsert', [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: jid,\n\t\t\t\t\t\t\t\t\tconversationTimestamp: toNumber(msg.messageTimestamp),\n\t\t\t\t\t\t\t\t\tunreadCount: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchat.messages\n\t\t\t\t\t\t\t\t? chat.messages.push({ message: msg })\n\t\t\t\t\t\t\t\t: (chat.messages = [{ message: msg }])\n\t\t\t\t\t\t\tawait chats.updateOne(\n\t\t\t\t\t\t\t\t{ id: jid },\n\t\t\t\t\t\t\t\t{ $set: chat },\n\t\t\t\t\t\t\t\t{ upsert: true }\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t})\n\n\t\tev.on('messages.update', (updates) => {\n\t\t\tfor(const { update, key } of updates) {\n\t\t\t\tconst list = assertMessageList(jidNormalizedUser(key.remoteJid!))\n\t\t\t\tif(update?.status) {\n\t\t\t\t\tconst listStatus = list.get(key.id!)?.status\n\t\t\t\t\tif(listStatus && update?.status <= listStatus) {\n\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t{ update, storedStatus: listStatus },\n\t\t\t\t\t\t\t'status stored newer then update'\n\t\t\t\t\t\t)\n\t\t\t\t\t\tdelete update.status\n\t\t\t\t\t\tlogger.debug({ update }, 'new update object')\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst result = list.updateAssign(key.id!, update)\n\t\t\t\tif(!result) {\n\t\t\t\t\tlogger.debug('got update for non-existent message')\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('messages.delete', (item) => {\n\t\t\tif('all' in item) {\n\t\t\t\tconst list = messages[item.jid]\n\t\t\t\tlist?.clear()\n\t\t\t} else {\n\t\t\t\tconst jid = item.keys[0].remoteJid!\n\t\t\t\tconst list = messages[jid]\n\t\t\t\tif(list) {\n\t\t\t\t\tconst idSet = new Set(item.keys.map((k) => k.id))\n\t\t\t\t\tlist.filter((m) => !idSet.has(m.key.id))\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('groups.update', (updates) => {\n\t\t\tfor(const update of updates) {\n\t\t\t\tconst id = update.id!\n\t\t\t\tif(groupMetadata[id]) {\n\t\t\t\t\tObject.assign(groupMetadata[id], update)\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t{ update },\n\t\t\t\t\t\t'got update for non-existant group metadata'\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('group-participants.update', ({ id, participants, action }) => {\n\t\t\tconst metadata = groupMetadata[id]\n\t\t\tif(metadata) {\n\t\t\t\tswitch (action) {\n\t\t\t\tcase 'add':\n\t\t\t\t\tmetadata.participants.push(\n\t\t\t\t\t\t...participants.map((id) => ({\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tisAdmin: false,\n\t\t\t\t\t\t\tisSuperAdmin: false,\n\t\t\t\t\t\t}))\n\t\t\t\t\t)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'demote':\n\t\t\t\tcase 'promote':\n\t\t\t\t\tfor(const participant of metadata.participants) {\n\t\t\t\t\t\tif(participants.includes(participant.id)) {\n\t\t\t\t\t\t\tparticipant.isAdmin = action === 'promote'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\t\t\t\tcase 'remove':\n\t\t\t\t\tmetadata.participants = metadata.participants.filter(\n\t\t\t\t\t\t(p) => !participants.includes(p.id)\n\t\t\t\t\t)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('message-receipt.update', (updates) => {\n\t\t\tfor(const { key, receipt } of updates) {\n\t\t\t\tconst obj = messages[key.remoteJid!]\n\t\t\t\tconst msg = obj?.get(key.id!)\n\t\t\t\tif(msg) {\n\t\t\t\t\tupdateMessageWithReceipt(msg, receipt)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('messages.reaction', (reactions) => {\n\t\t\tfor(const { key, reaction } of reactions) {\n\t\t\t\tconst obj = messages[key.remoteJid!]\n\t\t\t\tconst msg = obj?.get(key.id!)\n\t\t\t\tif(msg) {\n\t\t\t\t\tupdateMessageWithReaction(msg, reaction)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tconst toJSON = () => ({\n\t\tchats,\n\t\tcontacts,\n\t\tmessages,\n\t\tlabels,\n\t\tlabelAssociations,\n\t})\n\n\t// TODO: replace upsert logic by corresponding mongodb collection methods\n\tconst fromJSON = async(json: {\n    chats: Chat[]\n    contacts: { [id: string]: Contact }\n    messages: { [id: string]: WAMessage[] }\n    labels: { [labelId: string]: Label }\n    labelAssociations: LabelAssociation[]\n  }) => {\n\t\tawait chats.updateMany({}, { $set: { ...json.chats } }, { upsert: true })\n\t\tawait labelAssociations.updateMany(\n\t\t\t{},\n\t\t\t{ $set: { ...(json.labelAssociations || []) } },\n\t\t\t{ upsert: true }\n\t\t)\n\n\t\tconst contactsCollection = db.collection<Contact>('contacts')\n\t\tawait contactsCollection.updateMany(\n\t\t\t{},\n\t\t\t{ $set: { ...Object.values(json.contacts) } },\n\t\t\t{ upsert: true }\n\t\t)\n\n\t\t// contactsUpsert(Object.values(json.contacts))\n\t\tlabelsUpsert(Object.values(json.labels || {}))\n\t\tfor(const jid in json.messages) {\n\t\t\tconst list = assertMessageList(jid)\n\t\t\tfor(const msg of json.messages[jid]) {\n\t\t\t\tlist.upsert(proto.WebMessageInfo.fromObject(msg), 'append')\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n   * Retrieves a chat object by its ID.\n   *\n   * @param {string} jid - The ID of the chat.\n   * @return {Promise<Chat|null>} A promise that resolves to the chat object if found, or null if not found.\n   */\n\tconst getChatById = async(jid: string): Promise<Chat | null> => {\n\t\treturn await chats.findOne({ id: jid }, { projection: { _id: 0 } })\n\t}\n\n\treturn {\n\t\tchats,\n\t\tcontacts,\n\t\tmessages,\n\t\tgroupMetadata,\n\t\tstate,\n\t\tpresences,\n\t\tlabels,\n\t\tlabelAssociations,\n\t\tbind,\n\t\t/** loads messages from the store, if not found -- uses the legacy connection */\n\t\tloadMessages: async(\n\t\t\tjid: string,\n\t\t\tcount: number,\n\t\t\tcursor: WAMessageCursor\n\t\t) => {\n\t\t\tconst list = assertMessageList(jid)\n\t\t\tconst mode = !cursor || 'before' in cursor ? 'before' : 'after'\n\t\t\tconst cursorKey = !!cursor\n\t\t\t\t? 'before' in cursor\n\t\t\t\t\t? cursor.before\n\t\t\t\t\t: cursor.after\n\t\t\t\t: undefined\n\t\t\tconst cursorValue = cursorKey ? list.get(cursorKey.id!) : undefined\n\n\t\t\tlet messages: WAMessage[]\n\t\t\tif(list && mode === 'before' && (!cursorKey || cursorValue)) {\n\t\t\t\tif(cursorValue) {\n\t\t\t\t\tconst msgIdx = list.array.findIndex(\n\t\t\t\t\t\t(m) => m.key.id === cursorKey?.id\n\t\t\t\t\t)\n\t\t\t\t\tmessages = list.array.slice(0, msgIdx)\n\t\t\t\t} else {\n\t\t\t\t\tmessages = list.array\n\t\t\t\t}\n\n\t\t\t\tconst diff = count - messages.length\n\t\t\t\tif(diff < 0) {\n\t\t\t\t\tmessages = messages.slice(-count) // get the last X messages\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmessages = []\n\t\t\t}\n\n\t\t\treturn messages\n\t\t},\n\t\t/**\n     * Get all available labels for profile\n     *\n     * Keep in mind that the list is formed from predefined tags and tags\n     * that were \"caught\" during their editing.\n     */\n\t\tgetLabels: () => {\n\t\t\treturn labels\n\t\t},\n\n\t\t/**\n     * Get labels for chat\n     *\n     * @returns Label IDs\n     **/\n\t\tgetChatLabels: (chatId: string) => {\n\t\t\treturn labelAssociations.findOne(\n\t\t\t\t(la: { chatId: string }) => la.chatId === chatId\n\t\t\t)\n\t\t},\n\n\t\t/**\n     * Get labels for message\n     *\n     * @returns Label IDs\n     **/\n\t\tgetMessageLabels: async(messageId: string) => {\n\t\t\tconst associations = labelAssociations.find(\n\t\t\t\t(la: MessageLabelAssociation) => la.messageId === messageId\n\t\t\t)\n\n\t\t\treturn associations?.map(({ labelId }) => labelId)\n\t\t},\n\t\tloadMessage: async(jid: string, id: string) => {\n\t\t\tif(messages[jid]) {\n\t\t\t\treturn messages[jid].get(id)\n\t\t\t}\n\n\t\t\tconst chat = await chats.findOne({ id: jid }, { projection: { _id: 0 } })\n\t\t\tfor(const m of chat?.messages ?? []) {\n\t\t\t\tif(m?.message?.key.id === id) {\n\t\t\t\t\treturn m.message\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmostRecentMessage: async(jid: string) => {\n\t\t\tconst message: WAMessage | undefined =\n        messages[jid]?.array.slice(-1)[0] ||\n        (\n        \tawait chats.findOne({ id: jid }, { projection: { _id: 0 } })\n        )?.messages?.slice(-1)[0].message ||\n        undefined\n\t\t\treturn message\n\t\t},\n\t\tfetchImageUrl: async(jid: string, sock: WASocket | undefined) => {\n\t\t\tconst contact = await contacts.findOne(\n\t\t\t\t{ id: jid },\n\t\t\t\t{ projection: { _id: 0 } }\n\t\t\t)\n\t\t\tif(!contact) {\n\t\t\t\treturn sock?.profilePictureUrl(jid)\n\t\t\t}\n\n\t\t\tif(typeof contact.imgUrl === 'undefined') {\n\t\t\t\tcontact.imgUrl = await sock?.profilePictureUrl(jid)\n\t\t\t\tawait contacts.updateOne(\n\t\t\t\t\t{ id: jid },\n\t\t\t\t\t{ $set: contact },\n\t\t\t\t\t{ upsert: true }\n\t\t\t\t)\n\t\t\t}\n\n\t\t\treturn contact.imgUrl\n\t\t},\n\t\tgetContactInfo: async(\n\t\t\tjid: string,\n\t\t\tsocket: WASocket\n\t\t): Promise<Partial<Contact> | null> => {\n\t\t\tconst contact: Partial<Contact> | null = await contacts.findOne(\n\t\t\t\t{ id: jid },\n\t\t\t\t{ projection: { _id: 0 } }\n\t\t\t)\n\n\t\t\tif(!contact) {\n\t\t\t\treturn {\n\t\t\t\t\tid: jid,\n\t\t\t\t\timgUrl: await socket?.profilePictureUrl(jid),\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// fetch image if required\n\t\t\tif(\n\t\t\t\ttypeof contact.imgUrl === 'undefined' ||\n        contact.imgUrl === 'changed'\n\t\t\t) {\n\t\t\t\tcontact.imgUrl = await socket?.profilePictureUrl(contact.id!, 'image')\n\t\t\t\tawait contacts.updateOne(\n\t\t\t\t\t{ id: jid },\n\t\t\t\t\t{ $set: { ...contact } },\n\t\t\t\t\t{ upsert: true }\n\t\t\t\t)\n\t\t\t}\n\n\t\t\treturn contact\n\t\t},\n\t\tfetchGroupMetadata: async(jid: string, sock: WASocket | undefined) => {\n\t\t\tif(!groupMetadata[jid]) {\n\t\t\t\tconst metadata = await sock?.groupMetadata(jid)\n\t\t\t\tif(metadata) {\n\t\t\t\t\tgroupMetadata[jid] = metadata\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn groupMetadata[jid]\n\t\t},\n\n\t\tfetchMessageReceipts: async({ remoteJid, id }: WAMessageKey) => {\n\t\t\tconst list = messages[remoteJid!]\n\t\t\tconst msg = list?.get(id!)\n\t\t\treturn msg?.userReceipt\n\t\t},\n\t\tgetChatById,\n\t\ttoJSON,\n\t\tfromJSON,\n\t}\n}\n"]}