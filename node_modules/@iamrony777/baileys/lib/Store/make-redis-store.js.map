{"version":3,"file":"make-redis-store.js","sourceRoot":"/","sources":["Store/make-redis-store.ts"],"names":[],"mappings":"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","sourcesContent":["// dumb hack\nimport type KeyedDB from '@adiwajshing/keyed-db'\nimport type { Comparable } from '@adiwajshing/keyed-db/lib/Types'\nimport type { Logger } from 'pino'\nimport { createClient } from 'redis'\nimport { proto } from '../../WAProto'\nimport { DEFAULT_CONNECTION_CONFIG } from '../Defaults'\nimport type makeMDSocket from '../Socket'\nimport type {\n\tBaileysEventEmitter,\n\tChat,\n\tConnectionState,\n\tContact,\n\tGroupMetadata,\n\tPresenceData,\n\tWAMessage,\n\tWAMessageCursor,\n\tWAMessageKey,\n} from '../Types'\nimport { Label } from '../Types/Label'\nimport {\n\tLabelAssociation,\n\tLabelAssociationType,\n\tMessageLabelAssociation,\n} from '../Types/LabelAssociation'\nimport {\n\tBufferJSON,\n\ttoNumber,\n\tupdateMessageWithReaction,\n\tupdateMessageWithReceipt,\n} from '../Utils'\nimport { jidNormalizedUser } from '../WABinary'\nimport makeOrderedDictionary from './make-ordered-dictionary'\nimport { ObjectRepository } from './object-repository'\n\ntype WASocket = ReturnType<typeof makeMDSocket>\n\nexport const waChatKey = (pin: boolean) => ({\n\tkey: (c: Chat) => (pin ? (c.pinned ? '1' : '0') : '') +\n\t\t(c.archived ? '0' : '1') +\n\t\t(c.conversationTimestamp\n\t\t\t? c.conversationTimestamp.toString(16).padStart(8, '0')\n\t\t\t: '') +\n\t\tc.id,\n\tcompare: (k1: string, k2: string) => k2.localeCompare(k1),\n})\n\nexport const waMessageID = (m: WAMessage) => m.key.id || ''\n\nexport const waLabelAssociationKey: Comparable<LabelAssociation, string> = {\n\tkey: (la: LabelAssociation) => la.type === LabelAssociationType.Chat\n\t\t? la.chatId + la.labelId\n\t\t: la.chatId + la.messageId + la.labelId,\n\tcompare: (k1: string, k2: string) => k2.localeCompare(k1),\n}\n\nexport type BaileysInMemoryStoreConfig = {\n\tchatKey?: Comparable<Chat, string>\n\tlabelAssociationKey?: Comparable<LabelAssociation, string>\n\tlogger?: Logger\n\tredis: ReturnType<typeof createClient>\n\tsuffix?: string\n}\n\nconst makeMessagesDictionary = () => makeOrderedDictionary(waMessageID)\n\nconst predefinedLabels = Object.freeze<Record<string, Label>>({\n\t'0': {\n\t\tid: '0',\n\t\tname: 'New customer',\n\t\tpredefinedId: '0',\n\t\tcolor: 0,\n\t\tdeleted: false,\n\t},\n\t'1': {\n\t\tid: '1',\n\t\tname: 'New order',\n\t\tpredefinedId: '1',\n\t\tcolor: 1,\n\t\tdeleted: false,\n\t},\n\t'2': {\n\t\tid: '2',\n\t\tname: 'Pending payment',\n\t\tpredefinedId: '2',\n\t\tcolor: 2,\n\t\tdeleted: false,\n\t},\n\t'3': {\n\t\tid: '3',\n\t\tname: 'Paid',\n\t\tpredefinedId: '3',\n\t\tcolor: 3,\n\t\tdeleted: false,\n\t},\n\t'4': {\n\t\tid: '4',\n\t\tname: 'Order completed',\n\t\tpredefinedId: '4',\n\t\tcolor: 4,\n\t\tdeleted: false,\n\t},\n})\n\nexport default ({\n\tlogger: _logger,\n\tchatKey,\n\tlabelAssociationKey,\n\tredis,\n\tsuffix,\n}: BaileysInMemoryStoreConfig) => {\n\tchatKey = chatKey || waChatKey(true)\n\tlabelAssociationKey = labelAssociationKey || waLabelAssociationKey\n\tsuffix = suffix || 'store'\n\tconst logger =\n\t\t_logger || DEFAULT_CONNECTION_CONFIG.logger.child({ stream: 'redis:store' })\n\tconst KeyedDB = require('@adiwajshing/keyed-db').default\n\n\tconst chats = new KeyedDB(chatKey, (c) => c.id) as KeyedDB<Chat, string>\n\tconst messages: { [_: string]: ReturnType<typeof makeMessagesDictionary> } =\n\t\t{}\n\tconst contacts: { [_: string]: Contact } = {}\n\tconst groupMetadata: { [_: string]: GroupMetadata } = {}\n\tconst presences: { [id: string]: { [participant: string]: PresenceData } } =\n\t\t{}\n\tconst state: ConnectionState = { connection: 'close' }\n\tconst labels = new ObjectRepository<Label>(predefinedLabels)\n\tconst labelAssociations = new KeyedDB(\n\t\tlabelAssociationKey,\n\t\tlabelAssociationKey.key\n\t) as KeyedDB<LabelAssociation, string>\n\n\tconst assertMessageList = (jid: string) => {\n\t\tif(!messages[jid]) {\n\t\t\tmessages[jid] = makeMessagesDictionary()\n\t\t}\n\n\t\treturn messages[jid]\n\t}\n\n\tconst contactsUpsert = (newContacts: Contact[]) => {\n\t\tconst oldContacts = new Set(Object.keys(contacts))\n\t\tfor(const contact of newContacts) {\n\t\t\toldContacts.delete(contact.id)\n\t\t\tcontacts[contact.id] = Object.assign(contacts[contact.id] || {}, contact)\n\t\t}\n\n\t\treturn oldContacts\n\t}\n\n\tconst labelsUpsert = (newLabels: Label[]) => {\n\t\tfor(const label of newLabels) {\n\t\t\tlabels.upsertById(label.id, label)\n\t\t}\n\t}\n\n\t/**\n\t * binds to a BaileysEventEmitter.\n\t * It listens to all events and constructs a state that you can query accurate data from.\n\t * Eg. can use the store to fetch chats, contacts, messages etc.\n\t * @param ev typically the event emitter from the socket connection\n\t */\n\tconst bind = (ev: BaileysEventEmitter) => {\n\t\tev.on('connection.update', (update) => {\n\t\t\tObject.assign(state, update)\n\t\t})\n\n\t\tev.on(\n\t\t\t'messaging-history.set',\n\t\t\t({\n\t\t\t\tchats: newChats,\n\t\t\t\tcontacts: newContacts,\n\t\t\t\tmessages: newMessages,\n\t\t\t\tisLatest,\n\t\t\t}) => {\n\t\t\t\tif(isLatest) {\n\t\t\t\t\tchats.clear()\n\n\t\t\t\t\tfor(const id in messages) {\n\t\t\t\t\t\tdelete messages[id]\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst chatsAdded = chats.insertIfAbsent(...newChats).length\n\t\t\t\tlogger.debug({ chatsAdded }, 'synced chats')\n\n\t\t\t\tconst oldContacts = contactsUpsert(newContacts)\n\t\t\t\tif(isLatest) {\n\t\t\t\t\tfor(const jid of oldContacts) {\n\t\t\t\t\t\tdelete contacts[jid]\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(\n\t\t\t\t\t{ deletedContacts: isLatest ? oldContacts.size : 0, newContacts },\n\t\t\t\t\t'synced contacts'\n\t\t\t\t)\n\n\t\t\t\tfor(const msg of newMessages) {\n\t\t\t\t\tconst jid = msg.key.remoteJid!\n\t\t\t\t\tconst list = assertMessageList(jid)\n\t\t\t\t\tlist.upsert(msg, 'prepend')\n\t\t\t\t}\n\n\t\t\t\tlogger.debug({ messages: newMessages.length }, 'synced messages')\n\t\t\t}\n\t\t)\n\n\t\tev.on('contacts.upsert', (contacts) => {\n\t\t\tcontactsUpsert(contacts)\n\t\t})\n\n\t\tev.on('contacts.update', (updates) => {\n\t\t\tfor(const update of updates) {\n\t\t\t\tif(contacts[update.id!]) {\n\t\t\t\t\tObject.assign(contacts[update.id!], update)\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug({ update }, 'got update for non-existant contact')\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tev.on('chats.upsert', (newChats) => {\n\t\t\tchats.upsert(...newChats)\n\t\t})\n\t\tev.on('chats.update', (updates) => {\n\t\t\tfor(let update of updates) {\n\t\t\t\tconst result = chats.update(update.id!, (chat) => {\n\t\t\t\t\tif(update.unreadCount! > 0) {\n\t\t\t\t\t\tupdate = { ...update }\n\t\t\t\t\t\tupdate.unreadCount = (chat.unreadCount || 0) + update.unreadCount!\n\t\t\t\t\t}\n\n\t\t\t\t\tObject.assign(chat, update)\n\t\t\t\t})\n\t\t\t\tif(!result) {\n\t\t\t\t\tlogger.debug({ update }, 'got update for non-existant chat')\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('labels.edit', (label: Label) => {\n\t\t\tif(label.deleted) {\n\t\t\t\treturn labels.deleteById(label.id)\n\t\t\t}\n\n\t\t\t// WhatsApp can store only up to 20 labels\n\t\t\tif(labels.count() < 20) {\n\t\t\t\treturn labels.upsertById(label.id, label)\n\t\t\t}\n\n\t\t\tlogger.error('Labels count exceed')\n\t\t})\n\n\t\tev.on('labels.association', ({ type, association }) => {\n\t\t\tswitch (type) {\n\t\t\tcase 'add':\n\t\t\t\tlabelAssociations.upsert(association)\n\t\t\t\tbreak\n\t\t\tcase 'remove':\n\t\t\t\tlabelAssociations.delete(association)\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tlogger.error(`unknown operation type [${type}]`)\n\t\t\t}\n\t\t})\n\n\t\tev.on('presence.update', ({ id, presences: update }) => {\n\t\t\tpresences[id] = presences[id] || {}\n\t\t\tObject.assign(presences[id], update)\n\t\t})\n\t\tev.on('chats.delete', (deletions) => {\n\t\t\tfor(const item of deletions) {\n\t\t\t\tif(chats.get(item)) {\n\t\t\t\t\tchats.deleteById(item)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tev.on('messages.upsert', ({ messages: newMessages, type }) => {\n\t\t\tswitch (type) {\n\t\t\tcase 'append':\n\t\t\tcase 'notify':\n\t\t\t\tfor(const msg of newMessages) {\n\t\t\t\t\tconst jid = jidNormalizedUser(msg.key.remoteJid!)\n\t\t\t\t\tconst list = assertMessageList(jid)\n\t\t\t\t\tlist.upsert(msg, 'append')\n\n\t\t\t\t\tif(type === 'notify') {\n\t\t\t\t\t\tif(!chats.get(jid)) {\n\t\t\t\t\t\t\tev.emit('chats.upsert', [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: jid,\n\t\t\t\t\t\t\t\t\tconversationTimestamp: toNumber(msg.messageTimestamp),\n\t\t\t\t\t\t\t\t\tunreadCount: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t})\n\t\tev.on('messages.update', (updates) => {\n\t\t\tfor(const { update, key } of updates) {\n\t\t\t\tconst list = assertMessageList(jidNormalizedUser(key.remoteJid!))\n\t\t\t\tif(update?.status) {\n\t\t\t\t\tconst listStatus = list.get(key.id!)?.status\n\t\t\t\t\tif(listStatus && update?.status <= listStatus) {\n\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t{ update, storedStatus: listStatus },\n\t\t\t\t\t\t\t'status stored newer then update'\n\t\t\t\t\t\t)\n\t\t\t\t\t\tdelete update.status\n\t\t\t\t\t\tlogger.debug({ update }, 'new update object')\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst result = list.updateAssign(key.id!, update)\n\t\t\t\tif(!result) {\n\t\t\t\t\tlogger.debug({ update }, 'got update for non-existent message')\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tev.on('messages.delete', (item) => {\n\t\t\tif('all' in item) {\n\t\t\t\tconst list = messages[item.jid]\n\t\t\t\tlist?.clear()\n\t\t\t} else {\n\t\t\t\tconst jid = item.keys[0].remoteJid!\n\t\t\t\tconst list = messages[jid]\n\t\t\t\tif(list) {\n\t\t\t\t\tconst idSet = new Set(item.keys.map((k) => k.id))\n\t\t\t\t\tlist.filter((m) => !idSet.has(m.key.id))\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('groups.update', (updates) => {\n\t\t\tfor(const update of updates) {\n\t\t\t\tconst id = update.id!\n\t\t\t\tif(groupMetadata[id]) {\n\t\t\t\t\tObject.assign(groupMetadata[id], update)\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug({ update }, 'got update for non-existant group metadata')\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('group-participants.update', ({ id, participants, action }) => {\n\t\t\tconst metadata = groupMetadata[id]\n\t\t\tif(metadata) {\n\t\t\t\tswitch (action) {\n\t\t\t\tcase 'add':\n\t\t\t\t\tmetadata.participants.push(\n\t\t\t\t\t\t...participants.map((id) => ({\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tisAdmin: false,\n\t\t\t\t\t\t\tisSuperAdmin: false,\n\t\t\t\t\t\t}))\n\t\t\t\t\t)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'demote':\n\t\t\t\tcase 'promote':\n\t\t\t\t\tfor(const participant of metadata.participants) {\n\t\t\t\t\t\tif(participants.includes(participant.id)) {\n\t\t\t\t\t\t\tparticipant.isAdmin = action === 'promote'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\t\t\t\tcase 'remove':\n\t\t\t\t\tmetadata.participants = metadata.participants.filter(\n\t\t\t\t\t\t(p) => !participants.includes(p.id)\n\t\t\t\t\t)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('message-receipt.update', (updates) => {\n\t\t\tfor(const { key, receipt } of updates) {\n\t\t\t\tconst obj = messages[key.remoteJid!]\n\t\t\t\tconst msg = obj?.get(key.id!)\n\t\t\t\tif(msg) {\n\t\t\t\t\tupdateMessageWithReceipt(msg, receipt)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tev.on('messages.reaction', (reactions) => {\n\t\t\tfor(const { key, reaction } of reactions) {\n\t\t\t\tconst obj = messages[key.remoteJid!]\n\t\t\t\tconst msg = obj?.get(key.id!)\n\t\t\t\tif(msg) {\n\t\t\t\t\tupdateMessageWithReaction(msg, reaction)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tconst toJSON = () => ({\n\t\tchats,\n\t\tcontacts,\n\t\tmessages,\n\t\tlabels,\n\t\tlabelAssociations,\n\t})\n\n\tconst fromJSON = (json: {\n\t\tchats: Chat[]\n\t\tcontacts: { [id: string]: Contact }\n\t\tmessages: { [id: string]: WAMessage[] }\n\t\tlabels: { [labelId: string]: Label }\n\t\tlabelAssociations: LabelAssociation[]\n\t}) => {\n\t\tchats.upsert(...json.chats)\n\t\tlabelAssociations.upsert(...(json.labelAssociations || []))\n\t\tcontactsUpsert(Object.values(json.contacts))\n\t\tlabelsUpsert(Object.values(json.labels || {}))\n\t\tfor(const jid in json.messages) {\n\t\t\tconst list = assertMessageList(jid)\n\t\t\tfor(const msg of json.messages[jid]) {\n\t\t\t\tlist.upsert(proto.WebMessageInfo.fromObject(msg), 'append')\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tchats,\n\t\tcontacts,\n\t\tmessages,\n\t\tgroupMetadata,\n\t\tstate,\n\t\tpresences,\n\t\tlabels,\n\t\tlabelAssociations,\n\t\tbind,\n\t\t/** loads messages from the store, if not found -- uses the legacy connection */\n\t\tloadMessages: async(\n\t\t\tjid: string,\n\t\t\tcount: number,\n\t\t\tcursor: WAMessageCursor\n\t\t) => {\n\t\t\tconst list = assertMessageList(jid)\n\t\t\tconst mode = !cursor || 'before' in cursor ? 'before' : 'after'\n\t\t\tconst cursorKey = !!cursor\n\t\t\t\t? 'before' in cursor\n\t\t\t\t\t? cursor.before\n\t\t\t\t\t: cursor.after\n\t\t\t\t: undefined\n\t\t\tconst cursorValue = cursorKey ? list.get(cursorKey.id!) : undefined\n\n\t\t\tlet messages: WAMessage[]\n\t\t\tif(list && mode === 'before' && (!cursorKey || cursorValue)) {\n\t\t\t\tif(cursorValue) {\n\t\t\t\t\tconst msgIdx = list.array.findIndex((m) => m.key.id === cursorKey?.id)\n\t\t\t\t\tmessages = list.array.slice(0, msgIdx)\n\t\t\t\t} else {\n\t\t\t\t\tmessages = list.array\n\t\t\t\t}\n\n\t\t\t\tconst diff = count - messages.length\n\t\t\t\tif(diff < 0) {\n\t\t\t\t\tmessages = messages.slice(-count) // get the last X messages\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmessages = []\n\t\t\t}\n\n\t\t\treturn messages\n\t\t},\n\t\t/**\n\t\t * Get all available labels for profile\n\t\t *\n\t\t * Keep in mind that the list is formed from predefined tags and tags\n\t\t * that were \"caught\" during their editing.\n\t\t */\n\t\tgetLabels: () => {\n\t\t\treturn labels\n\t\t},\n\n\t\t/**\n\t\t * Get labels for chat\n\t\t *\n\t\t * @returns Label IDs\n\t\t **/\n\t\tgetChatLabels: (chatId: string) => {\n\t\t\treturn labelAssociations.filter((la) => la.chatId === chatId).all()\n\t\t},\n\t\tgetContactInfo: async(chatId: string) => {\n\t\t\tconst contacts = await redis.hGet(`contacts:${suffix}`, chatId)\n\t\t\treturn contacts\n\t\t\t\t? (JSON.parse(contacts, BufferJSON.reviver) as Contact)\n\t\t\t\t: null\n\t\t},\n\t\t/**\n\t\t * Get labels for message\n\t\t *\n\t\t * @returns Label IDs\n\t\t **/\n\t\tgetMessageLabels: (messageId: string) => {\n\t\t\tconst associations = labelAssociations\n\t\t\t\t.filter((la: MessageLabelAssociation) => la.messageId === messageId)\n\t\t\t\t.all()\n\n\t\t\treturn associations.map(({ labelId }) => labelId)\n\t\t},\n\t\tloadMessage: async(jid: string, id: string) => messages[jid]?.get(id),\n\t\tmostRecentMessage: async(jid: string) => {\n\t\t\tconst message: WAMessage | undefined = messages[jid]?.array.slice(-1)[0]\n\t\t\treturn message\n\t\t},\n\t\tfetchImageUrl: async(jid: string, sock: WASocket | undefined) => {\n\t\t\tconst contact = contacts[jid]\n\t\t\tif(!contact) {\n\t\t\t\treturn sock?.profilePictureUrl(jid)\n\t\t\t}\n\n\t\t\tif(typeof contact.imgUrl === 'undefined') {\n\t\t\t\tcontact.imgUrl = await sock?.profilePictureUrl(jid)\n\t\t\t}\n\n\t\t\treturn contact.imgUrl\n\t\t},\n\t\tfetchGroupMetadata: async(jid: string, sock: WASocket | undefined) => {\n\t\t\tif(!groupMetadata[jid]) {\n\t\t\t\tconst metadata = await sock?.groupMetadata(jid)\n\t\t\t\tif(metadata) {\n\t\t\t\t\tgroupMetadata[jid] = metadata\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn groupMetadata[jid]\n\t\t},\n\t\t// fetchBroadcastListInfo: async(jid: string, sock: WASocket | undefined) => {\n\t\t// \tif(!groupMetadata[jid]) {\n\t\t// \t\tconst metadata = await sock?.getBroadcastListInfo(jid)\n\t\t// \t\tif(metadata) {\n\t\t// \t\t\tgroupMetadata[jid] = metadata\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// \treturn groupMetadata[jid]\n\t\t// },\n\t\tfetchMessageReceipts: async({ remoteJid, id }: WAMessageKey) => {\n\t\t\tconst list = messages[remoteJid!]\n\t\t\tconst msg = list?.get(id!)\n\t\t\treturn msg?.userReceipt\n\t\t},\n\t\ttoJSON,\n\t\tfromJSON,\n\t\tuploadToDb: async() => {\n\t\t\tif(!redis.isReady) {\n\t\t\t\tawait redis.connect()\n\t\t\t}\n\n\t\t\tconst jsonData = toJSON()\n\n\t\t\tfor(const key of Object.keys(jsonData) as Array<keyof typeof jsonData>) {\n\t\t\t\tconst data = jsonData[key]\n\t\t\t\tconst suffixKey = `${key}:${suffix}`\n\n\t\t\t\tswitch (key) {\n\t\t\t\tcase 'chats':\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tfor(const chat of data.array as unknown as Chat[]) {\n\t\t\t\t\t\tawait redis.hSet(\n\t\t\t\t\t\t\tsuffixKey,\n\t\t\t\t\t\t\tchat.id,\n\t\t\t\t\t\t\tJSON.stringify(chat, BufferJSON.replacer)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'contacts':\n\t\t\t\t\tfor(const contact of Object.values(data) as unknown as Contact[]) {\n\t\t\t\t\t\tawait redis.hSet(\n\t\t\t\t\t\t\tsuffixKey,\n\t\t\t\t\t\t\tcontact.id,\n\t\t\t\t\t\t\tJSON.stringify(contact, BufferJSON.replacer)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'messages':\n\t\t\t\t\tfor(const msgKey of Object.keys(data)) {\n\t\t\t\t\t\tawait redis.hSet(\n\t\t\t\t\t\t\tsuffixKey,\n\t\t\t\t\t\t\tmsgKey,\n\t\t\t\t\t\t\tJSON.stringify(data[msgKey], BufferJSON.replacer)\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'labelAssociations':\n\t\t\t\tcase 'labels':\n\t\t\t\t\tawait redis.set(\n\t\t\t\t\t\tsuffixKey,\n\t\t\t\t\t\tJSON.stringify(data, BufferJSON.replacer)\n\t\t\t\t\t)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\treadFromDb: async() => {\n\t\t\tif(!redis.isReady) {\n\t\t\t\tawait redis.connect()\n\t\t\t}\n\n\t\t\tconst jsonObject = {\n\t\t\t\tchats: [] as Chat[],\n\t\t\t\tcontacts: {} as { [id: string]: Contact },\n\t\t\t\tmessages: {} as { [id: string]: WAMessage[] },\n\t\t\t\tlabels: {} as { [labelId: string]: Label },\n\t\t\t\tlabelAssociations: [] as LabelAssociation[]\n\t\t\t}\n\n\t\t\tconst readObjectFromDb = async(key: string) => {\n\t\t\t\tconst tempObj = await redis.hGetAll(`${key}:${suffix}`)\n\t\t\t\tconst parsedObj = Object.keys(tempObj).map((id) => JSON.parse(tempObj[id], BufferJSON.reviver)\n\t\t\t\t)\n\t\t\t\tjsonObject[key] = parsedObj\n\t\t\t}\n\n\t\t\tconst readArrayFromDb = async(key: string) => {\n\t\t\t\tconst parsedArray = JSON.parse(\n\t\t\t\t\t(await redis.get(`${key}:${suffix}`)) || '[]',\n\t\t\t\t\tBufferJSON.reviver\n\t\t\t\t)\n\t\t\t\tjsonObject[key] = parsedArray\n\t\t\t}\n\n\t\t\tawait Promise.all([\n\t\t\t\treadObjectFromDb('chats'),\n\t\t\t\treadObjectFromDb('contacts'),\n\t\t\t\treadObjectFromDb('messages'),\n\t\t\t\treadArrayFromDb('labels'),\n\t\t\t\treadArrayFromDb('labelAssociations'),\n\t\t\t])\n\n\t\t\tfromJSON(jsonObject)\n\t\t},\n\t}\n}\n"]}