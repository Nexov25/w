{"version":3,"file":"use-multi-file-auth-state.js","sourceRoot":"/","sources":["Utils/use-multi-file-auth-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { mkdir, readFile, stat, unlink, writeFile } from 'fs/promises'\nimport { join } from 'path'\nimport { proto } from '../../WAProto'\nimport { AuthenticationCreds, AuthenticationState, SignalDataTypeMap } from '../Types'\nimport { initAuthCreds } from './auth-utils'\nimport { BufferJSON } from './generics'\n\n/**\n * stores the full authentication state in a single folder.\n * Far more efficient than singlefileauthstate\n *\n * Again, I wouldn't endorse this for any production level use other than perhaps a bot.\n * Would recommend writing an auth state for use with a proper SQL or No-SQL DB\n * */\nexport const useMultiFileAuthState = async(folder: string): Promise<{ state: AuthenticationState, saveCreds: () => Promise<void> }> => {\n\n\tconst writeData = (data: any, file: string) => {\n\t\treturn writeFile(join(folder, fixFileName(file)!), JSON.stringify(data, BufferJSON.replacer))\n\t}\n\n\tconst readData = async(file: string) => {\n\t\ttry {\n\t\t\tconst data = await readFile(join(folder, fixFileName(file)!), { encoding: 'utf-8' })\n\t\t\treturn JSON.parse(data, BufferJSON.reviver)\n\t\t} catch(error) {\n\t\t\treturn null\n\t\t}\n\t}\n\n\tconst removeData = async(file: string) => {\n\t\ttry {\n\t\t\tawait unlink(join(folder, fixFileName(file)!))\n\t\t} catch{\n\n\t\t}\n\t}\n\n\tconst folderInfo = await stat(folder).catch(() => { })\n\tif(folderInfo) {\n\t\tif(!folderInfo.isDirectory()) {\n\t\t\tthrow new Error(`found something that is not a directory at ${folder}, either delete it or specify a different location`)\n\t\t}\n\t} else {\n\t\tawait mkdir(folder, { recursive: true })\n\t}\n\n\tconst fixFileName = (file?: string) => file?.replace(/\\//g, '__')?.replace(/:/g, '-')\n\n\tconst creds: AuthenticationCreds = await readData('creds.json') || initAuthCreds()\n\n\treturn {\n\t\tstate: {\n\t\t\tcreds,\n\t\t\tkeys: {\n\t\t\t\tget: async(type, ids) => {\n\t\t\t\t\tconst data: { [_: string]: SignalDataTypeMap[typeof type] } = {}\n\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\tids.map(\n\t\t\t\t\t\t\tasync id => {\n\t\t\t\t\t\t\t\tlet value = await readData(`${type}-${id}.json`)\n\t\t\t\t\t\t\t\tif(type === 'app-state-sync-key' && value) {\n\t\t\t\t\t\t\t\t\tvalue = proto.Message.AppStateSyncKeyData.fromObject(value)\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tdata[id] = value\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\n\t\t\t\t\treturn data\n\t\t\t\t},\n\t\t\t\tset: async(data) => {\n\t\t\t\t\tconst tasks: Promise<void>[] = []\n\t\t\t\t\tfor(const category in data) {\n\t\t\t\t\t\tfor(const id in data[category]) {\n\t\t\t\t\t\t\tconst value = data[category][id]\n\t\t\t\t\t\t\tconst file = `${category}-${id}.json`\n\t\t\t\t\t\t\ttasks.push(value ? writeData(value, file) : removeData(file))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tawait Promise.all(tasks)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsaveCreds: () => {\n\t\t\treturn writeData(creds, 'creds.json')\n\t\t}\n\t}\n}"]}