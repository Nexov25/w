{"version":3,"file":"crypto.js","sourceRoot":"/","sources":["Utils/crypto.ts"],"names":[],"mappings":"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","sourcesContent":["import { createCipheriv, createDecipheriv, createHash, createHmac, pbkdf2Sync, randomBytes } from 'crypto'\nimport HKDF from 'futoin-hkdf'\nimport * as libsignal from 'libsignal'\nimport { KEY_BUNDLE_TYPE } from '../Defaults'\nimport { KeyPair } from '../Types'\n\n/** prefix version byte to the pub keys, required for some curve crypto functions */\nexport const generateSignalPubKey = (pubKey: Uint8Array | Buffer) => (\n\tpubKey.length === 33\n\t\t? pubKey\n\t\t: Buffer.concat([ KEY_BUNDLE_TYPE, pubKey ])\n)\n\nexport const Curve = {\n\tgenerateKeyPair: (): KeyPair => {\n\t\tconst { pubKey, privKey } = libsignal.curve.generateKeyPair()\n\t\treturn {\n\t\t\tprivate: Buffer.from(privKey),\n\t\t\t// remove version byte\n\t\t\tpublic: Buffer.from((pubKey as Uint8Array).slice(1))\n\t\t}\n\t},\n\tsharedKey: (privateKey: Uint8Array, publicKey: Uint8Array) => {\n\t\tconst shared = libsignal.curve.calculateAgreement(generateSignalPubKey(publicKey), privateKey)\n\t\treturn Buffer.from(shared)\n\t},\n\tsign: (privateKey: Uint8Array, buf: Uint8Array) => (\n\t\tlibsignal.curve.calculateSignature(privateKey, buf)\n\t),\n\tverify: (pubKey: Uint8Array, message: Uint8Array, signature: Uint8Array) => {\n\t\ttry {\n\t\t\tlibsignal.curve.verifySignature(generateSignalPubKey(pubKey), message, signature)\n\t\t\treturn true\n\t\t} catch(error) {\n\t\t\treturn false\n\t\t}\n\t}\n}\n\nexport const signedKeyPair = (identityKeyPair: KeyPair, keyId: number) => {\n\tconst preKey = Curve.generateKeyPair()\n\tconst pubKey = generateSignalPubKey(preKey.public)\n\n\tconst signature = Curve.sign(identityKeyPair.private, pubKey)\n\n\treturn { keyPair: preKey, signature, keyId }\n}\n\nconst GCM_TAG_LENGTH = 128 >> 3\n\n/**\n * encrypt AES 256 GCM;\n * where the tag tag is suffixed to the ciphertext\n * */\nexport function aesEncryptGCM(plaintext: Uint8Array, key: Uint8Array, iv: Uint8Array, additionalData: Uint8Array) {\n\tconst cipher = createCipheriv('aes-256-gcm', key, iv)\n\tcipher.setAAD(additionalData)\n\treturn Buffer.concat([cipher.update(plaintext), cipher.final(), cipher.getAuthTag()])\n}\n\n/**\n * decrypt AES 256 GCM;\n * where the auth tag is suffixed to the ciphertext\n * */\nexport function aesDecryptGCM(ciphertext: Uint8Array, key: Uint8Array, iv: Uint8Array, additionalData: Uint8Array) {\n\tconst decipher = createDecipheriv('aes-256-gcm', key, iv)\n\t// decrypt additional adata\n\tconst enc = ciphertext.slice(0, ciphertext.length - GCM_TAG_LENGTH)\n\tconst tag = ciphertext.slice(ciphertext.length - GCM_TAG_LENGTH)\n\t// set additional data\n\tdecipher.setAAD(additionalData)\n\tdecipher.setAuthTag(tag)\n\n\treturn Buffer.concat([ decipher.update(enc), decipher.final() ])\n}\n\nexport function aesEncryptCTR(plaintext: Uint8Array, key: Uint8Array, iv: Uint8Array) {\n\tconst cipher = createCipheriv('aes-256-ctr', key, iv)\n\treturn Buffer.concat([cipher.update(plaintext), cipher.final()])\n}\n\nexport function aesDecryptCTR(ciphertext: Uint8Array, key: Uint8Array, iv: Uint8Array) {\n\tconst decipher = createDecipheriv('aes-256-ctr', key, iv)\n\treturn Buffer.concat([decipher.update(ciphertext), decipher.final()])\n}\n\n/** decrypt AES 256 CBC; where the IV is prefixed to the buffer */\nexport function aesDecrypt(buffer: Buffer, key: Buffer) {\n\treturn aesDecryptWithIV(buffer.slice(16, buffer.length), key, buffer.slice(0, 16))\n}\n\n/** decrypt AES 256 CBC */\nexport function aesDecryptWithIV(buffer: Buffer, key: Buffer, IV: Buffer) {\n\tconst aes = createDecipheriv('aes-256-cbc', key, IV)\n\treturn Buffer.concat([aes.update(buffer), aes.final()])\n}\n\n// encrypt AES 256 CBC; where a random IV is prefixed to the buffer\nexport function aesEncrypt(buffer: Buffer | Uint8Array, key: Buffer) {\n\tconst IV = randomBytes(16)\n\tconst aes = createCipheriv('aes-256-cbc', key, IV)\n\treturn Buffer.concat([IV, aes.update(buffer), aes.final()]) // prefix IV to the buffer\n}\n\n// encrypt AES 256 CBC with a given IV\nexport function aesEncrypWithIV(buffer: Buffer, key: Buffer, IV: Buffer) {\n\tconst aes = createCipheriv('aes-256-cbc', key, IV)\n\treturn Buffer.concat([aes.update(buffer), aes.final()]) // prefix IV to the buffer\n}\n\n// sign HMAC using SHA 256\nexport function hmacSign(buffer: Buffer | Uint8Array, key: Buffer | Uint8Array, variant: 'sha256' | 'sha512' = 'sha256') {\n\treturn createHmac(variant, key).update(buffer).digest()\n}\n\nexport function sha256(buffer: Buffer) {\n\treturn createHash('sha256').update(buffer).digest()\n}\n\nexport function md5(buffer: Buffer) {\n\treturn createHash('md5').update(buffer).digest()\n}\n\n// HKDF key expansion\nexport function hkdf(buffer: Uint8Array | Buffer, expandedLength: number, info: { salt?: Buffer, info?: string }) {\n\treturn HKDF(!Buffer.isBuffer(buffer) ? Buffer.from(buffer) : buffer, expandedLength, info)\n}\n\nexport function derivePairingCodeKey(pairingCode: string, salt: Buffer) {\n\treturn pbkdf2Sync(pairingCode, salt, 2 << 16, 32, 'sha256')\n}"]}