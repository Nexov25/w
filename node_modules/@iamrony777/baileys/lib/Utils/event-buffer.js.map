{"version":3,"file":"event-buffer.js","sourceRoot":"/","sources":["Utils/event-buffer.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from 'events'\nimport { Logger } from 'pino'\nimport { proto } from '../../WAProto'\nimport { BaileysEvent, BaileysEventEmitter, BaileysEventMap, BufferedEventData, Chat, ChatUpdate, Contact, WAMessage, WAMessageStatus } from '../Types'\nimport { trimUndefined } from './generics'\nimport { updateMessageWithReaction, updateMessageWithReceipt } from './messages'\nimport { isRealMessage, shouldIncrementChatUnread } from './process-message'\n\nconst BUFFERABLE_EVENT = [\n\t'messaging-history.set',\n\t'chats.upsert',\n\t'chats.update',\n\t'chats.delete',\n\t'contacts.upsert',\n\t'contacts.update',\n\t'messages.upsert',\n\t'messages.update',\n\t'messages.delete',\n\t'messages.reaction',\n\t'message-receipt.update',\n\t'groups.update',\n] as const\n\ntype BufferableEvent = typeof BUFFERABLE_EVENT[number]\n\n/**\n * A map that contains a list of all events that have been triggered\n *\n * Note, this can contain different type of events\n * this can make processing events extremely efficient -- since everything\n * can be done in a single transaction\n */\ntype BaileysEventData = Partial<BaileysEventMap>\n\nconst BUFFERABLE_EVENT_SET = new Set<BaileysEvent>(BUFFERABLE_EVENT)\n\ntype BaileysBufferableEventEmitter = BaileysEventEmitter & {\n\t/** Use to process events in a batch */\n\tprocess(handler: (events: BaileysEventData) => void | Promise<void>): (() => void)\n\t/**\n\t * starts buffering events, call flush() to release them\n\t * */\n\tbuffer(): void\n\t/** buffers all events till the promise completes */\n\tcreateBufferedFunction<A extends any[], T>(work: (...args: A) => Promise<T>): ((...args: A) => Promise<T>)\n\t/**\n\t * flushes all buffered events\n\t * @param force if true, will flush all data regardless of any pending buffers\n\t * @returns returns true if the flush actually happened, otherwise false\n\t */\n\tflush(force?: boolean): boolean\n\t/** is there an ongoing buffer */\n\tisBuffering(): boolean\n}\n\n/**\n * The event buffer logically consolidates different events into a single event\n * making the data processing more efficient.\n * @param ev the baileys event emitter\n */\nexport const makeEventBuffer = (logger: Logger): BaileysBufferableEventEmitter => {\n\tconst ev = new EventEmitter()\n\tconst historyCache = new Set<string>()\n\n\tlet data = makeBufferData()\n\tlet buffersInProgress = 0\n\n\t// take the generic event and fire it as a baileys event\n\tev.on('event', (map: BaileysEventData) => {\n\t\tfor(const event in map) {\n\t\t\tev.emit(event, map[event])\n\t\t}\n\t})\n\n\tfunction buffer() {\n\t\tbuffersInProgress += 1\n\t}\n\n\tfunction flush(force = false) {\n\t\t// no buffer going on\n\t\tif(!buffersInProgress) {\n\t\t\treturn false\n\t\t}\n\n\t\tif(!force) {\n\t\t\t// reduce the number of buffers in progress\n\t\t\tbuffersInProgress -= 1\n\t\t\t// if there are still some buffers going on\n\t\t\t// then we don't flush now\n\t\t\tif(buffersInProgress) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\tconst newData = makeBufferData()\n\t\tconst chatUpdates = Object.values(data.chatUpdates)\n\t\t// gather the remaining conditional events so we re-queue them\n\t\tlet conditionalChatUpdatesLeft = 0\n\t\tfor(const update of chatUpdates) {\n\t\t\tif(update.conditional) {\n\t\t\t\tconditionalChatUpdatesLeft += 1\n\t\t\t\tnewData.chatUpdates[update.id!] = update\n\t\t\t\tdelete data.chatUpdates[update.id!]\n\t\t\t}\n\t\t}\n\n\t\tconst consolidatedData = consolidateEvents(data)\n\t\tif(Object.keys(consolidatedData).length) {\n\t\t\tev.emit('event', consolidatedData)\n\t\t}\n\n\t\tdata = newData\n\n\t\tlogger.trace(\n\t\t\t{ conditionalChatUpdatesLeft },\n\t\t\t'released buffered events'\n\t\t)\n\n\t\treturn true\n\t}\n\n\treturn {\n\t\tprocess(handler) {\n\t\t\tconst listener = (map: BaileysEventData) => {\n\t\t\t\thandler(map)\n\t\t\t}\n\n\t\t\tev.on('event', listener)\n\t\t\treturn () => {\n\t\t\t\tev.off('event', listener)\n\t\t\t}\n\t\t},\n\t\temit<T extends BaileysEvent>(event: BaileysEvent, evData: BaileysEventMap[T]) {\n\t\t\tif(buffersInProgress && BUFFERABLE_EVENT_SET.has(event)) {\n\t\t\t\tappend(data, historyCache, event as any, evData, logger)\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\treturn ev.emit('event', { [event]: evData })\n\t\t},\n\t\tisBuffering() {\n\t\t\treturn buffersInProgress > 0\n\t\t},\n\t\tbuffer,\n\t\tflush,\n\t\tcreateBufferedFunction(work) {\n\t\t\treturn async(...args) => {\n\t\t\t\tbuffer()\n\t\t\t\ttry {\n\t\t\t\t\tconst result = await work(...args)\n\t\t\t\t\treturn result\n\t\t\t\t} finally {\n\t\t\t\t\tflush()\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ton: (...args) => ev.on(...args),\n\t\toff: (...args) => ev.off(...args),\n\t\tremoveAllListeners: (...args) => ev.removeAllListeners(...args),\n\t}\n}\n\nconst makeBufferData = (): BufferedEventData => {\n\treturn {\n\t\thistorySets: {\n\t\t\tchats: { },\n\t\t\tmessages: { },\n\t\t\tcontacts: { },\n\t\t\tisLatest: false,\n\t\t\tempty: true\n\t\t},\n\t\tchatUpserts: { },\n\t\tchatUpdates: { },\n\t\tchatDeletes: new Set(),\n\t\tcontactUpserts: { },\n\t\tcontactUpdates: { },\n\t\tmessageUpserts: { },\n\t\tmessageUpdates: { },\n\t\tmessageReactions: { },\n\t\tmessageDeletes: { },\n\t\tmessageReceipts: { },\n\t\tgroupUpdates: { }\n\t}\n}\n\nfunction append<E extends BufferableEvent>(\n\tdata: BufferedEventData,\n\thistoryCache: Set<string>,\n\tevent: E,\n\teventData: any,\n\tlogger: Logger\n) {\n\tswitch (event) {\n\tcase 'messaging-history.set':\n\t\tfor(const chat of eventData.chats as Chat[]) {\n\t\t\tconst existingChat = data.historySets.chats[chat.id]\n\t\t\tif(existingChat) {\n\t\t\t\texistingChat.endOfHistoryTransferType = chat.endOfHistoryTransferType\n\t\t\t}\n\n\t\t\tif(!existingChat && !historyCache.has(chat.id)) {\n\t\t\t\tdata.historySets.chats[chat.id] = chat\n\t\t\t\thistoryCache.add(chat.id)\n\n\t\t\t\tabsorbingChatUpdate(chat)\n\t\t\t}\n\t\t}\n\n\t\tfor(const contact of eventData.contacts as Contact[]) {\n\t\t\tconst existingContact = data.historySets.contacts[contact.id]\n\t\t\tif(existingContact) {\n\t\t\t\tObject.assign(existingContact, trimUndefined(contact))\n\t\t\t} else {\n\t\t\t\tconst historyContactId = `c:${contact.id}`\n\t\t\t\tconst hasAnyName = contact.notify || contact.name || contact.verifiedName\n\t\t\t\tif(!historyCache.has(historyContactId) || hasAnyName) {\n\t\t\t\t\tdata.historySets.contacts[contact.id] = contact\n\t\t\t\t\thistoryCache.add(historyContactId)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor(const message of eventData.messages as WAMessage[]) {\n\t\t\tconst key = stringifyMessageKey(message.key)\n\t\t\tconst existingMsg = data.historySets.messages[key]\n\t\t\tif(!existingMsg && !historyCache.has(key)) {\n\t\t\t\tdata.historySets.messages[key] = message\n\t\t\t\thistoryCache.add(key)\n\t\t\t}\n\t\t}\n\n\t\tdata.historySets.empty = false\n\t\tdata.historySets.isLatest = eventData.isLatest || data.historySets.isLatest\n\n\t\tbreak\n\tcase 'chats.upsert':\n\t\tfor(const chat of eventData as Chat[]) {\n\t\t\tlet upsert = data.chatUpserts[chat.id]\n\t\t\tif(!upsert) {\n\t\t\t\tupsert = data.historySets[chat.id]\n\t\t\t\tif(upsert) {\n\t\t\t\t\tlogger.debug({ chatId: chat.id }, 'absorbed chat upsert in chat set')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(upsert) {\n\t\t\t\tupsert = concatChats(upsert, chat)\n\t\t\t} else {\n\t\t\t\tupsert = chat\n\t\t\t\tdata.chatUpserts[chat.id] = upsert\n\t\t\t}\n\n\t\t\tabsorbingChatUpdate(upsert)\n\n\t\t\tif(data.chatDeletes.has(chat.id)) {\n\t\t\t\tdata.chatDeletes.delete(chat.id)\n\t\t\t}\n\t\t}\n\n\t\tbreak\n\tcase 'chats.update':\n\t\tfor(const update of eventData as ChatUpdate[]) {\n\t\t\tconst chatId = update.id!\n\t\t\tconst conditionMatches = update.conditional ? update.conditional(data) : true\n\t\t\tif(conditionMatches) {\n\t\t\t\tdelete update.conditional\n\n\t\t\t\t// if there is an existing upsert, merge the update into it\n\t\t\t\tconst upsert = data.historySets.chats[chatId] || data.chatUpserts[chatId]\n\t\t\t\tif(upsert) {\n\t\t\t\t\tconcatChats(upsert, update)\n\t\t\t\t} else {\n\t\t\t\t\t// merge the update into the existing update\n\t\t\t\t\tconst chatUpdate = data.chatUpdates[chatId] || { }\n\t\t\t\t\tdata.chatUpdates[chatId] = concatChats(chatUpdate, update)\n\t\t\t\t}\n\t\t\t} else if(conditionMatches === undefined) {\n\t\t\t\t// condition yet to be fulfilled\n\t\t\t\tdata.chatUpdates[chatId] = update\n\t\t\t}\n\t\t\t// otherwise -- condition not met, update is invalid\n\n\t\t\t// if the chat has been updated\n\t\t\t// ignore any existing chat delete\n\t\t\tif(data.chatDeletes.has(chatId)) {\n\t\t\t\tdata.chatDeletes.delete(chatId)\n\t\t\t}\n\t\t}\n\n\t\tbreak\n\tcase 'chats.delete':\n\t\tfor(const chatId of eventData as string[]) {\n\t\t\tif(!data.chatDeletes.has(chatId)) {\n\t\t\t\tdata.chatDeletes.add(chatId)\n\t\t\t}\n\n\t\t\t// remove any prior updates & upserts\n\t\t\tif(data.chatUpdates[chatId]) {\n\t\t\t\tdelete data.chatUpdates[chatId]\n\t\t\t}\n\n\t\t\tif(data.chatUpserts[chatId]) {\n\t\t\t\tdelete data.chatUpserts[chatId]\n\n\t\t\t}\n\n\t\t\tif(data.historySets.chats[chatId]) {\n\t\t\t\tdelete data.historySets.chats[chatId]\n\t\t\t}\n\t\t}\n\n\t\tbreak\n\tcase 'contacts.upsert':\n\t\tfor(const contact of eventData as Contact[]) {\n\t\t\tlet upsert = data.contactUpserts[contact.id]\n\t\t\tif(!upsert) {\n\t\t\t\tupsert = data.historySets.contacts[contact.id]\n\t\t\t\tif(upsert) {\n\t\t\t\t\tlogger.debug({ contactId: contact.id }, 'absorbed contact upsert in contact set')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(upsert) {\n\t\t\t\tupsert = Object.assign(upsert, trimUndefined(contact))\n\t\t\t} else {\n\t\t\t\tupsert = contact\n\t\t\t\tdata.contactUpserts[contact.id] = upsert\n\t\t\t}\n\n\t\t\tif(data.contactUpdates[contact.id]) {\n\t\t\t\tupsert = Object.assign(data.contactUpdates[contact.id], trimUndefined(contact))\n\t\t\t\tdelete data.contactUpdates[contact.id]\n\t\t\t}\n\t\t}\n\n\t\tbreak\n\tcase 'contacts.update':\n\t\tconst contactUpdates = eventData as BaileysEventMap['contacts.update']\n\t\tfor(const update of contactUpdates) {\n\t\t\tconst id = update.id!\n\t\t\t// merge into prior upsert\n\t\t\tconst upsert = data.historySets.contacts[id] || data.contactUpserts[id]\n\t\t\tif(upsert) {\n\t\t\t\tObject.assign(upsert, update)\n\t\t\t} else {\n\t\t\t\t// merge into prior update\n\t\t\t\tconst contactUpdate = data.contactUpdates[id] || { }\n\t\t\t\tdata.contactUpdates[id] = Object.assign(contactUpdate, update)\n\t\t\t}\n\t\t}\n\n\t\tbreak\n\tcase 'messages.upsert':\n\t\tconst { messages, type } = eventData as BaileysEventMap['messages.upsert']\n\t\tfor(const message of messages) {\n\t\t\tconst key = stringifyMessageKey(message.key)\n\t\t\tlet existing = data.messageUpserts[key]?.message\n\t\t\tif(!existing) {\n\t\t\t\texisting = data.historySets.messages[key]\n\t\t\t\tif(existing) {\n\t\t\t\t\tlogger.debug({ messageId: key }, 'absorbed message upsert in message set')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(existing) {\n\t\t\t\tmessage.messageTimestamp = existing.messageTimestamp\n\t\t\t}\n\n\t\t\tif(data.messageUpdates[key]) {\n\t\t\t\tlogger.debug('absorbed prior message update in message upsert')\n\t\t\t\tObject.assign(message, data.messageUpdates[key].update)\n\t\t\t\tdelete data.messageUpdates[key]\n\t\t\t}\n\n\t\t\tif(data.historySets.messages[key]) {\n\t\t\t\tdata.historySets.messages[key] = message\n\t\t\t} else {\n\t\t\t\tdata.messageUpserts[key] = {\n\t\t\t\t\tmessage,\n\t\t\t\t\ttype: type === 'notify' || data.messageUpserts[key]?.type === 'notify'\n\t\t\t\t\t\t? 'notify'\n\t\t\t\t\t\t: type\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbreak\n\tcase 'messages.update':\n\t\tconst msgUpdates = eventData as BaileysEventMap['messages.update']\n\t\tfor(const { key, update } of msgUpdates) {\n\t\t\tconst keyStr = stringifyMessageKey(key)\n\t\t\tconst existing = data.historySets.messages[keyStr] || data.messageUpserts[keyStr]?.message\n\t\t\tif(existing) {\n\t\t\t\tObject.assign(existing, update)\n\t\t\t\t// if the message was received & read by us\n\t\t\t\t// the chat counter must have been incremented\n\t\t\t\t// so we need to decrement it\n\t\t\t\tif(update.status === WAMessageStatus.READ && !key.fromMe) {\n\t\t\t\t\tdecrementChatReadCounterIfMsgDidUnread(existing)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst msgUpdate = data.messageUpdates[keyStr] || { key, update: { } }\n\t\t\t\tObject.assign(msgUpdate.update, update)\n\t\t\t\tdata.messageUpdates[keyStr] = msgUpdate\n\t\t\t}\n\t\t}\n\n\t\tbreak\n\tcase 'messages.delete':\n\t\tconst deleteData = eventData as BaileysEventMap['messages.delete']\n\t\tif('keys' in deleteData) {\n\t\t\tconst { keys } = deleteData\n\t\t\tfor(const key of keys) {\n\t\t\t\tconst keyStr = stringifyMessageKey(key)\n\t\t\t\tif(!data.messageDeletes[keyStr]) {\n\t\t\t\t\tdata.messageDeletes[keyStr] = key\n\n\t\t\t\t}\n\n\t\t\t\tif(data.messageUpserts[keyStr]) {\n\t\t\t\t\tdelete data.messageUpserts[keyStr]\n\t\t\t\t}\n\n\t\t\t\tif(data.messageUpdates[keyStr]) {\n\t\t\t\t\tdelete data.messageUpdates[keyStr]\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO: add support\n\t\t}\n\n\t\tbreak\n\tcase 'messages.reaction':\n\t\tconst reactions = eventData as BaileysEventMap['messages.reaction']\n\t\tfor(const { key, reaction } of reactions) {\n\t\t\tconst keyStr = stringifyMessageKey(key)\n\t\t\tconst existing = data.messageUpserts[keyStr]\n\t\t\tif(existing) {\n\t\t\t\tupdateMessageWithReaction(existing.message, reaction)\n\t\t\t} else {\n\t\t\t\tdata.messageReactions[keyStr] = data.messageReactions[keyStr]\n\t\t\t\t\t|| { key, reactions: [] }\n\t\t\t\tupdateMessageWithReaction(data.messageReactions[keyStr], reaction)\n\t\t\t}\n\t\t}\n\n\t\tbreak\n\tcase 'message-receipt.update':\n\t\tconst receipts = eventData as BaileysEventMap['message-receipt.update']\n\t\tfor(const { key, receipt } of receipts) {\n\t\t\tconst keyStr = stringifyMessageKey(key)\n\t\t\tconst existing = data.messageUpserts[keyStr]\n\t\t\tif(existing) {\n\t\t\t\tupdateMessageWithReceipt(existing.message, receipt)\n\t\t\t} else {\n\t\t\t\tdata.messageReceipts[keyStr] = data.messageReceipts[keyStr]\n\t\t\t\t\t|| { key, userReceipt: [] }\n\t\t\t\tupdateMessageWithReceipt(data.messageReceipts[keyStr], receipt)\n\t\t\t}\n\t\t}\n\n\t\tbreak\n\tcase 'groups.update':\n\t\tconst groupUpdates = eventData as BaileysEventMap['groups.update']\n\t\tfor(const update of groupUpdates) {\n\t\t\tconst id = update.id!\n\t\t\tconst groupUpdate = data.groupUpdates[id] || { }\n\t\t\tif(!data.groupUpdates[id]) {\n\t\t\t\tdata.groupUpdates[id] = Object.assign(groupUpdate, update)\n\n\t\t\t}\n\t\t}\n\n\t\tbreak\n\tdefault:\n\t\tthrow new Error(`\"${event}\" cannot be buffered`)\n\t}\n\n\tfunction absorbingChatUpdate(existing: Chat) {\n\t\tconst chatId = existing.id\n\t\tconst update = data.chatUpdates[chatId]\n\t\tif(update) {\n\t\t\tconst conditionMatches = update.conditional ? update.conditional(data) : true\n\t\t\tif(conditionMatches) {\n\t\t\t\tdelete update.conditional\n\t\t\t\tlogger.debug({ chatId }, 'absorbed chat update in existing chat')\n\t\t\t\tObject.assign(existing, concatChats(update as Chat, existing))\n\t\t\t\tdelete data.chatUpdates[chatId]\n\t\t\t} else if(conditionMatches === false) {\n\t\t\t\tlogger.debug({ chatId }, 'chat update condition fail, removing')\n\t\t\t\tdelete data.chatUpdates[chatId]\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction decrementChatReadCounterIfMsgDidUnread(message: WAMessage) {\n\t\t// decrement chat unread counter\n\t\t// if the message has already been marked read by us\n\t\tconst chatId = message.key.remoteJid!\n\t\tconst chat = data.chatUpdates[chatId] || data.chatUpserts[chatId]\n\t\tif(\n\t\t\tisRealMessage(message, '')\n\t\t\t&& shouldIncrementChatUnread(message)\n\t\t\t&& typeof chat?.unreadCount === 'number'\n\t\t\t&& chat.unreadCount > 0\n\t\t) {\n\t\t\tlogger.debug({ chatId: chat.id }, 'decrementing chat counter')\n\t\t\tchat.unreadCount -= 1\n\t\t\tif(chat.unreadCount === 0) {\n\t\t\t\tdelete chat.unreadCount\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction consolidateEvents(data: BufferedEventData) {\n\tconst map: BaileysEventData = { }\n\n\tif(!data.historySets.empty) {\n\t\tmap['messaging-history.set'] = {\n\t\t\tchats: Object.values(data.historySets.chats),\n\t\t\tmessages: Object.values(data.historySets.messages),\n\t\t\tcontacts: Object.values(data.historySets.contacts),\n\t\t\tisLatest: data.historySets.isLatest\n\t\t}\n\t}\n\n\tconst chatUpsertList = Object.values(data.chatUpserts)\n\tif(chatUpsertList.length) {\n\t\tmap['chats.upsert'] = chatUpsertList\n\t}\n\n\tconst chatUpdateList = Object.values(data.chatUpdates)\n\tif(chatUpdateList.length) {\n\t\tmap['chats.update'] = chatUpdateList\n\t}\n\n\tconst chatDeleteList = Array.from(data.chatDeletes)\n\tif(chatDeleteList.length) {\n\t\tmap['chats.delete'] = chatDeleteList\n\t}\n\n\tconst messageUpsertList = Object.values(data.messageUpserts)\n\tif(messageUpsertList.length) {\n\t\tconst type = messageUpsertList[0].type\n\t\tmap['messages.upsert'] = {\n\t\t\tmessages: messageUpsertList.map(m => m.message),\n\t\t\ttype\n\t\t}\n\t}\n\n\tconst messageUpdateList = Object.values(data.messageUpdates)\n\tif(messageUpdateList.length) {\n\t\tmap['messages.update'] = messageUpdateList\n\t}\n\n\tconst messageDeleteList = Object.values(data.messageDeletes)\n\tif(messageDeleteList.length) {\n\t\tmap['messages.delete'] = { keys: messageDeleteList }\n\t}\n\n\tconst messageReactionList = Object.values(data.messageReactions).flatMap(\n\t\t({ key, reactions }) => reactions.flatMap(reaction => ({ key, reaction }))\n\t)\n\tif(messageReactionList.length) {\n\t\tmap['messages.reaction'] = messageReactionList\n\t}\n\n\tconst messageReceiptList = Object.values(data.messageReceipts).flatMap(\n\t\t({ key, userReceipt }) => userReceipt.flatMap(receipt => ({ key, receipt }))\n\t)\n\tif(messageReceiptList.length) {\n\t\tmap['message-receipt.update'] = messageReceiptList\n\t}\n\n\tconst contactUpsertList = Object.values(data.contactUpserts)\n\tif(contactUpsertList.length) {\n\t\tmap['contacts.upsert'] = contactUpsertList\n\t}\n\n\tconst contactUpdateList = Object.values(data.contactUpdates)\n\tif(contactUpdateList.length) {\n\t\tmap['contacts.update'] = contactUpdateList\n\t}\n\n\tconst groupUpdateList = Object.values(data.groupUpdates)\n\tif(groupUpdateList.length) {\n\t\tmap['groups.update'] = groupUpdateList\n\t}\n\n\treturn map\n}\n\nfunction concatChats<C extends Partial<Chat>>(a: C, b: Partial<Chat>) {\n\tif(b.unreadCount === null) {\n\t\t// neutralize unread counter\n\t\tif(a.unreadCount! < 0) {\n\t\t\ta.unreadCount = undefined\n\t\t\tb.unreadCount = undefined\n\t\t}\n\t}\n\n\tif(typeof a.unreadCount === 'number' && typeof b.unreadCount === 'number') {\n\t\tb = { ...b }\n\t\tif(b.unreadCount! >= 0) {\n\t\t\tb.unreadCount = Math.max(b.unreadCount!, 0) + Math.max(a.unreadCount, 0)\n\t\t}\n\t}\n\n\treturn Object.assign(a, b)\n}\n\nconst stringifyMessageKey = (key: proto.IMessageKey) => `${key.remoteJid},${key.id},${key.fromMe ? '1' : '0'}`"]}