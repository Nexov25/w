{"version":3,"file":"history.js","sourceRoot":"/","sources":["Utils/history.ts"],"names":[],"mappings":"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","sourcesContent":["import { AxiosRequestConfig } from 'axios'\nimport { promisify } from 'util'\nimport { inflate } from 'zlib'\nimport { proto } from '../../WAProto'\nimport { Chat, Contact, WAMessageStubType } from '../Types'\nimport { isJidUser } from '../WABinary'\nimport { toNumber } from './generics'\nimport { normalizeMessageContent } from './messages'\nimport { downloadContentFromMessage } from './messages-media'\n\nconst inflatePromise = promisify(inflate)\n\nexport const downloadHistory = async(\n\tmsg: proto.Message.IHistorySyncNotification,\n\toptions: AxiosRequestConfig<any>\n) => {\n\tconst stream = await downloadContentFromMessage(msg, 'md-msg-hist', { options })\n\tconst bufferArray: Buffer[] = []\n\tfor await (const chunk of stream) {\n\t\tbufferArray.push(chunk)\n\t}\n\n\tlet buffer = Buffer.concat(bufferArray)\n\n\t// decompress buffer\n\tbuffer = await inflatePromise(buffer)\n\n\tconst syncData = proto.HistorySync.decode(buffer)\n\treturn syncData\n}\n\nexport const processHistoryMessage = (item: proto.IHistorySync) => {\n\tconst messages: proto.IWebMessageInfo[] = []\n\tconst contacts: Contact[] = []\n\tconst chats: Chat[] = []\n\n\tswitch (item.syncType) {\n\tcase proto.HistorySync.HistorySyncType.INITIAL_BOOTSTRAP:\n\tcase proto.HistorySync.HistorySyncType.RECENT:\n\tcase proto.HistorySync.HistorySyncType.FULL:\n\t\tfor(const chat of item.conversations! as Chat[]) {\n\t\t\tcontacts.push({ id: chat.id, name: chat.name || undefined })\n\n\t\t\tconst msgs = chat.messages || []\n\t\t\tdelete chat.messages\n\t\t\tdelete chat.archived\n\t\t\tdelete chat.muteEndTime\n\t\t\tdelete chat.pinned\n\n\t\t\tfor(const item of msgs) {\n\t\t\t\tconst message = item.message!\n\t\t\t\tmessages.push(message)\n\n\t\t\t\tif(!chat.messages?.length) {\n\t\t\t\t\t// keep only the most recent message in the chat array\n\t\t\t\t\tchat.messages = [{ message }]\n\t\t\t\t}\n\n\t\t\t\tif(!message.key.fromMe && !chat.lastMessageRecvTimestamp) {\n\t\t\t\t\tchat.lastMessageRecvTimestamp = toNumber(message.messageTimestamp)\n\t\t\t\t}\n\n\t\t\t\tif(\n\t\t\t\t\t(message.messageStubType === WAMessageStubType.BIZ_PRIVACY_MODE_TO_BSP\n\t\t\t\t\t|| message.messageStubType === WAMessageStubType.BIZ_PRIVACY_MODE_TO_FB\n\t\t\t\t\t)\n\t\t\t\t\t&& message.messageStubParameters?.[0]\n\t\t\t\t) {\n\t\t\t\t\tcontacts.push({\n\t\t\t\t\t\tid: message.key.participant || message.key.remoteJid!,\n\t\t\t\t\t\tverifiedName: message.messageStubParameters?.[0],\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(isJidUser(chat.id) && chat.readOnly && chat.archived) {\n\t\t\t\tdelete chat.readOnly\n\t\t\t}\n\n\t\t\tchats.push({ ...chat })\n\t\t}\n\n\t\tbreak\n\tcase proto.HistorySync.HistorySyncType.PUSH_NAME:\n\t\tfor(const c of item.pushnames!) {\n\t\t\tcontacts.push({ id: c.id!, notify: c.pushname! })\n\t\t}\n\n\t\tbreak\n\t}\n\n\treturn {\n\t\tchats,\n\t\tcontacts,\n\t\tmessages,\n\t}\n}\n\nexport const downloadAndProcessHistorySyncNotification = async(\n\tmsg: proto.Message.IHistorySyncNotification,\n\toptions: AxiosRequestConfig<any>\n) => {\n\tconst historyMsg = await downloadHistory(msg, options)\n\treturn processHistoryMessage(historyMsg)\n}\n\nexport const getHistoryMsg = (message: proto.IMessage) => {\n\tconst normalizedContent = !!message ? normalizeMessageContent(message) : undefined\n\tconst anyHistoryMsg = normalizedContent?.protocolMessage?.historySyncNotification\n\n\treturn anyHistoryMsg\n}"]}