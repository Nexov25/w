{"version":3,"file":"decode-wa-message.js","sourceRoot":"/","sources":["Utils/decode-wa-message.ts"],"names":[],"mappings":"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","sourcesContent":["import { Boom } from '@hapi/boom'\nimport { Logger } from 'pino'\nimport { proto } from '../../WAProto'\nimport { SignalRepository, WAMessageKey } from '../Types'\nimport { areJidsSameUser, BinaryNode, isJidBroadcast, isJidGroup, isJidStatusBroadcast, isJidUser, isLidUser } from '../WABinary'\nimport { unpadRandomMax16 } from './generics'\n\nconst NO_MESSAGE_FOUND_ERROR_TEXT = 'Message absent from node'\n\ntype MessageType = 'chat' | 'peer_broadcast' | 'other_broadcast' | 'group' | 'direct_peer_status' | 'other_status'\n\n/**\n * Decode the received node as a message.\n * @note this will only parse the message, not decrypt it\n */\nexport function decodeMessageNode(\n\tstanza: BinaryNode,\n\tmeId: string,\n\tmeLid: string\n) {\n\tlet msgType: MessageType\n\tlet chatId: string\n\tlet author: string\n\n\tconst msgId = stanza.attrs.id\n\tconst from = stanza.attrs.from\n\tconst participant: string | undefined = stanza.attrs.participant\n\tconst recipient: string | undefined = stanza.attrs.recipient\n\n\tconst isMe = (jid: string) => areJidsSameUser(jid, meId)\n\tconst isMeLid = (jid: string) => areJidsSameUser(jid, meLid)\n\n\tif(isJidUser(from)) {\n\t\tif(recipient) {\n\t\t\tif(!isMe(from)) {\n\t\t\t\tthrow new Boom('receipient present, but msg not from me', { data: stanza })\n\t\t\t}\n\n\t\t\tchatId = recipient\n\t\t} else {\n\t\t\tchatId = from\n\t\t}\n\n\t\tmsgType = 'chat'\n\t\tauthor = from\n\t} else if(isLidUser(from)) {\n\t\tif(recipient) {\n\t\t\tif(!isMeLid(from)) {\n\t\t\t\tthrow new Boom('receipient present, but msg not from me', { data: stanza })\n\t\t\t}\n\n\t\t\tchatId = recipient\n\t\t} else {\n\t\t\tchatId = from\n\t\t}\n\n\t\tmsgType = 'chat'\n\t\tauthor = from\n\t} else if(isJidGroup(from)) {\n\t\tif(!participant) {\n\t\t\tthrow new Boom('No participant in group message')\n\t\t}\n\n\t\tmsgType = 'group'\n\t\tauthor = participant\n\t\tchatId = from\n\t} else if(isJidBroadcast(from)) {\n\t\tif(!participant) {\n\t\t\tthrow new Boom('No participant in group message')\n\t\t}\n\n\t\tconst isParticipantMe = isMe(participant)\n\t\tif(isJidStatusBroadcast(from)) {\n\t\t\tmsgType = isParticipantMe ? 'direct_peer_status' : 'other_status'\n\t\t} else {\n\t\t\tmsgType = isParticipantMe ? 'peer_broadcast' : 'other_broadcast'\n\t\t}\n\n\t\tchatId = from\n\t\tauthor = participant\n\t} else {\n\t\tthrow new Boom('Unknown message type', { data: stanza })\n\t}\n\n\tconst fromMe = (isLidUser(from) ? isMeLid : isMe)(stanza.attrs.participant || stanza.attrs.from)\n\tconst pushname = stanza.attrs.notify\n\n\tconst key: WAMessageKey = {\n\t\tremoteJid: chatId,\n\t\tfromMe,\n\t\tid: msgId,\n\t\tparticipant\n\t}\n\n\tconst fullMessage: proto.IWebMessageInfo = {\n\t\tkey,\n\t\tmessageTimestamp: +stanza.attrs.t,\n\t\tpushName: pushname,\n\t\tbroadcast: isJidBroadcast(from)\n\t}\n\n\tif(key.fromMe) {\n\t\tfullMessage.status = proto.WebMessageInfo.Status.SERVER_ACK\n\t}\n\n\treturn {\n\t\tfullMessage,\n\t\tauthor,\n\t\tsender: msgType === 'chat' ? author : chatId\n\t}\n}\n\nexport const decryptMessageNode = (\n\tstanza: BinaryNode,\n\tmeId: string,\n\tmeLid: string,\n\trepository: SignalRepository,\n\tlogger: Logger\n) => {\n\tconst { fullMessage, author, sender } = decodeMessageNode(stanza, meId, meLid)\n\treturn {\n\t\tfullMessage,\n\t\tcategory: stanza.attrs.category,\n\t\tauthor,\n\t\tasync decrypt() {\n\t\t\tlet decryptables = 0\n\t\t\tif(Array.isArray(stanza.content)) {\n\t\t\t\tfor(const { tag, attrs, content } of stanza.content) {\n\t\t\t\t\tif(tag === 'verified_name' && content instanceof Uint8Array) {\n\t\t\t\t\t\tconst cert = proto.VerifiedNameCertificate.decode(content)\n\t\t\t\t\t\tconst details = proto.VerifiedNameCertificate.Details.decode(cert.details)\n\t\t\t\t\t\tfullMessage.verifiedBizName = details.verifiedName\n\t\t\t\t\t}\n\n\t\t\t\t\tif(tag !== 'enc') {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!(content instanceof Uint8Array)) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tdecryptables += 1\n\n\t\t\t\t\tlet msgBuffer: Uint8Array\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst e2eType = attrs.type\n\t\t\t\t\t\tswitch (e2eType) {\n\t\t\t\t\t\tcase 'skmsg':\n\t\t\t\t\t\t\tmsgBuffer = await repository.decryptGroupMessage({\n\t\t\t\t\t\t\t\tgroup: sender,\n\t\t\t\t\t\t\t\tauthorJid: author,\n\t\t\t\t\t\t\t\tmsg: content\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase 'pkmsg':\n\t\t\t\t\t\tcase 'msg':\n\t\t\t\t\t\t\tconst user = isJidUser(sender) ? sender : author\n\t\t\t\t\t\t\tmsgBuffer = await repository.decryptMessage({\n\t\t\t\t\t\t\t\tjid: user,\n\t\t\t\t\t\t\t\ttype: e2eType,\n\t\t\t\t\t\t\t\tciphertext: content\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error(`Unknown e2e type: ${e2eType}`)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet msg: proto.IMessage = proto.Message.decode(unpadRandomMax16(msgBuffer))\n\t\t\t\t\t\tmsg = msg.deviceSentMessage?.message || msg\n\t\t\t\t\t\tif(msg.senderKeyDistributionMessage) {\n\t\t\t\t\t\t\tawait repository.processSenderKeyDistributionMessage({\n\t\t\t\t\t\t\t\tauthorJid: author,\n\t\t\t\t\t\t\t\titem: msg.senderKeyDistributionMessage\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(fullMessage.message) {\n\t\t\t\t\t\t\tObject.assign(fullMessage.message, msg)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfullMessage.message = msg\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(err) {\n\t\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t\t{ key: fullMessage.key, err },\n\t\t\t\t\t\t\t'failed to decrypt message'\n\t\t\t\t\t\t)\n\t\t\t\t\t\tfullMessage.messageStubType = proto.WebMessageInfo.StubType.CIPHERTEXT\n\t\t\t\t\t\tfullMessage.messageStubParameters = [err.message]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if nothing was found to decrypt\n\t\t\tif(!decryptables) {\n\t\t\t\tfullMessage.messageStubType = proto.WebMessageInfo.StubType.CIPHERTEXT\n\t\t\t\tfullMessage.messageStubParameters = [NO_MESSAGE_FOUND_ERROR_TEXT]\n\t\t\t}\n\t\t}\n\t}\n}\n"]}