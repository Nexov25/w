{"version":3,"file":"validate-connection.js","sourceRoot":"/","sources":["Utils/validate-connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { Boom } from '@hapi/boom'\nimport { createHash } from 'crypto'\nimport { proto } from '../../WAProto'\nimport { KEY_BUNDLE_TYPE } from '../Defaults'\nimport type { AuthenticationCreds, SignalCreds, SocketConfig } from '../Types'\nimport { BinaryNode, getBinaryNodeChild, jidDecode, S_WHATSAPP_NET } from '../WABinary'\nimport { Curve, hmacSign } from './crypto'\nimport { encodeBigEndian } from './generics'\nimport { createSignalIdentity } from './signal'\n\nconst getUserAgent = (config: SocketConfig): proto.ClientPayload.IUserAgent => {\n\tconst osVersion = config.mobile ? '15.3.1' : '0.1'\n\tconst version = config.mobile ? [2, 22, 24] : config.version\n\tconst device = config.mobile ? 'iPhone_7' : 'Desktop'\n\tconst manufacturer = config.mobile ? 'Apple' : ''\n\tconst platform = config.mobile ? proto.ClientPayload.UserAgent.Platform.IOS : proto.ClientPayload.UserAgent.Platform.MACOS\n\tconst phoneId = config.mobile ? { phoneId: config.auth.creds.phoneId } : {}\n\n\treturn {\n\t\tappVersion: {\n\t\t\tprimary: version[0],\n\t\t\tsecondary: version[1],\n\t\t\ttertiary: version[2],\n\t\t},\n\t\tplatform,\n\t\treleaseChannel: proto.ClientPayload.UserAgent.ReleaseChannel.RELEASE,\n\t\tmcc: config.auth.creds.registration?.phoneNumberMobileCountryCode || '000',\n\t\tmnc: config.auth.creds.registration?.phoneNumberMobileNetworkCode || '000',\n\t\tosVersion: osVersion,\n\t\tmanufacturer,\n\t\tdevice,\n\t\tosBuildNumber: osVersion,\n\t\tlocaleLanguageIso6391: 'en',\n\t\tlocaleCountryIso31661Alpha2: 'US',\n\t\t...phoneId\n\t}\n}\n\nconst getClientPayload = (config: SocketConfig) => {\n\tconst payload: proto.IClientPayload = {\n\t\tconnectType: proto.ClientPayload.ConnectType.WIFI_UNKNOWN,\n\t\tconnectReason: proto.ClientPayload.ConnectReason.USER_ACTIVATED,\n\t\tuserAgent: getUserAgent(config),\n\t}\n\n\treturn payload\n}\n\nexport const generateMobileNode = (config: SocketConfig): proto.IClientPayload => {\n\tif(!config.auth.creds) {\n\t\tthrow new Boom('No registration data found', { data: config })\n\t}\n\n\tconst payload: proto.IClientPayload = {\n\t\t...getClientPayload(config),\n\t\tsessionId: Math.floor(Math.random() * 999999999 + 1),\n\t\tshortConnect: true,\n\t\tconnectAttemptCount: 0,\n\t\tdevice: 0,\n\t\tdnsSource: {\n\t\t\tappCached: false,\n\t\t\tdnsMethod: proto.ClientPayload.DNSSource.DNSResolutionMethod.SYSTEM,\n\t\t},\n\t\tpassive: false, // XMPP heartbeat setting (false: server actively pings) (true: client actively pings)\n\t\tpushName: 'test',\n\t\tusername: Number(`${config.auth.creds.registration.phoneNumberCountryCode}${config.auth.creds.registration.phoneNumberNationalNumber}`),\n\t}\n\treturn proto.ClientPayload.fromObject(payload)\n}\n\nexport const generateLoginNode = (userJid: string, config: SocketConfig): proto.IClientPayload => {\n\tconst { user, device } = jidDecode(userJid)!\n\tconst payload: proto.IClientPayload = {\n\t\t...getClientPayload(config),\n\t\tpassive: true,\n\t\tusername: +user,\n\t\tdevice: device,\n\t}\n\treturn proto.ClientPayload.fromObject(payload)\n}\n\nexport const generateRegistrationNode = (\n\t{ registrationId, signedPreKey, signedIdentityKey }: SignalCreds,\n\tconfig: SocketConfig\n) => {\n\t// the app version needs to be md5 hashed\n\t// and passed in\n\tconst appVersionBuf = createHash('md5')\n\t\t.update(config.version.join('.')) // join as string\n\t\t.digest()\n\n\tconst companion: proto.IDeviceProps = {\n\t\tos: config.browser[0],\n\t\tplatformType: proto.DeviceProps.PlatformType.DESKTOP,\n\t\trequireFullSync: config.syncFullHistory,\n\t}\n\n\tconst companionProto = proto.DeviceProps.encode(companion).finish()\n\n\tconst registerPayload: proto.IClientPayload = {\n\t\t...getClientPayload(config),\n\t\tpassive: false,\n\t\tdevicePairingData: {\n\t\t\tbuildHash: appVersionBuf,\n\t\t\tdeviceProps: companionProto,\n\t\t\teRegid: encodeBigEndian(registrationId),\n\t\t\teKeytype: KEY_BUNDLE_TYPE,\n\t\t\teIdent: signedIdentityKey.public,\n\t\t\teSkeyId: encodeBigEndian(signedPreKey.keyId, 3),\n\t\t\teSkeyVal: signedPreKey.keyPair.public,\n\t\t\teSkeySig: signedPreKey.signature,\n\t\t},\n\t}\n\n\treturn proto.ClientPayload.fromObject(registerPayload)\n}\n\nexport const configureSuccessfulPairing = (\n\tstanza: BinaryNode,\n\t{ advSecretKey, signedIdentityKey, signalIdentities }: Pick<AuthenticationCreds, 'advSecretKey' | 'signedIdentityKey' | 'signalIdentities'>\n) => {\n\tconst msgId = stanza.attrs.id\n\n\tconst pairSuccessNode = getBinaryNodeChild(stanza, 'pair-success')\n\n\tconst deviceIdentityNode = getBinaryNodeChild(pairSuccessNode, 'device-identity')\n\tconst platformNode = getBinaryNodeChild(pairSuccessNode, 'platform')\n\tconst deviceNode = getBinaryNodeChild(pairSuccessNode, 'device')\n\tconst businessNode = getBinaryNodeChild(pairSuccessNode, 'biz')\n\n\tif(!deviceIdentityNode || !deviceNode) {\n\t\tthrow new Boom('Missing device-identity or device in pair success node', { data: stanza })\n\t}\n\n\tconst bizName = businessNode?.attrs.name\n\tconst jid = deviceNode.attrs.jid\n\n\tconst { details, hmac } = proto.ADVSignedDeviceIdentityHMAC.decode(deviceIdentityNode.content as Buffer)\n\t// check HMAC matches\n\tconst advSign = hmacSign(details, Buffer.from(advSecretKey, 'base64'))\n\tif(Buffer.compare(hmac, advSign) !== 0) {\n\t\tthrow new Boom('Invalid account signature')\n\t}\n\n\tconst account = proto.ADVSignedDeviceIdentity.decode(details)\n\tconst { accountSignatureKey, accountSignature, details: deviceDetails } = account\n\t// verify the device signature matches\n\tconst accountMsg = Buffer.concat([ Buffer.from([6, 0]), deviceDetails, signedIdentityKey.public ])\n\tif(!Curve.verify(accountSignatureKey, accountMsg, accountSignature)) {\n\t\tthrow new Boom('Failed to verify account signature')\n\t}\n\n\t// sign the details with our identity key\n\tconst deviceMsg = Buffer.concat([ Buffer.from([6, 1]), deviceDetails, signedIdentityKey.public, accountSignatureKey ])\n\taccount.deviceSignature = Curve.sign(signedIdentityKey.private, deviceMsg)\n\n\tconst identity = createSignalIdentity(jid, accountSignatureKey)\n\tconst accountEnc = encodeSignedDeviceIdentity(account, false)\n\n\tconst deviceIdentity = proto.ADVDeviceIdentity.decode(account.details)\n\n\tconst reply: BinaryNode = {\n\t\ttag: 'iq',\n\t\tattrs: {\n\t\t\tto: S_WHATSAPP_NET,\n\t\t\ttype: 'result',\n\t\t\tid: msgId,\n\t\t},\n\t\tcontent: [\n\t\t\t{\n\t\t\t\ttag: 'pair-device-sign',\n\t\t\t\tattrs: { },\n\t\t\t\tcontent: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttag: 'device-identity',\n\t\t\t\t\t\tattrs: { 'key-index': deviceIdentity.keyIndex.toString() },\n\t\t\t\t\t\tcontent: accountEnc\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n\n\tconst authUpdate: Partial<AuthenticationCreds> = {\n\t\taccount,\n\t\tme: { id: jid, name: bizName },\n\t\tsignalIdentities: [\n\t\t\t...(signalIdentities || []),\n\t\t\tidentity\n\t\t],\n\t\tplatform: platformNode?.attrs.name\n\t}\n\n\treturn {\n\t\tcreds: authUpdate,\n\t\treply\n\t}\n}\n\nexport const encodeSignedDeviceIdentity = (\n\taccount: proto.IADVSignedDeviceIdentity,\n\tincludeSignatureKey: boolean\n) => {\n\taccount = { ...account }\n\t// set to null if we are not to include the signature key\n\t// or if we are including the signature key but it is empty\n\tif(!includeSignatureKey || !account.accountSignatureKey?.length) {\n\t\taccount.accountSignatureKey = null\n\t}\n\n\treturn proto.ADVSignedDeviceIdentity\n\t\t.encode(account)\n\t\t.finish()\n}"]}