{"version":3,"file":"process-message.js","sourceRoot":"/","sources":["Utils/process-message.ts"],"names":[],"mappings":"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","sourcesContent":["import { AxiosRequestConfig } from 'axios'\nimport type { Logger } from 'pino'\nimport { proto } from '../../WAProto'\nimport { AuthenticationCreds, BaileysEventEmitter, Chat, GroupMetadata, ParticipantAction, SignalKeyStoreWithTransaction, SocketConfig, WAMessageStubType } from '../Types'\nimport { getContentType, normalizeMessageContent } from '../Utils/messages'\nimport { areJidsSameUser, isJidBroadcast, isJidStatusBroadcast, jidNormalizedUser } from '../WABinary'\nimport { aesDecryptGCM, hmacSign } from './crypto'\nimport { getKeyAuthor, toNumber } from './generics'\nimport { downloadAndProcessHistorySyncNotification } from './history'\n\ntype ProcessMessageContext = {\n\tshouldProcessHistoryMsg: boolean\n\tcreds: AuthenticationCreds\n\tkeyStore: SignalKeyStoreWithTransaction\n\tev: BaileysEventEmitter\n\tgetMessage: SocketConfig['getMessage']\n\tlogger?: Logger\n\toptions: AxiosRequestConfig<{}>\n}\n\nconst REAL_MSG_STUB_TYPES = new Set([\n\tWAMessageStubType.CALL_MISSED_GROUP_VIDEO,\n\tWAMessageStubType.CALL_MISSED_GROUP_VOICE,\n\tWAMessageStubType.CALL_MISSED_VIDEO,\n\tWAMessageStubType.CALL_MISSED_VOICE\n])\n\nconst REAL_MSG_REQ_ME_STUB_TYPES = new Set([\n\tWAMessageStubType.GROUP_PARTICIPANT_ADD\n])\n\n/** Cleans a received message to further processing */\nexport const cleanMessage = (message: proto.IWebMessageInfo, meId: string) => {\n\t// ensure remoteJid and participant doesn't have device or agent in it\n\tmessage.key.remoteJid = jidNormalizedUser(message.key.remoteJid!)\n\tmessage.key.participant = message.key.participant ? jidNormalizedUser(message.key.participant) : undefined\n\tconst content = normalizeMessageContent(message.message)\n\t// if the message has a reaction, ensure fromMe & remoteJid are from our perspective\n\tif(content?.reactionMessage) {\n\t\tnormaliseKey(content.reactionMessage.key!)\n\t}\n\n\tif(content?.pollUpdateMessage) {\n\t\tnormaliseKey(content.pollUpdateMessage.pollCreationMessageKey!)\n\t}\n\n\tfunction normaliseKey(msgKey: proto.IMessageKey) {\n\t\t// if the reaction is from another user\n\t\t// we've to correctly map the key to this user's perspective\n\t\tif(!message.key.fromMe) {\n\t\t\t// if the sender believed the message being reacted to is not from them\n\t\t\t// we've to correct the key to be from them, or some other participant\n\t\t\tmsgKey.fromMe = !msgKey.fromMe\n\t\t\t\t? areJidsSameUser(msgKey.participant || msgKey.remoteJid!, meId)\n\t\t\t\t// if the message being reacted to, was from them\n\t\t\t\t// fromMe automatically becomes false\n\t\t\t\t: false\n\t\t\t// set the remoteJid to being the same as the chat the message came from\n\t\t\tmsgKey.remoteJid = message.key.remoteJid\n\t\t\t// set participant of the message\n\t\t\tmsgKey.participant = msgKey.participant || message.key.participant\n\t\t}\n\t}\n}\n\nexport const isRealMessage = (message: proto.IWebMessageInfo, meId: string) => {\n\tconst normalizedContent = normalizeMessageContent(message.message)\n\tconst hasSomeContent = !!getContentType(normalizedContent)\n\treturn (\n\t\t!!normalizedContent\n\t\t|| REAL_MSG_STUB_TYPES.has(message.messageStubType!)\n\t\t|| (\n\t\t\tREAL_MSG_REQ_ME_STUB_TYPES.has(message.messageStubType!)\n\t\t\t&& message.messageStubParameters?.some(p => areJidsSameUser(meId, p))\n\t\t)\n\t)\n\t&& hasSomeContent\n\t&& !normalizedContent?.protocolMessage\n\t&& !normalizedContent?.reactionMessage\n\t&& !normalizedContent?.pollUpdateMessage\n}\n\nexport const shouldIncrementChatUnread = (message: proto.IWebMessageInfo) => (\n\t!message.key.fromMe && !message.messageStubType\n)\n\n/**\n * Get the ID of the chat from the given key.\n * Typically -- that'll be the remoteJid, but for broadcasts, it'll be the participant\n */\nexport const getChatId = ({ remoteJid, participant, fromMe }: proto.IMessageKey) => {\n\tif(\n\t\tisJidBroadcast(remoteJid!)\n\t\t&& !isJidStatusBroadcast(remoteJid!)\n\t\t&& !fromMe\n\t) {\n\t\treturn participant!\n\t}\n\n\treturn remoteJid!\n}\n\ntype PollContext = {\n\t/** normalised jid of the person that created the poll */\n\tpollCreatorJid: string\n\t/** ID of the poll creation message */\n\tpollMsgId: string\n\t/** poll creation message enc key */\n\tpollEncKey: Uint8Array\n\t/** jid of the person that voted */\n\tvoterJid: string\n}\n\n/**\n * Decrypt a poll vote\n * @param vote encrypted vote\n * @param ctx additional info about the poll required for decryption\n * @returns list of SHA256 options\n */\nexport function decryptPollVote(\n\t{ encPayload, encIv }: proto.Message.IPollEncValue,\n\t{\n\t\tpollCreatorJid,\n\t\tpollMsgId,\n\t\tpollEncKey,\n\t\tvoterJid,\n\t}: PollContext\n) {\n\tconst sign = Buffer.concat(\n\t\t[\n\t\t\ttoBinary(pollMsgId),\n\t\t\ttoBinary(pollCreatorJid),\n\t\t\ttoBinary(voterJid),\n\t\t\ttoBinary('Poll Vote'),\n\t\t\tnew Uint8Array([1])\n\t\t]\n\t)\n\n\tconst key0 = hmacSign(pollEncKey, new Uint8Array(32), 'sha256')\n\tconst decKey = hmacSign(sign, key0, 'sha256')\n\tconst aad = toBinary(`${pollMsgId}\\u0000${voterJid}`)\n\n\tconst decrypted = aesDecryptGCM(encPayload!, decKey, encIv!, aad)\n\treturn proto.Message.PollVoteMessage.decode(decrypted)\n\n\tfunction toBinary(txt: string) {\n\t\treturn Buffer.from(txt)\n\t}\n}\n\nconst processMessage = async(\n\tmessage: proto.IWebMessageInfo,\n\t{\n\t\tshouldProcessHistoryMsg,\n\t\tev,\n\t\tcreds,\n\t\tkeyStore,\n\t\tlogger,\n\t\toptions,\n\t\tgetMessage\n\t}: ProcessMessageContext\n) => {\n\tconst meId = creds.me!.id\n\tconst { accountSettings } = creds\n\n\tconst chat: Partial<Chat> = { id: jidNormalizedUser(getChatId(message.key)) }\n\tconst isRealMsg = isRealMessage(message, meId)\n\n\tif(isRealMsg) {\n\t\tchat.conversationTimestamp = toNumber(message.messageTimestamp)\n\t\t// only increment unread count if not CIPHERTEXT and from another person\n\t\tif(shouldIncrementChatUnread(message)) {\n\t\t\tchat.unreadCount = (chat.unreadCount || 0) + 1\n\t\t}\n\t}\n\n\tconst content = normalizeMessageContent(message.message)\n\n\t// unarchive chat if it's a real message, or someone reacted to our message\n\t// and we've the unarchive chats setting on\n\tif(\n\t\t(isRealMsg || content?.reactionMessage?.key?.fromMe)\n\t\t&& accountSettings?.unarchiveChats\n\t) {\n\t\tchat.archived = false\n\t\tchat.readOnly = false\n\t}\n\n\tconst protocolMsg = content?.protocolMessage\n\tif(protocolMsg) {\n\t\tswitch (protocolMsg.type) {\n\t\tcase proto.Message.ProtocolMessage.Type.HISTORY_SYNC_NOTIFICATION:\n\t\t\tconst histNotification = protocolMsg.historySyncNotification!\n\t\t\tconst process = shouldProcessHistoryMsg\n\t\t\tconst isLatest = !creds.processedHistoryMessages?.length\n\n\t\t\tlogger?.info({\n\t\t\t\thistNotification,\n\t\t\t\tprocess,\n\t\t\t\tid: message.key.id,\n\t\t\t\tisLatest,\n\t\t\t}, 'got history notification')\n\n\t\t\tif(process) {\n\t\t\t\tev.emit('creds.update', {\n\t\t\t\t\tprocessedHistoryMessages: [\n\t\t\t\t\t\t...(creds.processedHistoryMessages || []),\n\t\t\t\t\t\t{ key: message.key, messageTimestamp: message.messageTimestamp }\n\t\t\t\t\t]\n\t\t\t\t})\n\n\t\t\t\tconst data = await downloadAndProcessHistorySyncNotification(\n\t\t\t\t\thistNotification,\n\t\t\t\t\toptions\n\t\t\t\t)\n\n\t\t\t\tev.emit('messaging-history.set', { ...data, isLatest })\n\t\t\t}\n\n\t\t\tbreak\n\t\tcase proto.Message.ProtocolMessage.Type.APP_STATE_SYNC_KEY_SHARE:\n\t\t\tconst keys = protocolMsg.appStateSyncKeyShare!.keys\n\t\t\tif(keys?.length) {\n\t\t\t\tlet newAppStateSyncKeyId = ''\n\t\t\t\tawait keyStore.transaction(\n\t\t\t\t\tasync() => {\n\t\t\t\t\t\tconst newKeys: string[] = []\n\t\t\t\t\t\tfor(const { keyData, keyId } of keys) {\n\t\t\t\t\t\t\tconst strKeyId = Buffer.from(keyId!.keyId!).toString('base64')\n\t\t\t\t\t\t\tnewKeys.push(strKeyId)\n\n\t\t\t\t\t\t\tawait keyStore.set({ 'app-state-sync-key': { [strKeyId]: keyData! } })\n\n\t\t\t\t\t\t\tnewAppStateSyncKeyId = strKeyId\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlogger?.info(\n\t\t\t\t\t\t\t{ newAppStateSyncKeyId, newKeys },\n\t\t\t\t\t\t\t'injecting new app state sync keys'\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t)\n\n\t\t\t\tev.emit('creds.update', { myAppStateKeyId: newAppStateSyncKeyId })\n\t\t\t} else {\n\t\t\t\tlogger?.info({ protocolMsg }, 'recv app state sync with 0 keys')\n\t\t\t}\n\n\t\t\tbreak\n\t\tcase proto.Message.ProtocolMessage.Type.REVOKE:\n\t\t\tev.emit('messages.update', [\n\t\t\t\t{\n\t\t\t\t\tkey: {\n\t\t\t\t\t\t...message.key,\n\t\t\t\t\t\tid: protocolMsg.key!.id\n\t\t\t\t\t},\n\t\t\t\t\tupdate: { message: null, messageStubType: WAMessageStubType.REVOKE, key: message.key }\n\t\t\t\t}\n\t\t\t])\n\t\t\tbreak\n\t\tcase proto.Message.ProtocolMessage.Type.EPHEMERAL_SETTING:\n\t\t\tObject.assign(chat, {\n\t\t\t\tephemeralSettingTimestamp: toNumber(message.messageTimestamp),\n\t\t\t\tephemeralExpiration: protocolMsg.ephemeralExpiration || null\n\t\t\t})\n\t\t\tbreak\n\t\t}\n\t} else if(content?.reactionMessage) {\n\t\tconst reaction: proto.IReaction = {\n\t\t\t...content.reactionMessage,\n\t\t\tkey: message.key,\n\t\t}\n\t\tev.emit('messages.reaction', [{\n\t\t\treaction,\n\t\t\tkey: content.reactionMessage.key!,\n\t\t}])\n\t} else if(message.messageStubType) {\n\t\tconst jid = message.key.remoteJid!\n\t\t//let actor = whatsappID (message.participant)\n\t\tlet participants: string[]\n\t\tconst emitParticipantsUpdate = (action: ParticipantAction) => (\n\t\t\tev.emit('group-participants.update', { id: jid, participants, action })\n\t\t)\n\t\tconst emitGroupUpdate = (update: Partial<GroupMetadata>) => {\n\t\t\tev.emit('groups.update', [{ id: jid, ...update }])\n\t\t}\n\n\t\tconst participantsIncludesMe = () => participants.find(jid => areJidsSameUser(meId, jid))\n\n\t\tswitch (message.messageStubType) {\n\t\tcase WAMessageStubType.GROUP_PARTICIPANT_LEAVE:\n\t\tcase WAMessageStubType.GROUP_PARTICIPANT_REMOVE:\n\t\t\tparticipants = message.messageStubParameters || []\n\t\t\temitParticipantsUpdate('remove')\n\t\t\t// mark the chat read only if you left the group\n\t\t\tif(participantsIncludesMe()) {\n\t\t\t\tchat.readOnly = true\n\t\t\t}\n\n\t\t\tbreak\n\t\tcase WAMessageStubType.GROUP_PARTICIPANT_ADD:\n\t\tcase WAMessageStubType.GROUP_PARTICIPANT_INVITE:\n\t\tcase WAMessageStubType.GROUP_PARTICIPANT_ADD_REQUEST_JOIN:\n\t\t\tparticipants = message.messageStubParameters || []\n\t\t\tif(participantsIncludesMe()) {\n\t\t\t\tchat.readOnly = false\n\t\t\t}\n\n\t\t\temitParticipantsUpdate('add')\n\t\t\tbreak\n\t\tcase WAMessageStubType.GROUP_PARTICIPANT_DEMOTE:\n\t\t\tparticipants = message.messageStubParameters || []\n\t\t\temitParticipantsUpdate('demote')\n\t\t\tbreak\n\t\tcase WAMessageStubType.GROUP_PARTICIPANT_PROMOTE:\n\t\t\tparticipants = message.messageStubParameters || []\n\t\t\temitParticipantsUpdate('promote')\n\t\t\tbreak\n\t\tcase WAMessageStubType.GROUP_CHANGE_ANNOUNCE:\n\t\t\tconst announceValue = message.messageStubParameters?.[0]\n\t\t\temitGroupUpdate({ announce: announceValue === 'true' || announceValue === 'on' })\n\t\t\tbreak\n\t\tcase WAMessageStubType.GROUP_CHANGE_RESTRICT:\n\t\t\tconst restrictValue = message.messageStubParameters?.[0]\n\t\t\temitGroupUpdate({ restrict: restrictValue === 'true' || restrictValue === 'on' })\n\t\t\tbreak\n\t\tcase WAMessageStubType.GROUP_CHANGE_SUBJECT:\n\t\t\tconst name = message.messageStubParameters?.[0]\n\t\t\tchat.name = name\n\t\t\temitGroupUpdate({ subject: name })\n\t\t\tbreak\n\t\tcase WAMessageStubType.GROUP_CHANGE_INVITE_LINK:\n\t\t\tconst code = message.messageStubParameters?.[0]\n\t\t\temitGroupUpdate({ inviteCode: code })\n\t\t\tbreak\n\t\t}\n\t} else if(content?.pollUpdateMessage) {\n\t\tconst creationMsgKey = content.pollUpdateMessage.pollCreationMessageKey!\n\t\t// we need to fetch the poll creation message to get the poll enc key\n\t\tconst pollMsg = await getMessage(creationMsgKey)\n\t\tif(pollMsg) {\n\t\t\tconst meIdNormalised = jidNormalizedUser(meId)\n\t\t\tconst pollCreatorJid = getKeyAuthor(creationMsgKey, meIdNormalised)\n\t\t\tconst voterJid = getKeyAuthor(message.key, meIdNormalised)\n\t\t\tconst pollEncKey = pollMsg.messageContextInfo?.messageSecret!\n\n\t\t\ttry {\n\t\t\t\tconst voteMsg = decryptPollVote(\n\t\t\t\t\tcontent.pollUpdateMessage.vote!,\n\t\t\t\t\t{\n\t\t\t\t\t\tpollEncKey,\n\t\t\t\t\t\tpollCreatorJid,\n\t\t\t\t\t\tpollMsgId: creationMsgKey.id!,\n\t\t\t\t\t\tvoterJid,\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tev.emit('messages.update', [\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: creationMsgKey,\n\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\tpollUpdates: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpollUpdateMessageKey: message.key,\n\t\t\t\t\t\t\t\t\tvote: voteMsg,\n\t\t\t\t\t\t\t\t\tsenderTimestampMs: message.messageTimestamp,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t])\n\t\t\t} catch(err) {\n\t\t\t\tlogger?.warn(\n\t\t\t\t\t{ err, creationMsgKey },\n\t\t\t\t\t'failed to decrypt poll vote'\n\t\t\t\t)\n\t\t\t}\n\t\t} else {\n\t\t\tlogger?.warn(\n\t\t\t\t{ creationMsgKey },\n\t\t\t\t'poll creation message not found, cannot decrypt update'\n\t\t\t)\n\t\t}\n\t}\n\n\tif(Object.keys(chat).length > 1) {\n\t\tev.emit('chats.update', [chat])\n\t}\n}\n\nexport default processMessage"]}