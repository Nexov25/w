{"version":3,"file":"signal.js","sourceRoot":"/","sources":["Utils/signal.ts"],"names":[],"mappings":"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","sourcesContent":["import { KEY_BUNDLE_TYPE } from '../Defaults'\nimport { SignalRepository } from '../Types'\nimport { AuthenticationCreds, AuthenticationState, KeyPair, SignalIdentity, SignalKeyStore, SignedKeyPair } from '../Types/Auth'\nimport { assertNodeErrorFree, BinaryNode, getBinaryNodeChild, getBinaryNodeChildBuffer, getBinaryNodeChildren, getBinaryNodeChildUInt, jidDecode, JidWithDevice, S_WHATSAPP_NET } from '../WABinary'\nimport { Curve, generateSignalPubKey } from './crypto'\nimport { encodeBigEndian } from './generics'\n\nexport const createSignalIdentity = (\n\twid: string,\n\taccountSignatureKey: Uint8Array\n): SignalIdentity => {\n\treturn {\n\t\tidentifier: { name: wid, deviceId: 0 },\n\t\tidentifierKey: generateSignalPubKey(accountSignatureKey)\n\t}\n}\n\nexport const getPreKeys = async({ get }: SignalKeyStore, min: number, limit: number) => {\n\tconst idList: string[] = []\n\tfor(let id = min; id < limit;id++) {\n\t\tidList.push(id.toString())\n\t}\n\n\treturn get('pre-key', idList)\n}\n\nexport const generateOrGetPreKeys = (creds: AuthenticationCreds, range: number) => {\n\tconst avaliable = creds.nextPreKeyId - creds.firstUnuploadedPreKeyId\n\tconst remaining = range - avaliable\n\tconst lastPreKeyId = creds.nextPreKeyId + remaining - 1\n\tconst newPreKeys: { [id: number]: KeyPair } = { }\n\tif(remaining > 0) {\n\t\tfor(let i = creds.nextPreKeyId;i <= lastPreKeyId;i++) {\n\t\t\tnewPreKeys[i] = Curve.generateKeyPair()\n\t\t}\n\t}\n\n\treturn {\n\t\tnewPreKeys,\n\t\tlastPreKeyId,\n\t\tpreKeysRange: [creds.firstUnuploadedPreKeyId, range] as const,\n\t}\n}\n\nexport const xmppSignedPreKey = (key: SignedKeyPair): BinaryNode => (\n\t{\n\t\ttag: 'skey',\n\t\tattrs: { },\n\t\tcontent: [\n\t\t\t{ tag: 'id', attrs: { }, content: encodeBigEndian(key.keyId, 3) },\n\t\t\t{ tag: 'value', attrs: { }, content: key.keyPair.public },\n\t\t\t{ tag: 'signature', attrs: { }, content: key.signature }\n\t\t]\n\t}\n)\n\nexport const xmppPreKey = (pair: KeyPair, id: number): BinaryNode => (\n\t{\n\t\ttag: 'key',\n\t\tattrs: { },\n\t\tcontent: [\n\t\t\t{ tag: 'id', attrs: { }, content: encodeBigEndian(id, 3) },\n\t\t\t{ tag: 'value', attrs: { }, content: pair.public }\n\t\t]\n\t}\n)\n\nexport const parseAndInjectE2ESessions = async(\n\tnode: BinaryNode,\n\trepository: SignalRepository\n) => {\n\tconst extractKey = (key: BinaryNode) => (\n\t\tkey ? ({\n\t\t\tkeyId: getBinaryNodeChildUInt(key, 'id', 3)!,\n\t\t\tpublicKey: generateSignalPubKey(getBinaryNodeChildBuffer(key, 'value')!)!,\n\t\t\tsignature: getBinaryNodeChildBuffer(key, 'signature')!,\n\t\t}) : undefined\n\t)\n\tconst nodes = getBinaryNodeChildren(getBinaryNodeChild(node, 'list'), 'user')\n\tfor(const node of nodes) {\n\t\tassertNodeErrorFree(node)\n\t}\n\n\tawait Promise.all(\n\t\tnodes.map(\n\t\t\tasync node => {\n\t\t\t\tconst signedKey = getBinaryNodeChild(node, 'skey')!\n\t\t\t\tconst key = getBinaryNodeChild(node, 'key')!\n\t\t\t\tconst identity = getBinaryNodeChildBuffer(node, 'identity')!\n\t\t\t\tconst jid = node.attrs.jid\n\t\t\t\tconst registrationId = getBinaryNodeChildUInt(node, 'registration', 4)\n\n\t\t\t\tawait repository.injectE2ESession({\n\t\t\t\t\tjid,\n\t\t\t\t\tsession: {\n\t\t\t\t\t\tregistrationId: registrationId!,\n\t\t\t\t\t\tidentityKey: generateSignalPubKey(identity),\n\t\t\t\t\t\tsignedPreKey: extractKey(signedKey)!,\n\t\t\t\t\t\tpreKey: extractKey(key)!\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t)\n\t)\n}\n\nexport const extractDeviceJids = (result: BinaryNode, myJid: string, excludeZeroDevices: boolean) => {\n\tconst { user: myUser, device: myDevice } = jidDecode(myJid)!\n\tconst extracted: JidWithDevice[] = []\n\tfor(const node of result.content as BinaryNode[]) {\n\t\tconst list = getBinaryNodeChild(node, 'list')?.content\n\t\tif(list && Array.isArray(list)) {\n\t\t\tfor(const item of list) {\n\t\t\t\tconst { user } = jidDecode(item.attrs.jid)!\n\t\t\t\tconst devicesNode = getBinaryNodeChild(item, 'devices')\n\t\t\t\tconst deviceListNode = getBinaryNodeChild(devicesNode, 'device-list')\n\t\t\t\tif(Array.isArray(deviceListNode?.content)) {\n\t\t\t\t\tfor(const { tag, attrs } of deviceListNode!.content) {\n\t\t\t\t\t\tconst device = +attrs.id\n\t\t\t\t\t\tif(\n\t\t\t\t\t\t\ttag === 'device' && // ensure the \"device\" tag\n\t\t\t\t\t\t\t(!excludeZeroDevices || device !== 0) && // if zero devices are not-excluded, or device is non zero\n\t\t\t\t\t\t\t(myUser !== user || myDevice !== device) && // either different user or if me user, not this device\n\t\t\t\t\t\t\t(device === 0 || !!attrs['key-index']) // ensure that \"key-index\" is specified for \"non-zero\" devices, produces a bad req otherwise\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\textracted.push({ user, device })\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn extracted\n}\n\n/**\n * get the next N keys for upload or processing\n * @param count number of pre-keys to get or generate\n */\nexport const getNextPreKeys = async({ creds, keys }: AuthenticationState, count: number) => {\n\tconst { newPreKeys, lastPreKeyId, preKeysRange } = generateOrGetPreKeys(creds, count)\n\n\tconst update: Partial<AuthenticationCreds> = {\n\t\tnextPreKeyId: Math.max(lastPreKeyId + 1, creds.nextPreKeyId),\n\t\tfirstUnuploadedPreKeyId: Math.max(creds.firstUnuploadedPreKeyId, lastPreKeyId + 1)\n\t}\n\n\tawait keys.set({ 'pre-key': newPreKeys })\n\n\tconst preKeys = await getPreKeys(keys, preKeysRange[0], preKeysRange[0] + preKeysRange[1])\n\n\treturn { update, preKeys }\n}\n\nexport const getNextPreKeysNode = async(state: AuthenticationState, count: number) => {\n\tconst { creds } = state\n\tconst { update, preKeys } = await getNextPreKeys(state, count)\n\n\tconst node: BinaryNode = {\n\t\ttag: 'iq',\n\t\tattrs: {\n\t\t\txmlns: 'encrypt',\n\t\t\ttype: 'set',\n\t\t\tto: S_WHATSAPP_NET,\n\t\t},\n\t\tcontent: [\n\t\t\t{ tag: 'registration', attrs: { }, content: encodeBigEndian(creds.registrationId) },\n\t\t\t{ tag: 'type', attrs: { }, content: KEY_BUNDLE_TYPE },\n\t\t\t{ tag: 'identity', attrs: { }, content: creds.signedIdentityKey.public },\n\t\t\t{ tag: 'list', attrs: { }, content: Object.keys(preKeys).map(k => xmppPreKey(preKeys[+k], +k)) },\n\t\t\txmppSignedPreKey(creds.signedPreKey)\n\t\t]\n\t}\n\n\treturn { update, node }\n}"]}