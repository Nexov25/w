{"version":3,"file":"lt-hash.js","sourceRoot":"/","sources":["Utils/lt-hash.ts"],"names":[],"mappings":";;;AAAA,qCAA+B;AAE/B;;;;GAIG;AAEH,MAAM,CAAC,GAAG,GAAG,CAAA;AAEb,MAAM,CAAC;IAIN,YAAY,CAAS;QACpB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA;IACd,CAAC;IACD,GAAG,CAAC,CAAC,EAAE,CAAC;QACP,IAAI,CAAC,GAAG,IAAI,CAAA;QACZ,KAAI,MAAM,IAAI,IAAI,CAAC,EAAE;YACpB,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;SACzB;QAED,OAAO,CAAC,CAAA;IACT,CAAC;IACD,QAAQ,CAAC,CAAC,EAAE,CAAC;QACZ,IAAI,CAAC,GAAG,IAAI,CAAA;QACZ,KAAI,MAAM,IAAI,IAAI,CAAC,EAAE;YACpB,CAAC,GAAG,CAAC,CAAC,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;SAC9B;QAED,OAAO,CAAC,CAAA;IACT,CAAC;IACD,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;QACtB,IAAI,CAAC,GAAG,IAAI,CAAA;QACZ,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;IAClC,CAAC;IACD,UAAU,CAAC,CAAC,EAAE,CAAC;QACd,IAAI,CAAC,GAAG,IAAI,CAAA;QACZ,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,IAAA,aAAI,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,MAAM,CAAA;QAC1E,OAAO,CAAC,CAAC,4BAA4B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;IAC/D,CAAC;IACD,eAAe,CAAC,CAAC,EAAE,CAAC;QACnB,IAAI,CAAC,GAAG,IAAI,CAAA;QAEZ,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,IAAA,aAAI,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,MAAM,CAAA;QAC1E,OAAO,CAAC,CAAC,4BAA4B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;IAC/D,CAAC;IACD,4BAA4B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;QACnC,MAAM,CAAC,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,EACrB,CAAC,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,EACnB,CAAC,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,EACjC,CAAC,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAA;QACvB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE;YACxC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;SAC7D;QAED,OAAO,CAAC,CAAA;IACT,CAAC;CACD;AACY,QAAA,sBAAsB,GAAG,IAAI,CAAC,CAAC,0BAA0B,CAAC,CAAA","sourcesContent":["import { hkdf } from './crypto'\n\n/**\n * LT Hash is a summation based hash algorithm that maintains the integrity of a piece of data\n * over a series of mutations. You can add/remove mutations and it'll return a hash equal to\n * if the same series of mutations was made sequentially.\n */\n\nconst o = 128\n\nclass d {\n\n\tsalt: string\n\n\tconstructor(e: string) {\n\t\tthis.salt = e\n\t}\n\tadd(e, t) {\n\t\tvar r = this\n\t\tfor(const item of t) {\n\t\t\te = r._addSingle(e, item)\n\t\t}\n\n\t\treturn e\n\t}\n\tsubtract(e, t) {\n\t\tvar r = this\n\t\tfor(const item of t) {\n\t\t\te = r._subtractSingle(e, item)\n\t\t}\n\n\t\treturn e\n\t}\n\tsubtractThenAdd(e, t, r) {\n\t\tvar n = this\n\t\treturn n.add(n.subtract(e, r), t)\n\t}\n\t_addSingle(e, t) {\n\t\tvar r = this\n\t\tconst n = new Uint8Array(hkdf(Buffer.from(t), o, { info: r.salt })).buffer\n\t\treturn r.performPointwiseWithOverflow(e, n, ((e, t) => e + t))\n\t}\n\t_subtractSingle(e, t) {\n\t\tvar r = this\n\n\t\tconst n = new Uint8Array(hkdf(Buffer.from(t), o, { info: r.salt })).buffer\n\t\treturn r.performPointwiseWithOverflow(e, n, ((e, t) => e - t))\n\t}\n\tperformPointwiseWithOverflow(e, t, r) {\n\t\tconst n = new DataView(e)\n\t\t  , i = new DataView(t)\n\t\t  , a = new ArrayBuffer(n.byteLength)\n\t\t  , s = new DataView(a)\n\t\tfor(let e = 0; e < n.byteLength; e += 2) {\n\t\t\ts.setUint16(e, r(n.getUint16(e, !0), i.getUint16(e, !0)), !0)\n\t\t}\n\n\t\treturn a\n\t}\n}\nexport const LT_HASH_ANTI_TAMPERING = new d('WhatsApp Patch Integrity')"]}