{"version":3,"file":"make-mutex.js","sourceRoot":"/","sources":["Utils/make-mutex.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAO,MAAM,SAAS,GAAG,GAAG,EAAE;IAC7B,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,EAAkB,CAAA;IAE5C,IAAI,WAAuC,CAAA;IAE3C,OAAO;QACN,KAAK,CAAI,IAA0B;YAClC,IAAI,GAAG,CAAC,GAAQ,EAAE;gBACjB,yCAAyC;gBACzC,gEAAgE;gBAChE,IAAI;oBACH,MAAM,IAAI,CAAA;iBACV;gBAAC,WAAK,GAAG;gBAEV,IAAI;oBACH,2BAA2B;oBAC3B,MAAM,MAAM,GAAG,MAAM,IAAI,EAAE,CAAA;oBAC3B,OAAO,MAAM,CAAA;iBACb;wBAAS;oBACT,YAAY,CAAC,WAAW,CAAC,CAAA;iBACzB;YACF,CAAC,CAAA,CAAC,EAAE,CAAA;YACJ,2EAA2E;YAC3E,4DAA4D;YAC5D,OAAO,IAAI,CAAA;QACZ,CAAC;KACD,CAAA;AACF,CAAC,CAAA;AA3BY,QAAA,SAAS,aA2BrB;AAIM,MAAM,cAAc,GAAG,GAAG,EAAE;IAClC,MAAM,GAAG,GAA4B,EAAE,CAAA;IAEvC,OAAO;QACN,KAAK,CAAI,GAAW,EAAE,IAA0B;YAC/C,IAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACb,GAAG,CAAC,GAAG,CAAC,GAAG,IAAA,iBAAS,GAAE,CAAA;aACtB;YAED,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAC5B,CAAC;KACD,CAAA;AACF,CAAC,CAAA;AAZY,QAAA,cAAc,kBAY1B","sourcesContent":["export const makeMutex = () => {\n\tlet task = Promise.resolve() as Promise<any>\n\n\tlet taskTimeout: NodeJS.Timeout | undefined\n\n\treturn {\n\t\tmutex<T>(code: () => Promise<T> | T): Promise<T> {\n\t\t\ttask = (async() => {\n\t\t\t\t// wait for the previous task to complete\n\t\t\t\t// if there is an error, we swallow so as to not block the queue\n\t\t\t\ttry {\n\t\t\t\t\tawait task\n\t\t\t\t} catch{ }\n\n\t\t\t\ttry {\n\t\t\t\t\t// execute the current task\n\t\t\t\t\tconst result = await code()\n\t\t\t\t\treturn result\n\t\t\t\t} finally {\n\t\t\t\t\tclearTimeout(taskTimeout)\n\t\t\t\t}\n\t\t\t})()\n\t\t\t// we replace the existing task, appending the new piece of execution to it\n\t\t\t// so the next task will have to wait for this one to finish\n\t\t\treturn task\n\t\t},\n\t}\n}\n\nexport type Mutex = ReturnType<typeof makeMutex>\n\nexport const makeKeyedMutex = () => {\n\tconst map: { [id: string]: Mutex } = {}\n\n\treturn {\n\t\tmutex<T>(key: string, task: () => Promise<T> | T): Promise<T> {\n\t\t\tif(!map[key]) {\n\t\t\t\tmap[key] = makeMutex()\n\t\t\t}\n\n\t\t\treturn map[key].mutex(task)\n\t\t}\n\t}\n}"]}