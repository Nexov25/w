{"version":3,"file":"link-preview.js","sourceRoot":"/","sources":["Utils/link-preview.ts"],"names":[],"mappings":"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","sourcesContent":["import { AxiosRequestConfig } from 'axios'\nimport { Logger } from 'pino'\nimport { WAMediaUploadFunction, WAUrlInfo } from '../Types'\nimport { prepareWAMessageMedia } from './messages'\nimport { extractImageThumb, getHttpStream } from './messages-media'\n\nconst THUMBNAIL_WIDTH_PX = 192\n\n/** Fetches an image and generates a thumbnail for it */\nconst getCompressedJpegThumbnail = async(\n\turl: string,\n\t{ thumbnailWidth, fetchOpts }: URLGenerationOptions\n) => {\n\tconst stream = await getHttpStream(url, fetchOpts)\n\tconst result = await extractImageThumb(stream, thumbnailWidth)\n\treturn result\n}\n\nexport type URLGenerationOptions = {\n\tthumbnailWidth: number\n\tfetchOpts: {\n\t\t/** Timeout in ms */\n\t\ttimeout: number\n\t\tproxyUrl?: string\n\t\theaders?: AxiosRequestConfig<{}>['headers']\n\t}\n\tuploadImage?: WAMediaUploadFunction\n\tlogger?: Logger\n}\n\n/**\n * Given a piece of text, checks for any URL present, generates link preview for the same and returns it\n * Return undefined if the fetch failed or no URL was found\n * @param text first matched URL in text\n * @returns the URL info required to generate link preview\n */\nexport const getUrlInfo = async(\n\ttext: string,\n\topts: URLGenerationOptions = {\n\t\tthumbnailWidth: THUMBNAIL_WIDTH_PX,\n\t\tfetchOpts: { timeout: 3000 }\n\t},\n): Promise<WAUrlInfo | undefined> => {\n\ttry {\n\t\t// retries\n\t\tconst retries = 0\n\t\tconst maxRetry = 5\n\n\t\tconst { getLinkPreview } = await import('link-preview-js')\n\t\tlet previewLink = text\n\t\tif(!text.startsWith('https://') && !text.startsWith('http://')) {\n\t\t\tpreviewLink = 'https://' + previewLink\n\t\t}\n\n\t\tconst info = await getLinkPreview(previewLink, {\n\t\t\t...opts.fetchOpts,\n\t\t\tfollowRedirects: 'manual',\n\t\t\thandleRedirects: (baseURL: string, forwardedURL: string) => {\n\t\t\t\tconst urlObj = new URL(baseURL)\n\t\t\t\tconst forwardedURLObj = new URL(forwardedURL)\n\t\t\t\tif(retries >= maxRetry) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\n\t\t\t\tif(\n\t\t\t\t\tforwardedURLObj.hostname === urlObj.hostname\n\t\t\t\t\t|| forwardedURLObj.hostname === 'www.' + urlObj.hostname\n\t\t\t\t\t|| 'www.' + forwardedURLObj.hostname === urlObj.hostname\n\t\t\t\t) {\n\t\t\t\t\tretries + 1\n\t\t\t\t\treturn true\n\t\t\t\t} else {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t},\n\t\t\theaders: opts.fetchOpts as {}\n\t\t})\n\t\tif(info && 'title' in info && info.title) {\n\t\t\tconst [image] = info.images\n\n\t\t\tconst urlInfo: WAUrlInfo = {\n\t\t\t\t'canonical-url': info.url,\n\t\t\t\t'matched-text': text,\n\t\t\t\ttitle: info.title,\n\t\t\t\tdescription: info.description,\n\t\t\t\toriginalThumbnailUrl: image\n\t\t\t}\n\n\t\t\tif(opts.uploadImage) {\n\t\t\t\tconst { imageMessage } = await prepareWAMessageMedia(\n\t\t\t\t\t{ image: { url: image } },\n\t\t\t\t\t{\n\t\t\t\t\t\tupload: opts.uploadImage,\n\t\t\t\t\t\tmediaTypeOverride: 'thumbnail-link',\n\t\t\t\t\t\toptions: opts.fetchOpts\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\turlInfo.jpegThumbnail = imageMessage?.jpegThumbnail\n\t\t\t\t\t? Buffer.from(imageMessage.jpegThumbnail)\n\t\t\t\t\t: undefined\n\t\t\t\turlInfo.highQualityThumbnail = imageMessage || undefined\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\turlInfo.jpegThumbnail = image\n\t\t\t\t\t\t? (await getCompressedJpegThumbnail(image, opts)).buffer\n\t\t\t\t\t\t: undefined\n\t\t\t\t} catch(error) {\n\t\t\t\t\topts.logger?.debug(\n\t\t\t\t\t\t{ err: error.stack, url: previewLink },\n\t\t\t\t\t\t'error in generating thumbnail'\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn urlInfo\n\t\t}\n\t} catch(error) {\n\t\tif(!error.message.includes('receive a valid')) {\n\t\t\tthrow error\n\t\t}\n\t}\n}"]}