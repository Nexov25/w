{"version":3,"file":"use-mongodb-auth.js","sourceRoot":"/","sources":["Utils/use-mongodb-auth.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Collection } from 'mongodb'\nimport type { Logger } from 'pino'\nimport { proto } from '../../WAProto'\nimport {\n\tAuthenticationCreds,\n\tAuthenticationState,\n\tSignalDataTypeMap,\n} from '../Types'\nimport { initAuthCreds } from './auth-utils'\nimport { BufferJSON } from './generics'\n\nexport const useMongoDBAuthState = async(\n\tcollection: Collection<{ id: string } & any>,\n\tlogger?: Logger\n): Promise<{ state: AuthenticationState, saveCreds: () => Promise<void>, removeCreds: () => Promise<void> }> => {\n\tconst writeData = async(id: string, data: AuthenticationCreds) => {\n\t\tlogger?.debug({ id }, 'writing data')\n\n\t\tawait collection.replaceOne(\n\t\t\t{ id },\n\t\t\t{ id, ...JSON.parse(JSON.stringify(data, BufferJSON.replacer)) }, // complete replace instead of partial\n\t\t\t{ upsert: true }\n\t\t)\n\t}\n\n\tconst readData = async(id: string): Promise<any | null> => {\n\t\tlogger?.debug({ id }, 'reading data')\n\n\t\tconst data = await collection.findOne(\n\t\t\t{ id },\n\t\t\t{ projection: { _id: 0, id: 0 } }\n\t\t)\n\n\t\treturn data ? JSON.parse(JSON.stringify(data), BufferJSON.reviver) : null\n\t}\n\n\tconst removeData = async(id: string) => {\n\t\tlogger?.debug({ id }, 'removing data')\n\t\tawait collection.deleteOne({ id })\n\t}\n\n\tconst creds: AuthenticationCreds =\n    (await readData('creds')) || initAuthCreds()\n\treturn {\n\t\tstate: {\n\t\t\tcreds,\n\t\t\tkeys: {\n\t\t\t\tget: async(type, ids: string[]) => {\n\t\t\t\t\tlogger?.debug({ ids, type }, 'getting data')\n\t\t\t\t\tconst data: { [_: string]: SignalDataTypeMap[typeof type] } = {}\n\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\tids.map(async(id) => {\n\t\t\t\t\t\t\tlet value = await readData(`${type}-${id}`)\n\t\t\t\t\t\t\tif(type === 'app-state-sync-key' && value) {\n\t\t\t\t\t\t\t\tvalue = proto.Message.AppStateSyncKeyData.fromObject(value)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdata[id] = value\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t\treturn data\n\t\t\t\t},\n\t\t\t\tset: async(data) => {\n\t\t\t\t\tlogger?.debug({ data }, 'setting data')\n\t\t\t\t\tconst tasks: Promise<void>[] = []\n\t\t\t\t\tfor(const category in data) {\n\t\t\t\t\t\tfor(const id in data[category]) {\n\t\t\t\t\t\t\tconst value = data[category][id]\n\t\t\t\t\t\t\tconst key = `${category}-${id}`\n\t\t\t\t\t\t\ttasks.push(value ? writeData(key, value) : removeData(key))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tawait Promise.all(tasks)\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tsaveCreds: async() => {\n\t\t\tlogger?.debug({ creds }, 'saving creds')\n\t\t\tawait writeData('creds', creds)\n\t\t},\n\n\t\tremoveCreds: async() => {\n\t\t\tlogger?.debug({ creds }, 'removing creds')\n\t\t\tawait removeData('creds')\n\t\t}\n\t}\n}\n"]}