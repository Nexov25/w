{"version":3,"file":"messages-media.js","sourceRoot":"/","sources":["Utils/messages-media.ts"],"names":[],"mappings":"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","sourcesContent":["import { Boom } from '@hapi/boom'\nimport { AxiosRequestConfig } from 'axios'\nimport axios from 'axios'\nimport { exec } from 'child_process'\nimport * as Crypto from 'crypto'\nimport { once } from 'events'\nimport { createReadStream, createWriteStream, promises as fs, WriteStream } from 'fs'\nimport type { IAudioMetadata } from 'music-metadata'\nimport { tmpdir } from 'os'\nimport { join } from 'path'\nimport type { Logger } from 'pino'\nimport { Readable, Transform } from 'stream'\nimport { URL } from 'url'\nimport { proto } from '../../WAProto'\nimport { DEFAULT_ORIGIN, MEDIA_HKDF_KEY_MAPPING, MEDIA_PATH_MAP } from '../Defaults'\nimport { BaileysEventMap, DownloadableMessage, MediaConnInfo, MediaDecryptionKeyInfo, MediaType, MessageType, SocketConfig, WAGenericMediaMessage, WAMediaUpload, WAMediaUploadFunction, WAMessageContent } from '../Types'\nimport { BinaryNode, getBinaryNodeChild, getBinaryNodeChildBuffer, jidNormalizedUser } from '../WABinary'\nimport { aesDecryptGCM, aesEncryptGCM, hkdf } from './crypto'\nimport { generateMessageID } from './generics'\n\nconst getTmpFilesDirectory = () => tmpdir()\n\nconst getImageProcessingLibrary = async() => {\n\tconst [_jimp, sharp] = await Promise.all([\n\t\t(async() => {\n\t\t\tconst jimp = await (\n\t\t\t\timport('jimp')\n\t\t\t\t\t.catch(() => { })\n\t\t\t)\n\t\t\treturn jimp\n\t\t})(),\n\t\t(async() => {\n\t\t\tconst sharp = await (\n\t\t\t\timport('sharp')\n\t\t\t\t\t.catch(() => { })\n\t\t\t)\n\t\t\treturn sharp\n\t\t})()\n\t])\n\n\tif(sharp) {\n\t\treturn { sharp }\n\t}\n\n\tconst jimp = _jimp?.default || _jimp\n\tif(jimp) {\n\t\treturn { jimp }\n\t}\n\n\tthrow new Boom('No image processing library available')\n}\n\nexport const hkdfInfoKey = (type: MediaType) => {\n\tconst hkdfInfo = MEDIA_HKDF_KEY_MAPPING[type]\n\treturn `WhatsApp ${hkdfInfo} Keys`\n}\n\n/** generates all the keys required to encrypt/decrypt & sign a media message */\nexport function getMediaKeys(buffer: Uint8Array | string | null | undefined, mediaType: MediaType): MediaDecryptionKeyInfo {\n\tif(!buffer) {\n\t\tthrow new Boom('Cannot derive from empty media key')\n\t}\n\n\tif(typeof buffer === 'string') {\n\t\tbuffer = Buffer.from(buffer.replace('data:;base64,', ''), 'base64')\n\t}\n\n\t// expand using HKDF to 112 bytes, also pass in the relevant app info\n\tconst expandedMediaKey = hkdf(buffer, 112, { info: hkdfInfoKey(mediaType) })\n\treturn {\n\t\tiv: expandedMediaKey.slice(0, 16),\n\t\tcipherKey: expandedMediaKey.slice(16, 48),\n\t\tmacKey: expandedMediaKey.slice(48, 80),\n\t}\n}\n\n/** Extracts video thumb using FFMPEG */\nconst extractVideoThumb = async(\n\tpath: string,\n\tdestPath: string,\n\ttime: string,\n\tsize: { width: number, height: number },\n) => new Promise<void>((resolve, reject) => {\n    \tconst cmd = `ffmpeg -ss ${time} -i ${path} -y -vf scale=${size.width}:-1 -vframes 1 -f image2 ${destPath}`\n    \texec(cmd, (err) => {\n    \t\tif(err) {\n\t\t\treject(err)\n\t\t} else {\n\t\t\tresolve()\n\t\t}\n    \t})\n})\n\nexport const extractImageThumb = async(bufferOrFilePath: Readable | Buffer | string, width = 32) => {\n\tif(bufferOrFilePath instanceof Readable) {\n\t\tbufferOrFilePath = await toBuffer(bufferOrFilePath)\n\t}\n\n\tconst lib = await getImageProcessingLibrary()\n\tif('sharp' in lib && typeof lib.sharp?.default === 'function') {\n\t\tconst img = lib.sharp.default(bufferOrFilePath)\n\t\tconst dimensions = await img.metadata()\n\n\t\tconst buffer = await img\n\t\t\t.resize(width)\n\t\t\t.jpeg({ quality: 50 })\n\t\t\t.toBuffer()\n\t\treturn {\n\t\t\tbuffer,\n\t\t\toriginal: {\n\t\t\t\twidth: dimensions.width,\n\t\t\t\theight: dimensions.height,\n\t\t\t},\n\t\t}\n\t} else if('jimp' in lib && typeof lib.jimp?.read === 'function') {\n\t\tconst { read, MIME_JPEG, RESIZE_BILINEAR, AUTO } = lib.jimp\n\n\t\tconst jimp = await read(bufferOrFilePath as any)\n\t\tconst dimensions = {\n\t\t\twidth: jimp.getWidth(),\n\t\t\theight: jimp.getHeight()\n\t\t}\n\t\tconst buffer = await jimp\n\t\t\t.quality(50)\n\t\t\t.resize(width, AUTO, RESIZE_BILINEAR)\n\t\t\t.getBufferAsync(MIME_JPEG)\n\t\treturn {\n\t\t\tbuffer,\n\t\t\toriginal: dimensions\n\t\t}\n\t} else {\n\t\tthrow new Boom('No image processing library available')\n\t}\n}\n\nexport const encodeBase64EncodedStringForUpload = (b64: string) => (\n\tencodeURIComponent(\n\t\tb64\n\t\t\t.replace(/\\+/g, '-')\n\t\t\t.replace(/\\//g, '_')\n\t\t\t.replace(/\\=+$/, '')\n\t)\n)\n\nexport const generateProfilePicture = async(mediaUpload: WAMediaUpload) => {\n\tlet bufferOrFilePath: Buffer | string\n\tif(Buffer.isBuffer(mediaUpload)) {\n\t\tbufferOrFilePath = mediaUpload\n\t} else if('url' in mediaUpload) {\n\t\tbufferOrFilePath = mediaUpload.url.toString()\n\t} else {\n\t\tbufferOrFilePath = await toBuffer(mediaUpload.stream)\n\t}\n\n\tconst lib = await getImageProcessingLibrary()\n\tlet img: Promise<Buffer>\n\tif('sharp' in lib && typeof lib.sharp?.default === 'function') {\n\t\timg = lib.sharp.default(bufferOrFilePath)\n\t\t\t.resize(640, 640)\n\t\t\t.jpeg({\n\t\t\t\tquality: 50,\n\t\t\t})\n\t\t\t.toBuffer()\n\t} else if('jimp' in lib && typeof lib.jimp?.read === 'function') {\n\t\tconst { read, MIME_JPEG, RESIZE_BILINEAR } = lib.jimp\n\t\tconst jimp = await read(bufferOrFilePath as any)\n\t\tconst min = Math.min(jimp.getWidth(), jimp.getHeight())\n\t\tconst cropped = jimp.crop(0, 0, min, min)\n\n\t\timg = cropped\n\t\t\t.quality(50)\n\t\t\t.resize(640, 640, RESIZE_BILINEAR)\n\t\t\t.getBufferAsync(MIME_JPEG)\n\t} else {\n\t\tthrow new Boom('No image processing library available')\n\t}\n\n\treturn {\n\t\timg: await img,\n\t}\n}\n\n/** gets the SHA256 of the given media message */\nexport const mediaMessageSHA256B64 = (message: WAMessageContent) => {\n\tconst media = Object.values(message)[0] as WAGenericMediaMessage\n\treturn media?.fileSha256 && Buffer.from(media.fileSha256).toString ('base64')\n}\n\nexport async function getAudioDuration(buffer: Buffer | string | Readable) {\n\tconst musicMetadata = await import('music-metadata')\n\tlet metadata: IAudioMetadata\n\tif(Buffer.isBuffer(buffer)) {\n\t\tmetadata = await musicMetadata.parseBuffer(buffer, undefined, { duration: true })\n\t} else if(typeof buffer === 'string') {\n\t\tconst rStream = createReadStream(buffer)\n\t\ttry {\n\t\t\tmetadata = await musicMetadata.parseStream(rStream, undefined, { duration: true })\n\t\t} finally {\n\t\t\trStream.destroy()\n\t\t}\n\t} else {\n\t\tmetadata = await musicMetadata.parseStream(buffer, undefined, { duration: true })\n\t}\n\n\treturn metadata.format.duration\n}\n\n/**\n  referenced from and modifying https://github.com/wppconnect-team/wa-js/blob/main/src/chat/functions/prepareAudioWaveform.ts\n */\nexport async function getAudioWaveform(buffer: Buffer | string | Readable, logger?: Logger) {\n\ttry {\n\t\tconst audioDecode = (...args) => import('audio-decode').then(({ default: audioDecode }) => audioDecode(...args))\n\t\tlet audioData: Buffer\n\t\tif(Buffer.isBuffer(buffer)) {\n\t\t\taudioData = buffer\n\t\t} else if(typeof buffer === 'string') {\n\t\t\tconst rStream = createReadStream(buffer)\n\t\t\taudioData = await toBuffer(rStream)\n\t\t} else {\n\t\t\taudioData = await toBuffer(buffer)\n\t\t}\n\n\t\tconst audioBuffer = await audioDecode(audioData)\n\n\t\tconst rawData = audioBuffer.getChannelData(0) // We only need to work with one channel of data\n\t\tconst samples = 64 // Number of samples we want to have in our final data set\n\t\tconst blockSize = Math.floor(rawData.length / samples) // the number of samples in each subdivision\n\t\tconst filteredData: number[] = []\n\t\tfor(let i = 0; i < samples; i++) {\n\t\t  \tconst blockStart = blockSize * i // the location of the first sample in the block\n\t\t  \tlet sum = 0\n\t\t  \tfor(let j = 0; j < blockSize; j++) {\n\t\t\t\tsum = sum + Math.abs(rawData[blockStart + j]) // find the sum of all the samples in the block\n\t\t\t}\n\n\t\t\tfilteredData.push(sum / blockSize) // divide the sum by the block size to get the average\n\t\t}\n\n\t\t// This guarantees that the largest data point will be set to 1, and the rest of the data will scale proportionally.\n\t\tconst multiplier = Math.pow(Math.max(...filteredData), -1)\n\t\tconst normalizedData = filteredData.map((n) => n * multiplier)\n\n\t\t// Generate waveform like WhatsApp\n\t\tconst waveform = new Uint8Array(\n\t\t\tnormalizedData.map((n) => Math.floor(100 * n))\n\t\t)\n\n\t\treturn waveform\n\t} catch(e) {\n\t\tlogger?.debug('Failed to generate waveform: ' + e)\n\t}\n}\n\n\nexport const toReadable = (buffer: Buffer) => {\n\tconst readable = new Readable({ read: () => {} })\n\treadable.push(buffer)\n\treadable.push(null)\n\treturn readable\n}\n\nexport const toBuffer = async(stream: Readable) => {\n\tconst chunks: Buffer[] = []\n\tfor await (const chunk of stream) {\n\t\tchunks.push(chunk)\n\t}\n\n\tstream.destroy()\n\treturn Buffer.concat(chunks)\n}\n\nexport const getStream = async(item: WAMediaUpload, opts?: AxiosRequestConfig) => {\n\tif(Buffer.isBuffer(item)) {\n\t\treturn { stream: toReadable(item), type: 'buffer' } as const\n\t}\n\n\tif('stream' in item) {\n\t\treturn { stream: item.stream, type: 'readable' } as const\n\t}\n\n\tif(item.url.toString().startsWith('http://') || item.url.toString().startsWith('https://')) {\n\t\treturn { stream: await getHttpStream(item.url, opts), type: 'remote' } as const\n\t}\n\n\treturn { stream: createReadStream(item.url), type: 'file' } as const\n}\n\n/** generates a thumbnail for a given media, if required */\nexport async function generateThumbnail(\n\tfile: string,\n\tmediaType: 'video' | 'image',\n\toptions: {\n        logger?: Logger\n    }\n) {\n\tlet thumbnail: string | undefined\n\tlet originalImageDimensions: { width: number, height: number } | undefined\n\tif(mediaType === 'image') {\n\t\tconst { buffer, original } = await extractImageThumb(file)\n\t\tthumbnail = buffer.toString('base64')\n\t\tif(original.width && original.height) {\n\t\t\toriginalImageDimensions = {\n\t\t\t\twidth: original.width,\n\t\t\t\theight: original.height,\n\t\t\t}\n\t\t}\n\t} else if(mediaType === 'video') {\n\t\tconst imgFilename = join(getTmpFilesDirectory(), generateMessageID() + '.jpg')\n\t\ttry {\n\t\t\tawait extractVideoThumb(file, imgFilename, '00:00:00', { width: 32, height: 32 })\n\t\t\tconst buff = await fs.readFile(imgFilename)\n\t\t\tthumbnail = buff.toString('base64')\n\n\t\t\tawait fs.unlink(imgFilename)\n\t\t} catch(err) {\n\t\t\toptions.logger?.debug('could not generate video thumb: ' + err)\n\t\t}\n\t}\n\n\treturn {\n\t\tthumbnail,\n\t\toriginalImageDimensions\n\t}\n}\n\nexport const getHttpStream = async(url: string|URL, options: AxiosRequestConfig & { isStream?: true } = {}): Promise<Readable> => {\n\tconst response = await axios.get(typeof url === 'string' ? url : url.toString(), { ...options, responseType: 'stream' })\n\treturn response.data\n}\n\ntype EncryptedStreamOptions = {\n\tsaveOriginalFileIfRequired?: boolean\n\tlogger?: Logger\n\topts?: AxiosRequestConfig\n}\n\nexport const encryptedStream = async(\n\tmedia: WAMediaUpload,\n\tmediaType: MediaType,\n\t{ logger, saveOriginalFileIfRequired, opts }: EncryptedStreamOptions = {}\n) => {\n\tconst { stream, type } = await getStream(media, opts)\n\n\tlogger?.debug('fetched media stream')\n\n\tconst mediaKey = Crypto.randomBytes(32)\n\tconst { cipherKey, iv, macKey } = getMediaKeys(mediaKey, mediaType)\n\tconst encWriteStream = new Readable({ read: () => {} })\n\n\tlet bodyPath: string | undefined\n\tlet writeStream: WriteStream | undefined\n\tlet didSaveToTmpPath = false\n\tif(type === 'file') {\n\t\tbodyPath = (media as any).url\n\t} else if(saveOriginalFileIfRequired) {\n\t\tbodyPath = join(getTmpFilesDirectory(), mediaType + generateMessageID())\n\t\twriteStream = createWriteStream(bodyPath)\n\t\tdidSaveToTmpPath = true\n\t}\n\n\tlet fileLength = 0\n\tconst aes = Crypto.createCipheriv('aes-256-cbc', cipherKey, iv)\n\tlet hmac = Crypto.createHmac('sha256', macKey!).update(iv)\n\tlet sha256Plain = Crypto.createHash('sha256')\n\tlet sha256Enc = Crypto.createHash('sha256')\n\n\ttry {\n\t\tfor await (const data of stream) {\n\t\t\tfileLength += data.length\n\n\t\t\tif(\n\t\t\t\ttype === 'remote'\n\t\t\t\t&& opts?.maxContentLength\n\t\t\t\t&& fileLength + data.length > opts.maxContentLength\n\t\t\t) {\n\t\t\t\tthrow new Boom(\n\t\t\t\t\t`content length exceeded when encrypting \"${type}\"`,\n\t\t\t\t\t{\n\t\t\t\t\t\tdata: { media, type }\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tsha256Plain = sha256Plain.update(data)\n\t\t\tif(writeStream) {\n\t\t\t\tif(!writeStream.write(data)) {\n\t\t\t\t\tawait once(writeStream, 'drain')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tonChunk(aes.update(data))\n\t\t}\n\n\t\tonChunk(aes.final())\n\n\t\tconst mac = hmac.digest().slice(0, 10)\n\t\tsha256Enc = sha256Enc.update(mac)\n\n\t\tconst fileSha256 = sha256Plain.digest()\n\t\tconst fileEncSha256 = sha256Enc.digest()\n\n\t\tencWriteStream.push(mac)\n\t\tencWriteStream.push(null)\n\n\t\twriteStream?.end()\n\t\tstream.destroy()\n\n\t\tlogger?.debug('encrypted data successfully')\n\n\t\treturn {\n\t\t\tmediaKey,\n\t\t\tencWriteStream,\n\t\t\tbodyPath,\n\t\t\tmac,\n\t\t\tfileEncSha256,\n\t\t\tfileSha256,\n\t\t\tfileLength,\n\t\t\tdidSaveToTmpPath\n\t\t}\n\t} catch(error) {\n\t\t// destroy all streams with error\n\t\tencWriteStream.destroy()\n\t\twriteStream?.destroy()\n\t\taes.destroy()\n\t\thmac.destroy()\n\t\tsha256Plain.destroy()\n\t\tsha256Enc.destroy()\n\t\tstream.destroy()\n\n\t\tif(didSaveToTmpPath) {\n\t\t\ttry {\n\t\t\t\tawait fs.unlink(bodyPath!)\n\t\t\t} catch(err) {\n\t\t\t\tlogger?.error({ err }, 'failed to save to tmp path')\n\t\t\t}\n\t\t}\n\n\t\tthrow error\n\t}\n\n\tfunction onChunk(buff: Buffer) {\n\t\tsha256Enc = sha256Enc.update(buff)\n\t\thmac = hmac.update(buff)\n\t\tencWriteStream.push(buff)\n\t}\n}\n\nconst DEF_HOST = 'mmg.whatsapp.net'\nconst AES_CHUNK_SIZE = 16\n\nconst toSmallestChunkSize = (num: number) => {\n\treturn Math.floor(num / AES_CHUNK_SIZE) * AES_CHUNK_SIZE\n}\n\nexport type MediaDownloadOptions = {\n    startByte?: number\n    endByte?: number\n\toptions?: AxiosRequestConfig<any>\n}\n\nexport const getUrlFromDirectPath = (directPath: string) => `https://${DEF_HOST}${directPath}`\n\nexport const downloadContentFromMessage = (\n\t{ mediaKey, directPath, url }: DownloadableMessage,\n\ttype: MediaType,\n\topts: MediaDownloadOptions = { }\n) => {\n\tconst downloadUrl = url || getUrlFromDirectPath(directPath!)\n\tconst keys = getMediaKeys(mediaKey, type)\n\n\treturn downloadEncryptedContent(downloadUrl, keys, opts)\n}\n\n/**\n * Decrypts and downloads an AES256-CBC encrypted file given the keys.\n * Assumes the SHA256 of the plaintext is appended to the end of the ciphertext\n * */\nexport const downloadEncryptedContent = async(\n\tdownloadUrl: string,\n\t{ cipherKey, iv }: MediaDecryptionKeyInfo,\n\t{ startByte, endByte, options }: MediaDownloadOptions = { }\n) => {\n\tlet bytesFetched = 0\n\tlet startChunk = 0\n\tlet firstBlockIsIV = false\n\t// if a start byte is specified -- then we need to fetch the previous chunk as that will form the IV\n\tif(startByte) {\n\t\tconst chunk = toSmallestChunkSize(startByte || 0)\n\t\tif(chunk) {\n\t\t\tstartChunk = chunk - AES_CHUNK_SIZE\n\t\t\tbytesFetched = chunk\n\n\t\t\tfirstBlockIsIV = true\n\t\t}\n\t}\n\n\tconst endChunk = endByte ? toSmallestChunkSize(endByte || 0) + AES_CHUNK_SIZE : undefined\n\n\tconst headers: AxiosRequestConfig['headers'] = {\n\t\t...options?.headers || { },\n\t\tOrigin: DEFAULT_ORIGIN,\n\t}\n\tif(startChunk || endChunk) {\n\t\theaders.Range = `bytes=${startChunk}-`\n\t\tif(endChunk) {\n\t\t\theaders.Range += endChunk\n\t\t}\n\t}\n\n\t// download the message\n\tconst fetched = await getHttpStream(\n\t\tdownloadUrl,\n\t\t{\n\t\t\t...options || { },\n\t\t\theaders,\n\t\t\tmaxBodyLength: Infinity,\n\t\t\tmaxContentLength: Infinity,\n\t\t}\n\t)\n\n\tlet remainingBytes = Buffer.from([])\n\n\tlet aes: Crypto.Decipher\n\n\tconst pushBytes = (bytes: Buffer, push: (bytes: Buffer) => void) => {\n\t\tif(startByte || endByte) {\n\t\t\tconst start = bytesFetched >= startByte! ? undefined : Math.max(startByte! - bytesFetched, 0)\n\t\t\tconst end = bytesFetched + bytes.length < endByte! ? undefined : Math.max(endByte! - bytesFetched, 0)\n\n\t\t\tpush(bytes.slice(start, end))\n\n\t\t\tbytesFetched += bytes.length\n\t\t} else {\n\t\t\tpush(bytes)\n\t\t}\n\t}\n\n\tconst output = new Transform({\n\t\ttransform(chunk, _, callback) {\n\t\t\tlet data = Buffer.concat([remainingBytes, chunk])\n\n\t\t\tconst decryptLength = toSmallestChunkSize(data.length)\n\t\t\tremainingBytes = data.slice(decryptLength)\n\t\t\tdata = data.slice(0, decryptLength)\n\n\t\t\tif(!aes) {\n\t\t\t\tlet ivValue = iv\n\t\t\t\tif(firstBlockIsIV) {\n\t\t\t\t\tivValue = data.slice(0, AES_CHUNK_SIZE)\n\t\t\t\t\tdata = data.slice(AES_CHUNK_SIZE)\n\t\t\t\t}\n\n\t\t\t\taes = Crypto.createDecipheriv('aes-256-cbc', cipherKey, ivValue)\n\t\t\t\t// if an end byte that is not EOF is specified\n\t\t\t\t// stop auto padding (PKCS7) -- otherwise throws an error for decryption\n\t\t\t\tif(endByte) {\n\t\t\t\t\taes.setAutoPadding(false)\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tpushBytes(aes.update(data), b => this.push(b))\n\t\t\t\tcallback()\n\t\t\t} catch(error) {\n\t\t\t\tcallback(error)\n\t\t\t}\n\t\t},\n\t\tfinal(callback) {\n\t\t\ttry {\n\t\t\t\tpushBytes(aes.final(), b => this.push(b))\n\t\t\t\tcallback()\n\t\t\t} catch(error) {\n\t\t\t\tcallback(error)\n\t\t\t}\n\t\t},\n\t})\n\treturn fetched.pipe(output, { end: true })\n}\n\nexport function extensionForMediaMessage(message: WAMessageContent) {\n\tconst getExtension = (mimetype: string) => mimetype.split(';')[0].split('/')[1]\n\tconst type = Object.keys(message)[0] as MessageType\n\tlet extension: string\n\tif(\n\t\ttype === 'locationMessage' ||\n\t\ttype === 'liveLocationMessage' ||\n\t\ttype === 'productMessage'\n\t) {\n\t\textension = '.jpeg'\n\t} else {\n\t\tconst messageContent = message[type] as WAGenericMediaMessage\n\t\textension = getExtension(messageContent.mimetype!)\n\t}\n\n\treturn extension\n}\n\nexport const getWAUploadToServer = (\n\t{ customUploadHosts, fetchAgent, logger, options }: SocketConfig,\n\trefreshMediaConn: (force: boolean) => Promise<MediaConnInfo>,\n): WAMediaUploadFunction => {\n\treturn async(stream, { mediaType, fileEncSha256B64, timeoutMs }) => {\n\t\tconst { default: axios } = await import('axios')\n\t\t// send a query JSON to obtain the url & auth token to upload our media\n\t\tlet uploadInfo = await refreshMediaConn(false)\n\n\t\tlet urls: { mediaUrl: string, directPath: string } | undefined\n\t\tconst hosts = [ ...customUploadHosts, ...uploadInfo.hosts ]\n\n\t\tconst chunks: Buffer[] = []\n\t\tfor await (const chunk of stream) {\n\t\t\tchunks.push(chunk)\n\t\t}\n\n\t\tconst reqBody = Buffer.concat(chunks)\n\t\tfileEncSha256B64 = encodeBase64EncodedStringForUpload(fileEncSha256B64)\n\n\t\tfor(const { hostname, maxContentLengthBytes } of hosts) {\n\t\t\tlogger.debug(`uploading to \"${hostname}\"`)\n\n\t\t\tconst auth = encodeURIComponent(uploadInfo.auth) // the auth token\n\t\t\tconst url = `https://${hostname}${MEDIA_PATH_MAP[mediaType]}/${fileEncSha256B64}?auth=${auth}&token=${fileEncSha256B64}`\n\t\t\tlet result: any\n\t\t\ttry {\n\t\t\t\tif(maxContentLengthBytes && reqBody.length > maxContentLengthBytes) {\n\t\t\t\t\tthrow new Boom(`Body too large for \"${hostname}\"`, { statusCode: 413 })\n\t\t\t\t}\n\n\t\t\t\tconst body = await axios.post(\n\t\t\t\t\turl,\n\t\t\t\t\treqBody,\n\t\t\t\t\t{\n\t\t\t\t\t\t...options,\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t...options.headers || { },\n\t\t\t\t\t\t\t'Content-Type': 'application/octet-stream',\n\t\t\t\t\t\t\t'Origin': DEFAULT_ORIGIN\n\t\t\t\t\t\t},\n\t\t\t\t\t\thttpsAgent: fetchAgent,\n\t\t\t\t\t\ttimeout: timeoutMs,\n\t\t\t\t\t\tresponseType: 'json',\n\t\t\t\t\t\tmaxBodyLength: Infinity,\n\t\t\t\t\t\tmaxContentLength: Infinity,\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tresult = body.data\n\n\t\t\t\tif(result?.url || result?.directPath) {\n\t\t\t\t\turls = {\n\t\t\t\t\t\tmediaUrl: result.url,\n\t\t\t\t\t\tdirectPath: result.direct_path\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t} else {\n\t\t\t\t\tuploadInfo = await refreshMediaConn(true)\n\t\t\t\t\tthrow new Error(`upload failed, reason: ${JSON.stringify(result)}`)\n\t\t\t\t}\n\t\t\t} catch(error) {\n\t\t\t\tif(axios.isAxiosError(error)) {\n\t\t\t\t\tresult = error.response?.data\n\t\t\t\t}\n\n\t\t\t\tconst isLast = hostname === hosts[uploadInfo.hosts.length - 1]?.hostname\n\t\t\t\tlogger.warn({ trace: error.stack, uploadResult: result }, `Error in uploading to ${hostname} ${isLast ? '' : ', retrying...'}`)\n\t\t\t}\n\t\t}\n\n\t\tif(!urls) {\n\t\t\tthrow new Boom(\n\t\t\t\t'Media upload failed on all hosts',\n\t\t\t\t{ statusCode: 500 }\n\t\t\t)\n\t\t}\n\n\t\treturn urls\n\t}\n}\n\nconst getMediaRetryKey = (mediaKey: Buffer | Uint8Array) => {\n\treturn hkdf(mediaKey, 32, { info: 'WhatsApp Media Retry Notification' })\n}\n\n/**\n * Generate a binary node that will request the phone to re-upload the media & return the newly uploaded URL\n */\nexport const encryptMediaRetryRequest = (\n\tkey: proto.IMessageKey,\n\tmediaKey: Buffer | Uint8Array,\n\tmeId: string\n) => {\n\tconst recp: proto.IServerErrorReceipt = { stanzaId: key.id }\n\tconst recpBuffer = proto.ServerErrorReceipt.encode(recp).finish()\n\n\tconst iv = Crypto.randomBytes(12)\n\tconst retryKey = getMediaRetryKey(mediaKey)\n\tconst ciphertext = aesEncryptGCM(recpBuffer, retryKey, iv, Buffer.from(key.id!))\n\n\tconst req: BinaryNode = {\n\t\ttag: 'receipt',\n\t\tattrs: {\n\t\t\tid: key.id!,\n\t\t\tto: jidNormalizedUser(meId),\n\t\t\ttype: 'server-error'\n\t\t},\n\t\tcontent: [\n\t\t\t// this encrypt node is actually pretty useless\n\t\t\t// the media is returned even without this node\n\t\t\t// keeping it here to maintain parity with WA Web\n\t\t\t{\n\t\t\t\ttag: 'encrypt',\n\t\t\t\tattrs: { },\n\t\t\t\tcontent: [\n\t\t\t\t\t{ tag: 'enc_p', attrs: { }, content: ciphertext },\n\t\t\t\t\t{ tag: 'enc_iv', attrs: { }, content: iv }\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttag: 'rmr',\n\t\t\t\tattrs: {\n\t\t\t\t\tjid: key.remoteJid!,\n\t\t\t\t\t'from_me': (!!key.fromMe).toString(),\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tparticipant: key.participant || undefined\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n\n\treturn req\n}\n\nexport const decodeMediaRetryNode = (node: BinaryNode) => {\n\tconst rmrNode = getBinaryNodeChild(node, 'rmr')!\n\n\tconst event: BaileysEventMap['messages.media-update'][number] = {\n\t\tkey: {\n\t\t\tid: node.attrs.id,\n\t\t\tremoteJid: rmrNode.attrs.jid,\n\t\t\tfromMe: rmrNode.attrs.from_me === 'true',\n\t\t\tparticipant: rmrNode.attrs.participant\n\t\t}\n\t}\n\n\tconst errorNode = getBinaryNodeChild(node, 'error')\n\tif(errorNode) {\n\t\tconst errorCode = +errorNode.attrs.code\n\t\tevent.error = new Boom(\n\t\t\t`Failed to re-upload media (${errorCode})`,\n\t\t\t{ data: errorNode.attrs, statusCode: getStatusCodeForMediaRetry(errorCode) }\n\t\t)\n\t} else {\n\t\tconst encryptedInfoNode = getBinaryNodeChild(node, 'encrypt')\n\t\tconst ciphertext = getBinaryNodeChildBuffer(encryptedInfoNode, 'enc_p')\n\t\tconst iv = getBinaryNodeChildBuffer(encryptedInfoNode, 'enc_iv')\n\t\tif(ciphertext && iv) {\n\t\t\tevent.media = { ciphertext, iv }\n\t\t} else {\n\t\t\tevent.error = new Boom('Failed to re-upload media (missing ciphertext)', { statusCode: 404 })\n\t\t}\n\t}\n\n\treturn event\n}\n\nexport const decryptMediaRetryData = (\n\t{ ciphertext, iv }: { ciphertext: Uint8Array, iv: Uint8Array },\n\tmediaKey: Uint8Array,\n\tmsgId: string\n) => {\n\tconst retryKey = getMediaRetryKey(mediaKey)\n\tconst plaintext = aesDecryptGCM(ciphertext, retryKey, iv, Buffer.from(msgId))\n\treturn proto.MediaRetryNotification.decode(plaintext)\n}\n\nexport const getStatusCodeForMediaRetry = (code: number) => MEDIA_RETRY_STATUS_MAP[code]\n\nconst MEDIA_RETRY_STATUS_MAP = {\n\t[proto.MediaRetryNotification.ResultType.SUCCESS]: 200,\n\t[proto.MediaRetryNotification.ResultType.DECRYPTION_ERROR]: 412,\n\t[proto.MediaRetryNotification.ResultType.NOT_FOUND]: 404,\n\t[proto.MediaRetryNotification.ResultType.GENERAL_ERROR]: 418,\n} as const\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction __importStar(arg0: any): any {\n\tthrow new Error('Function not implemented.')\n}\n"]}