{"version":3,"file":"baileys-event-stream.js","sourceRoot":"/","sources":["Utils/baileys-event-stream.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAiC;AACjC,2BAAqC;AACrC,0CAAuC;AACvC,uCAA0C;AAE1C,yCAAkC;AAClC,6CAAwC;AAExC;;;;GAIG;AACI,MAAM,kBAAkB,GAAG,CAAC,EAAuB,EAAE,QAAgB,EAAE,EAAE;IAC/E,MAAM,OAAO,GAAG,EAAE,CAAC,IAAI,CAAA;IACvB,2CAA2C;IAC3C,MAAM,UAAU,GAAG,IAAA,sBAAS,GAAE,CAAA;IAC9B,kDAAkD;IAClD,EAAE,CAAC,IAAI,GAAG,UAAS,GAAG,IAAW;QAChC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAA;QAC/F,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QAEtC,UAAU,CAAC,KAAK,CACf,GAAQ,EAAE;YACT,MAAM,IAAA,oBAAS,EAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAA;QAClD,CAAC,CAAA,CACD,CAAA;QAED,OAAO,MAAM,CAAA;IACd,CAAC,CAAA;AACF,CAAC,CAAA;AAjBY,QAAA,kBAAkB,sBAiB9B;AAED;;;;GAIG;AACI,MAAM,sBAAsB,GAAG,CAAC,QAAgB,EAAE,eAAe,GAAG,CAAC,EAAE,EAAE;IAC/E,MAAM,EAAE,GAAG,IAAI,gBAAY,EAAyB,CAAA;IAEpD,MAAM,UAAU,GAAG,GAAQ,EAAE;;QAC5B,8FAA8F;QAC9F,MAAM,UAAU,GAAG,IAAA,qBAAgB,EAAC,QAAQ,CAAC,CAAA;QAE7C,MAAM,EAAE,GAAG,IAAA,0BAAe,EAAC;YAC1B,KAAK,EAAE,UAAU;YACjB,SAAS,EAAE,QAAQ;SACnB,CAAC,CAAA;;YACF,wEAAwE;YACxE,gDAAgD;YAChD,KAAyB,eAAA,OAAA,cAAA,EAAE,CAAA,QAAA,gEAAE;gBAAJ,kBAAE;gBAAF,WAAE;gBAAhB,MAAM,IAAI,KAAA,CAAA;gBACpB,IAAG,IAAI,EAAE;oBACR,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;oBACxC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;oBACpB,eAAe,KAAI,MAAM,IAAA,gBAAK,EAAC,eAAe,CAAC,CAAA,CAAA;iBAC/C;aACD;;;;;;;;;QAED,UAAU,CAAC,KAAK,EAAE,CAAA;IACnB,CAAC,CAAA,CAAA;IAED,OAAO;QACN,EAAE;QACF,IAAI,EAAE,UAAU,EAAE;KAClB,CAAA;AACF,CAAC,CAAA;AA5BY,QAAA,sBAAsB,0BA4BlC","sourcesContent":["import EventEmitter from 'events'\nimport { createReadStream } from 'fs'\nimport { writeFile } from 'fs/promises'\nimport { createInterface } from 'readline'\nimport type { BaileysEventEmitter } from '../Types'\nimport { delay } from './generics'\nimport { makeMutex } from './make-mutex'\n\n/**\n * Captures events from a baileys event emitter & stores them in a file\n * @param ev The event emitter to read events from\n * @param filename File to save to\n */\nexport const captureEventStream = (ev: BaileysEventEmitter, filename: string) => {\n\tconst oldEmit = ev.emit\n\t// write mutex so data is appended in order\n\tconst writeMutex = makeMutex()\n\t// monkey patch eventemitter to capture all events\n\tev.emit = function(...args: any[]) {\n\t\tconst content = JSON.stringify({ timestamp: Date.now(), event: args[0], data: args[1] }) + '\\n'\n\t\tconst result = oldEmit.apply(ev, args)\n\n\t\twriteMutex.mutex(\n\t\t\tasync() => {\n\t\t\t\tawait writeFile(filename, content, { flag: 'a' })\n\t\t\t}\n\t\t)\n\n\t\treturn result\n\t}\n}\n\n/**\n * Read event file and emit events from there\n * @param filename filename containing event data\n * @param delayIntervalMs delay between each event emit\n */\nexport const readAndEmitEventStream = (filename: string, delayIntervalMs = 0) => {\n\tconst ev = new EventEmitter() as BaileysEventEmitter\n\n\tconst fireEvents = async() => {\n\t\t// from: https://stackoverflow.com/questions/6156501/read-a-file-one-line-at-a-time-in-node-js\n\t\tconst fileStream = createReadStream(filename)\n\n\t\tconst rl = createInterface({\n\t\t\tinput: fileStream,\n\t\t\tcrlfDelay: Infinity\n\t\t})\n\t\t// Note: we use the crlfDelay option to recognize all instances of CR LF\n\t\t// ('\\r\\n') in input.txt as a single line break.\n\t\tfor await (const line of rl) {\n\t\t\tif(line) {\n\t\t\t\tconst { event, data } = JSON.parse(line)\n\t\t\t\tev.emit(event, data)\n\t\t\t\tdelayIntervalMs && await delay(delayIntervalMs)\n\t\t\t}\n\t\t}\n\n\t\tfileStream.close()\n\t}\n\n\treturn {\n\t\tev,\n\t\ttask: fireEvents()\n\t}\n}"]}