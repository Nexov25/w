{"version":3,"file":"use-redis-auth.js","sourceRoot":"/","sources":["Utils/use-redis-auth.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n\tUsing Redis to store login data\n\tModified from @kreivc (https://www.kreivc.com/)\n*/\n\nimport type { Logger } from 'pino'\nimport { createClient } from 'redis'\nimport { proto } from '../../WAProto'\nimport {\n\tAuthenticationCreds,\n\tAuthenticationState,\n\tSignalDataTypeMap,\n} from '../Types'\nimport { initAuthCreds } from './auth-utils'\nimport { BufferJSON } from './generics'\n\n\nexport const useRedisAuthState = async(\n\tredis: ReturnType<typeof createClient>,\n\tauthKey = 'auth',\n\tlogger?: Logger\n): Promise<{\n\tstate: AuthenticationState\n\tsaveCreds: () => Promise<void>\n\tremoveCreds: () => Promise<void>\n}> => {\n\tconst writeData = async(id: string, data: AuthenticationCreds & any) => {\n\t\tlogger?.debug({ id, data }, 'writing data')\n\n\t\tawait redis.hSet(\n\t\t\tauthKey,\n\t\t\tid,\n\t\t\tJSON.stringify(data, BufferJSON.replacer)\n\t\t)\n\t}\n\n\tconst readData = async(id: string) => {\n\t\tconst data = await redis.hGet(authKey, id)\n\t\tlogger?.debug({ id, data }, 'reading data')\n\n\t\treturn data ? JSON.parse(data, BufferJSON.reviver) : null\n\t}\n\n\tconst creds: AuthenticationCreds =\n\t\t(await readData('creds')) || initAuthCreds()\n\n\treturn {\n\t\tstate: {\n\t\t\tcreds,\n\t\t\tkeys: {\n\t\t\t\tget: async(type, ids) => {\n\t\t\t\t\tlogger?.debug({ ids, type }, 'getting data')\n\t\t\t\t\tconst data: { [_: string]: SignalDataTypeMap[typeof type] } = {}\n\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\tids.map(async(id: string | number) => {\n\t\t\t\t\t\t\tlet value = await readData(`${type}-${id}`)\n\t\t\t\t\t\t\tif(type === 'app-state-sync-key' && value) {\n\t\t\t\t\t\t\t\tvalue = proto.Message.AppStateSyncKeyData.fromObject(value)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdata[id] = value\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t\treturn data\n\t\t\t\t},\n\t\t\t\tset: async(data) => {\n\t\t\t\t\tlogger?.debug({ data }, 'setting data')\n\t\t\t\t\tconst tasks: Promise<void|number>[] = []\n\t\t\t\t\tfor(const category in data) {\n\t\t\t\t\t\tfor(const id in data[category]) {\n\t\t\t\t\t\t\tconst value = data[category][id]\n\t\t\t\t\t\t\tconst key = `${category}-${id}`\n\t\t\t\t\t\t\ttasks.push(\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t? writeData(\n\t\t\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: redis.hDel(authKey, key)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tawait Promise.all(tasks)\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tsaveCreds: async() => {\n\t\t\tlogger?.debug({ creds }, 'saving creds')\n\t\t\tawait writeData('creds', creds)\n\t\t},\n\t\tremoveCreds: async() => {\n\t\t\tlogger?.debug('deleting creds')\n\t\t\tawait redis.del(authKey)\n\t\t},\n\t}\n}\n\n"]}