{"version":3,"file":"auth-utils.js","sourceRoot":"/","sources":["Utils/auth-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomBytes } from 'crypto'\nimport NodeCache from 'node-cache'\nimport type { Logger } from 'pino'\nimport { v4 as uuidv4 } from 'uuid'\nimport { DEFAULT_CACHE_TTLS } from '../Defaults'\nimport type { AuthenticationCreds, CacheStore, SignalDataSet, SignalDataTypeMap, SignalKeyStore, SignalKeyStoreWithTransaction, TransactionCapabilityOptions } from '../Types'\nimport { Curve, signedKeyPair } from './crypto'\nimport { delay, generateRegistrationId } from './generics'\n\n/**\n * Adds caching capability to a SignalKeyStore\n * @param store the store to add caching to\n * @param logger to log trace events\n * @param _cache cache store to use\n */\nexport function makeCacheableSignalKeyStore(\n\tstore: SignalKeyStore,\n\tlogger?: Logger,\n\t_cache?: CacheStore\n): SignalKeyStore {\n\tconst cache = _cache || new NodeCache({\n\t\tstdTTL: DEFAULT_CACHE_TTLS.SIGNAL_STORE, // 5 minutes\n\t\tuseClones: false,\n\t\tdeleteOnExpire: true,\n\t})\n\n\tfunction getUniqueId(type: string, id: string) {\n\t\treturn `${type}.${id}`\n\t}\n\n\treturn {\n\t\tasync get(type, ids) {\n\t\t\tconst data: { [_: string]: SignalDataTypeMap[typeof type] } = { }\n\t\t\tconst idsToFetch: string[] = []\n\t\t\tfor(const id of ids) {\n\t\t\t\tconst item = cache.get<SignalDataTypeMap[typeof type]>(getUniqueId(type, id))\n\t\t\t\tif(typeof item !== 'undefined') {\n\t\t\t\t\tdata[id] = item\n\t\t\t\t} else {\n\t\t\t\t\tidsToFetch.push(id)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(idsToFetch.length) {\n\t\t\t\tlogger?.trace({ items: idsToFetch.length }, 'loading from store')\n\t\t\t\tconst fetched = await store.get(type, idsToFetch)\n\t\t\t\tfor(const id of idsToFetch) {\n\t\t\t\t\tconst item = fetched[id]\n\t\t\t\t\tif(item) {\n\t\t\t\t\t\tdata[id] = item\n\t\t\t\t\t\tcache.set(getUniqueId(type, id), item)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data\n\t\t},\n\t\tasync set(data) {\n\t\t\tlet keys = 0\n\t\t\tfor(const type in data) {\n\t\t\t\tfor(const id in data[type]) {\n\t\t\t\t\tcache.set(getUniqueId(type, id), data[type][id])\n\t\t\t\t\tkeys += 1\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlogger?.trace({ keys }, 'updated cache')\n\n\t\t\tawait store.set(data)\n\t\t},\n\t\tasync clear() {\n\t\t\tcache.flushAll()\n\t\t\tawait store.clear?.()\n\t\t}\n\t}\n}\n\n/**\n * Adds DB like transaction capability (https://en.wikipedia.org/wiki/Database_transaction) to the SignalKeyStore,\n * this allows batch read & write operations & improves the performance of the lib\n * @param state the key store to apply this capability to\n * @param logger logger to log events\n * @returns SignalKeyStore with transaction capability\n */\nexport const addTransactionCapability = (\n\tstate: SignalKeyStore,\n\tlogger: Logger,\n\t{ maxCommitRetries, delayBetweenTriesMs }: TransactionCapabilityOptions\n): SignalKeyStoreWithTransaction => {\n\t// number of queries made to the DB during the transaction\n\t// only there for logging purposes\n\tlet dbQueriesInTransaction = 0\n\tlet transactionCache: SignalDataSet = { }\n\tlet mutations: SignalDataSet = { }\n\n\tlet transactionsInProgress = 0\n\n\treturn {\n\t\tget: async(type, ids) => {\n\t\t\tif(isInTransaction()) {\n\t\t\t\tconst dict = transactionCache[type]\n\t\t\t\tconst idsRequiringFetch = dict\n\t\t\t\t\t? ids.filter(item => typeof dict[item] === 'undefined')\n\t\t\t\t\t: ids\n\t\t\t\t// only fetch if there are any items to fetch\n\t\t\t\tif(idsRequiringFetch.length) {\n\t\t\t\t\tdbQueriesInTransaction += 1\n\t\t\t\t\tconst result = await state.get(type, idsRequiringFetch)\n\n\t\t\t\t\ttransactionCache[type] ||= {}\n\t\t\t\t\tObject.assign(\n\t\t\t\t\t\ttransactionCache[type]!,\n\t\t\t\t\t\tresult\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\treturn ids.reduce(\n\t\t\t\t\t(dict, id) => {\n\t\t\t\t\t\tconst value = transactionCache[type]?.[id]\n\t\t\t\t\t\tif(value) {\n\t\t\t\t\t\t\tdict[id] = value\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn dict\n\t\t\t\t\t}, { }\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\treturn state.get(type, ids)\n\t\t\t}\n\t\t},\n\t\tset: data => {\n\t\t\tif(isInTransaction()) {\n\t\t\t\tlogger.trace({ types: Object.keys(data) }, 'caching in transaction')\n\t\t\t\tfor(const key in data) {\n\t\t\t\t\ttransactionCache[key] = transactionCache[key] || { }\n\t\t\t\t\tObject.assign(transactionCache[key], data[key])\n\n\t\t\t\t\tmutations[key] = mutations[key] || { }\n\t\t\t\t\tObject.assign(mutations[key], data[key])\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn state.set(data)\n\t\t\t}\n\t\t},\n\t\tisInTransaction,\n\t\tasync transaction(work) {\n\t\t\tlet result: Awaited<ReturnType<typeof work>>\n\t\t\ttransactionsInProgress += 1\n\t\t\tif(transactionsInProgress === 1) {\n\t\t\t\tlogger.trace('entering transaction')\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tresult = await work()\n\t\t\t\t// commit if this is the outermost transaction\n\t\t\t\tif(transactionsInProgress === 1) {\n\t\t\t\t\tif(Object.keys(mutations).length) {\n\t\t\t\t\t\tlogger.trace('committing transaction')\n\t\t\t\t\t\t// retry mechanism to ensure we've some recovery\n\t\t\t\t\t\t// in case a transaction fails in the first attempt\n\t\t\t\t\t\tlet tries = maxCommitRetries\n\t\t\t\t\t\twhile(tries) {\n\t\t\t\t\t\t\ttries -= 1\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait state.set(mutations)\n\t\t\t\t\t\t\t\tlogger.trace({ dbQueriesInTransaction }, 'committed transaction')\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t} catch(error) {\n\t\t\t\t\t\t\t\tlogger.warn(`failed to commit ${Object.keys(mutations).length} mutations, tries left=${tries}`)\n\t\t\t\t\t\t\t\tawait delay(delayBetweenTriesMs)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.trace('no mutations in transaction')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\ttransactionsInProgress -= 1\n\t\t\t\tif(transactionsInProgress === 0) {\n\t\t\t\t\ttransactionCache = { }\n\t\t\t\t\tmutations = { }\n\t\t\t\t\tdbQueriesInTransaction = 0\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result\n\t\t}\n\t}\n\n\tfunction isInTransaction() {\n\t\treturn transactionsInProgress > 0\n\t}\n}\n\nexport const initAuthCreds = (): AuthenticationCreds => {\n\tconst identityKey = Curve.generateKeyPair()\n\treturn {\n\t\tnoiseKey: Curve.generateKeyPair(),\n\t\tpairingEphemeralKeyPair: Curve.generateKeyPair(),\n\t\tsignedIdentityKey: identityKey,\n\t\tsignedPreKey: signedKeyPair(identityKey, 1),\n\t\tregistrationId: generateRegistrationId(),\n\t\tadvSecretKey: randomBytes(32).toString('base64'),\n\t\tprocessedHistoryMessages: [],\n\t\tnextPreKeyId: 1,\n\t\tfirstUnuploadedPreKeyId: 1,\n\t\taccountSyncCounter: 0,\n\t\taccountSettings: {\n\t\t\tunarchiveChats: false\n\t\t},\n\t\t// mobile creds\n\t\tdeviceId: Buffer.from(uuidv4().replace(/-/g, ''), 'hex').toString('base64url'),\n\t\tphoneId: uuidv4(),\n\t\tidentityId: randomBytes(20),\n\t\tregistered: false,\n\t\tbackupToken: randomBytes(20),\n\t\tregistration: {} as never,\n\t\tpairingCode: undefined,\n\t}\n}"]}