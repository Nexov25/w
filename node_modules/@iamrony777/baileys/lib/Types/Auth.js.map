{"version":3,"file":"Auth.js","sourceRoot":"/","sources":["Types/Auth.ts"],"names":[],"mappings":"","sourcesContent":["import type { proto } from '../../WAProto'\nimport { RegistrationOptions } from '../Socket/registration'\nimport type { Contact } from './Contact'\nimport type { MinimalMessage } from './Message'\n\nexport type KeyPair = { public: Uint8Array, private: Uint8Array }\nexport type SignedKeyPair = {\n    keyPair: KeyPair\n    signature: Uint8Array\n    keyId: number\n    timestampS?: number\n}\n\nexport type ProtocolAddress = {\n\tname: string // jid\n\tdeviceId: number\n}\nexport type SignalIdentity = {\n\tidentifier: ProtocolAddress\n\tidentifierKey: Uint8Array\n}\n\nexport type LTHashState = {\n    version: number\n    hash: Buffer\n    indexValueMap: {\n        [indexMacBase64: string]: { valueMac: Uint8Array | Buffer }\n    }\n}\n\nexport type SignalCreds = {\n    readonly signedIdentityKey: KeyPair\n    readonly signedPreKey: SignedKeyPair\n    readonly registrationId: number\n}\n\nexport type AccountSettings = {\n    /** unarchive chats when a new message is received */\n    unarchiveChats: boolean\n    /** the default mode to start new conversations with */\n    defaultDisappearingMode?: Pick<proto.IConversation, 'ephemeralExpiration' | 'ephemeralSettingTimestamp'>\n}\n\nexport type AuthenticationCreds = SignalCreds & {\n    readonly noiseKey: KeyPair\n    readonly pairingEphemeralKeyPair: KeyPair\n    advSecretKey: string\n\n    me?: Contact\n    account?: proto.IADVSignedDeviceIdentity\n    signalIdentities?: SignalIdentity[]\n    myAppStateKeyId?: string\n    firstUnuploadedPreKeyId: number\n    nextPreKeyId: number\n\n    lastAccountSyncTimestamp?: number\n    platform?: string\n\n    processedHistoryMessages: MinimalMessage[]\n    /** number of times history & app state has been synced */\n    accountSyncCounter: number\n    accountSettings: AccountSettings\n\t// mobile creds\n\tdeviceId: string\n\tphoneId: string\n\tidentityId: Buffer\n\tregistered: boolean\n\tbackupToken: Buffer\n\tregistration: RegistrationOptions\n    pairingCode: string | undefined\n}\n\nexport type SignalDataTypeMap = {\n    'pre-key': KeyPair\n    'session': Uint8Array\n    'sender-key': Uint8Array\n    'sender-key-memory': { [jid: string]: boolean }\n    'app-state-sync-key': proto.Message.IAppStateSyncKeyData\n    'app-state-sync-version': LTHashState\n}\n\nexport type SignalDataSet = { [T in keyof SignalDataTypeMap]?: { [id: string]: SignalDataTypeMap[T] | null } }\n\ntype Awaitable<T> = T | Promise<T>\n\nexport type SignalKeyStore = {\n    get<T extends keyof SignalDataTypeMap>(type: T, ids: string[]): Awaitable<{ [id: string]: SignalDataTypeMap[T] }>\n    set(data: SignalDataSet): Awaitable<void>\n    /** clear all the data in the store */\n    clear?(): Awaitable<void>\n}\n\nexport type SignalKeyStoreWithTransaction = SignalKeyStore & {\n    isInTransaction: () => boolean\n    transaction<T>(exec: () => Promise<T>): Promise<T>\n}\n\nexport type TransactionCapabilityOptions = {\n\tmaxCommitRetries: number\n\tdelayBetweenTriesMs: number\n}\n\nexport type SignalAuthState = {\n    creds: SignalCreds\n    keys: SignalKeyStore | SignalKeyStoreWithTransaction\n}\n\nexport type AuthenticationState = {\n    creds: AuthenticationCreds\n    keys: SignalKeyStore\n}"]}