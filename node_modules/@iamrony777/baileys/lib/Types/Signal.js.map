{"version":3,"file":"Signal.js","sourceRoot":"/","sources":["Types/Signal.ts"],"names":[],"mappings":"","sourcesContent":["import { proto } from '../../WAProto'\n\ntype DecryptGroupSignalOpts = {\n\tgroup: string\n\tauthorJid: string\n\tmsg: Uint8Array\n}\n\ntype ProcessSenderKeyDistributionMessageOpts = {\n\titem: proto.Message.ISenderKeyDistributionMessage\n\tauthorJid: string\n}\n\ntype DecryptSignalProtoOpts = {\n\tjid: string\n\ttype: 'pkmsg' | 'msg'\n\tciphertext: Uint8Array\n}\n\ntype EncryptMessageOpts = {\n\tjid: string\n\tdata: Uint8Array\n}\n\ntype EncryptGroupMessageOpts = {\n\tgroup: string\n\tdata: Uint8Array\n\tmeId: string\n}\n\ntype PreKey = {\n\tkeyId: number\n\tpublicKey: Uint8Array\n}\n\ntype SignedPreKey = PreKey & {\n\tsignature: Uint8Array\n}\n\ntype E2ESession = {\n\tregistrationId: number\n\tidentityKey: Uint8Array\n\tsignedPreKey: SignedPreKey\n\tpreKey: PreKey\n}\n\ntype E2ESessionOpts = {\n\tjid: string\n\tsession: E2ESession\n}\n\nexport type SignalRepository = {\n\tdecryptGroupMessage(opts: DecryptGroupSignalOpts): Promise<Uint8Array>\n\tprocessSenderKeyDistributionMessage(\n\t\topts: ProcessSenderKeyDistributionMessageOpts\n\t): Promise<void>\n\tdecryptMessage(opts: DecryptSignalProtoOpts): Promise<Uint8Array>\n\tencryptMessage(opts: EncryptMessageOpts): Promise<{\n\t\ttype: 'pkmsg' | 'msg'\n\t\tciphertext: Uint8Array\n\t}>\n\tencryptGroupMessage(opts: EncryptGroupMessageOpts): Promise<{\n\t\tsenderKeyDistributionMessage: Uint8Array\n\t\tciphertext: Uint8Array\n\t}>\n\tinjectE2ESession(opts: E2ESessionOpts): Promise<void>\n\tjidToSignalProtocolAddress(jid: string): string\n}"]}