{"version":3,"file":"encode.js","sourceRoot":"/","sources":["WABinary/encode.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,uDAAwC;AACxC,2CAAgD;AAGzC,MAAM,gBAAgB,GAAG,CAC/B,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAc,EACnC,OAA4D,SAAS,EACrE,SAAmB,CAAC,CAAC,CAAC,EACrB,EAAE;IACH,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,IAAI,CAAA;IAEhC,MAAM,QAAQ,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAA;IAE7D,MAAM,OAAO,GAAG,CAAC,KAAa,EAAE,CAAS,EAAE,YAAY,GAAG,KAAK,EAAE,EAAE;QAClE,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,MAAM,QAAQ,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YAC7C,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAA;SAC7C;IACF,CAAC,CAAA;IAED,MAAM,SAAS,GAAG,CAAC,KAAqC,EAAE,EAAE,CAAC,CAC5D,KAAK,CAAC,OAAO,CAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CACnC,CAAA;IACD,MAAM,SAAS,GAAG,CAAC,KAAa,EAAE,EAAE;QACnC,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,IAAI,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC,CAAA;IAC/C,CAAC,CAAA;IAED,MAAM,SAAS,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,CACpC,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,IAAI,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC,CACpE,CAAA;IACD,MAAM,eAAe,GAAG,CAAC,MAAc,EAAE,EAAE;QAC1C,IAAG,MAAM,IAAI,UAAU,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,MAAM,CAAC,CAAA;SACxD;QAED,IAAG,MAAM,IAAI,CAAC,IAAI,EAAE,EAAE;YACrB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YACxB,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA,CAAC,iBAAiB;SACpC;aAAM,IAAG,MAAM,IAAI,GAAG,EAAE;YACxB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YACxB,SAAS,CAAC,MAAM,CAAC,CAAA;SACjB;aAAM;YACN,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YACvB,QAAQ,CAAC,MAAM,CAAC,CAAA;SAChB;IACF,CAAC,CAAA;IAED,MAAM,cAAc,GAAG,CAAC,GAAW,EAAE,EAAE;QACtC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAE,GAAG,EAAE,OAAO,CAAC,CAAA;QACxC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QAC7B,SAAS,CAAC,KAAK,CAAC,CAAA;IACjB,CAAC,CAAA;IAED,MAAM,QAAQ,GAAG,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAW,EAAE,EAAE;QAClE,IAAG,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACrB,QAAQ,CAAC,UAAU,IAAI,CAAC,CAAC,CAAA;YACzB,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA;YACrB,WAAW,CAAC,IAAI,CAAC,CAAA;SACjB;aAAM;YACN,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YACvB,IAAG,IAAI,CAAC,MAAM,EAAE;gBACf,WAAW,CAAC,IAAI,CAAC,CAAA;aACjB;iBAAM;gBACN,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;aACzB;YAED,WAAW,CAAC,MAAM,CAAC,CAAA;SACnB;IACF,CAAC,CAAA;IAED,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,EAAE;QACnC,QAAQ,IAAI,EAAE;YACd,KAAK,GAAG;gBACP,OAAO,EAAE,CAAA;YACV,KAAK,GAAG;gBACP,OAAO,EAAE,CAAA;YACV,KAAK,IAAI;gBACR,OAAO,EAAE,CAAA;YACV;gBACC,IAAG,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,EAAE;oBAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;iBAC7C;gBAED,MAAM,IAAI,KAAK,CAAC,4BAA4B,IAAI,GAAG,CAAC,CAAA;SACpD;IACF,CAAC,CAAA;IAED,MAAM,OAAO,GAAG,CAAC,IAAY,EAAE,EAAE;QAChC,IAAG,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,EAAE;YAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;SAC7C;QAED,IAAG,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,EAAE;YAC9B,OAAO,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;SAClD;QAED,IAAG,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,EAAE;YAC9B,OAAO,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;SAClD;QAED,IAAG,IAAI,KAAK,IAAI,EAAE;YACjB,OAAO,EAAE,CAAA;SACT;QAED,MAAM,IAAI,KAAK,CAAC,qBAAqB,IAAI,GAAG,CAAC,CAAA;IAC9C,CAAC,CAAA;IAED,MAAM,gBAAgB,GAAG,CAAC,GAAW,EAAE,IAAsB,EAAE,EAAE;QAChE,IAAG,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAA;SACzC;QAED,QAAQ,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAExD,IAAI,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAA;QAC/C,IAAG,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;YACxB,aAAa,IAAI,GAAG,CAAA;SACpB;QAED,QAAQ,CAAC,aAAa,CAAC,CAAA;QACvB,MAAM,YAAY,GAAG,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAA;QAE7D,MAAM,YAAY,GAAG,CAAC,EAAU,EAAE,EAAU,EAAE,EAAE;YAC/C,MAAM,MAAM,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC,EAAE,CAAC,CAAA;YACzD,OAAO,MAAM,CAAA;QACd,CAAC,CAAA;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QAChD,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAC,CAAC,EAAE,EAAE;YACrC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;SAClD;QAED,IAAG,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;YACxB,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAA;SACnD;IACF,CAAC,CAAA;IAED,MAAM,QAAQ,GAAG,CAAC,GAAW,EAAE,EAAE;QAChC,IAAG,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE;YAChC,OAAO,KAAK,CAAA;SACZ;QAED,KAAI,IAAI,CAAC,GAAG,CAAC,EAAC,CAAC,GAAG,GAAG,CAAC,MAAM,EAAC,CAAC,EAAE,EAAE;YACjC,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA;YACnB,MAAM,eAAe,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAA;YAClD,IAAG,CAAC,eAAe,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,EAAE;gBACpD,OAAO,KAAK,CAAA;aACZ;SACD;QAED,OAAO,IAAI,CAAA;IACZ,CAAC,CAAA;IAED,MAAM,KAAK,GAAG,CAAC,GAAW,EAAE,EAAE;QAC7B,IAAG,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE;YAChC,OAAO,KAAK,CAAA;SACZ;QAED,KAAI,IAAI,CAAC,GAAG,CAAC,EAAC,CAAC,GAAG,GAAG,CAAC,MAAM,EAAC,CAAC,EAAE,EAAE;YACjC,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA;YACnB,MAAM,eAAe,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAA;YAClD,IAAG,CAAC,eAAe,IAAI,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,EAAE;gBACtF,OAAO,KAAK,CAAA;aACZ;SACD;QAED,OAAO,IAAI,CAAA;IACZ,CAAC,CAAA;IAED,MAAM,WAAW,GAAG,CAAC,GAAW,EAAE,EAAE;QACnC,MAAM,UAAU,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;QACjC,IAAG,UAAU,EAAE;YACd,IAAG,OAAO,UAAU,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACvC,QAAQ,CAAC,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,CAAA;aAC7C;YAED,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;SAC1B;aAAM,IAAG,QAAQ,CAAC,GAAG,CAAC,EAAE;YACxB,gBAAgB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;SAC/B;aAAM,IAAG,KAAK,CAAC,GAAG,CAAC,EAAE;YACrB,gBAAgB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;SAC5B;aAAM,IAAG,GAAG,EAAE;YACd,MAAM,UAAU,GAAG,IAAA,qBAAS,EAAC,GAAG,CAAC,CAAA;YACjC,IAAG,UAAU,EAAE;gBACd,QAAQ,CAAC,UAAU,CAAC,CAAA;aACpB;iBAAM;gBACN,cAAc,CAAC,GAAG,CAAC,CAAA;aACnB;SACD;IACF,CAAC,CAAA;IAED,MAAM,cAAc,GAAG,CAAC,QAAgB,EAAE,EAAE;QAC3C,IAAG,QAAQ,KAAK,CAAC,EAAE;YAClB,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;SACzB;aAAM,IAAG,QAAQ,GAAG,GAAG,EAAE;YACzB,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAA;SAClC;aAAM;YACN,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACtB,SAAS,CAAC,QAAQ,CAAC,CAAA;SACnB;IACF,CAAC,CAAA;IAED,MAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CACtD,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,WAAW,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CACpD,CAAC,CAAA;IAEF,cAAc,CAAC,CAAC,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,OAAO,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACzF,WAAW,CAAC,GAAG,CAAC,CAAA;IAEhB,KAAI,MAAM,GAAG,IAAI,eAAe,EAAE;QACjC,IAAG,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;YAClC,WAAW,CAAC,GAAG,CAAC,CAAA;YAChB,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAA;SACvB;KACD;IAED,IAAG,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC/B,WAAW,CAAC,OAAO,CAAC,CAAA;KACpB;SAAM,IAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,YAAY,UAAU,EAAE;QACpE,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAC/B,SAAS,CAAC,OAAO,CAAC,CAAA;KAClB;SAAM,IAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;QACjC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAC9B,KAAI,MAAM,IAAI,IAAI,OAAO,EAAE;YAC1B,IAAA,wBAAgB,EAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;SACpC;KACD;SAAM,IAAG,OAAO,OAAO,KAAK,WAAW,EAAE;QACzC,aAAa;KACb;SAAM;QACN,MAAM,IAAI,KAAK,CAAC,gCAAgC,GAAG,MAAM,OAAO,KAAK,OAAO,OAAO,GAAG,CAAC,CAAA;KACvF;IAED,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAC3B,CAAC,CAAA;AAtOY,QAAA,gBAAgB,oBAsO5B","sourcesContent":["\nimport * as constants from './constants'\nimport { FullJid, jidDecode } from './jid-utils'\nimport type { BinaryNode, BinaryNodeCodingOptions } from './types'\n\nexport const encodeBinaryNode = (\n\t{ tag, attrs, content }: BinaryNode,\n\topts: Pick<BinaryNodeCodingOptions, 'TAGS' | 'TOKEN_MAP'> = constants,\n\tbuffer: number[] = [0]\n) => {\n\tconst { TAGS, TOKEN_MAP } = opts\n\n\tconst pushByte = (value: number) => buffer.push(value & 0xff)\n\n\tconst pushInt = (value: number, n: number, littleEndian = false) => {\n\t\tfor(let i = 0; i < n; i++) {\n\t\t\tconst curShift = littleEndian ? i : n - 1 - i\n\t\t\tbuffer.push((value >> (curShift * 8)) & 0xff)\n\t\t}\n\t}\n\n\tconst pushBytes = (bytes: Uint8Array | Buffer | number[]) => (\n\t\tbytes.forEach (b => buffer.push(b))\n\t)\n\tconst pushInt16 = (value: number) => {\n\t\tpushBytes([(value >> 8) & 0xff, value & 0xff])\n\t}\n\n\tconst pushInt20 = (value: number) => (\n\t\tpushBytes([(value >> 16) & 0x0f, (value >> 8) & 0xff, value & 0xff])\n\t)\n\tconst writeByteLength = (length: number) => {\n\t\tif(length >= 4294967296) {\n\t\t\tthrow new Error('string too large to encode: ' + length)\n\t\t}\n\n\t\tif(length >= 1 << 20) {\n\t\t\tpushByte(TAGS.BINARY_32)\n\t\t\tpushInt(length, 4) // 32 bit integer\n\t\t} else if(length >= 256) {\n\t\t\tpushByte(TAGS.BINARY_20)\n\t\t\tpushInt20(length)\n\t\t} else {\n\t\t\tpushByte(TAGS.BINARY_8)\n\t\t\tpushByte(length)\n\t\t}\n\t}\n\n\tconst writeStringRaw = (str: string) => {\n\t\tconst bytes = Buffer.from (str, 'utf-8')\n\t\twriteByteLength(bytes.length)\n\t\tpushBytes(bytes)\n\t}\n\n\tconst writeJid = ({ domainType, device, user, server }: FullJid) => {\n\t\tif(typeof device !== 'undefined') {\n\t\t\tpushByte(TAGS.AD_JID)\n\t\t\tpushByte(domainType || 0)\n\t\t\tpushByte(device || 0)\n\t\t\twriteString(user)\n\t\t} else {\n\t\t\tpushByte(TAGS.JID_PAIR)\n\t\t\tif(user.length) {\n\t\t\t\twriteString(user)\n\t\t\t} else {\n\t\t\t\tpushByte(TAGS.LIST_EMPTY)\n\t\t\t}\n\n\t\t\twriteString(server)\n\t\t}\n\t}\n\n\tconst packNibble = (char: string) => {\n\t\tswitch (char) {\n\t\tcase '-':\n\t\t\treturn 10\n\t\tcase '.':\n\t\t\treturn 11\n\t\tcase '\\0':\n\t\t\treturn 15\n\t\tdefault:\n\t\t\tif(char >= '0' && char <= '9') {\n\t\t\t\treturn char.charCodeAt(0) - '0'.charCodeAt(0)\n\t\t\t}\n\n\t\t\tthrow new Error(`invalid byte for nibble \"${char}\"`)\n\t\t}\n\t}\n\n\tconst packHex = (char: string) => {\n\t\tif(char >= '0' && char <= '9') {\n\t\t\treturn char.charCodeAt(0) - '0'.charCodeAt(0)\n\t\t}\n\n\t\tif(char >= 'A' && char <= 'F') {\n\t\t\treturn 10 + char.charCodeAt(0) - 'A'.charCodeAt(0)\n\t\t}\n\n\t\tif(char >= 'a' && char <= 'f') {\n\t\t\treturn 10 + char.charCodeAt(0) - 'a'.charCodeAt(0)\n\t\t}\n\n\t\tif(char === '\\0') {\n\t\t\treturn 15\n\t\t}\n\n\t\tthrow new Error(`Invalid hex char \"${char}\"`)\n\t}\n\n\tconst writePackedBytes = (str: string, type: 'nibble' | 'hex') => {\n\t\tif(str.length > TAGS.PACKED_MAX) {\n\t\t\tthrow new Error('Too many bytes to pack')\n\t\t}\n\n\t\tpushByte(type === 'nibble' ? TAGS.NIBBLE_8 : TAGS.HEX_8)\n\n\t\tlet roundedLength = Math.ceil(str.length / 2.0)\n\t\tif(str.length % 2 !== 0) {\n\t\t\troundedLength |= 128\n\t\t}\n\n\t\tpushByte(roundedLength)\n\t\tconst packFunction = type === 'nibble' ? packNibble : packHex\n\n\t\tconst packBytePair = (v1: string, v2: string) => {\n\t\t\tconst result = (packFunction(v1) << 4) | packFunction(v2)\n\t\t\treturn result\n\t\t}\n\n\t\tconst strLengthHalf = Math.floor(str.length / 2)\n\t\tfor(let i = 0; i < strLengthHalf;i++) {\n\t\t\tpushByte(packBytePair(str[2 * i], str[2 * i + 1]))\n\t\t}\n\n\t\tif(str.length % 2 !== 0) {\n\t\t\tpushByte(packBytePair(str[str.length - 1], '\\x00'))\n\t\t}\n\t}\n\n\tconst isNibble = (str: string) => {\n\t\tif(str.length > TAGS.PACKED_MAX) {\n\t\t\treturn false\n\t\t}\n\n\t\tfor(let i = 0;i < str.length;i++) {\n\t\t\tconst char = str[i]\n\t\t\tconst isInNibbleRange = char >= '0' && char <= '9'\n\t\t\tif(!isInNibbleRange && char !== '-' && char !== '.') {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\treturn true\n\t}\n\n\tconst isHex = (str: string) => {\n\t\tif(str.length > TAGS.PACKED_MAX) {\n\t\t\treturn false\n\t\t}\n\n\t\tfor(let i = 0;i < str.length;i++) {\n\t\t\tconst char = str[i]\n\t\t\tconst isInNibbleRange = char >= '0' && char <= '9'\n\t\t\tif(!isInNibbleRange && !(char >= 'A' && char <= 'F') && !(char >= 'a' && char <= 'f')) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\treturn true\n\t}\n\n\tconst writeString = (str: string) => {\n\t\tconst tokenIndex = TOKEN_MAP[str]\n\t\tif(tokenIndex) {\n\t\t\tif(typeof tokenIndex.dict === 'number') {\n\t\t\t\tpushByte(TAGS.DICTIONARY_0 + tokenIndex.dict)\n\t\t\t}\n\n\t\t\tpushByte(tokenIndex.index)\n\t\t} else if(isNibble(str)) {\n\t\t\twritePackedBytes(str, 'nibble')\n\t\t} else if(isHex(str)) {\n\t\t\twritePackedBytes(str, 'hex')\n\t\t} else if(str) {\n\t\t\tconst decodedJid = jidDecode(str)\n\t\t\tif(decodedJid) {\n\t\t\t\twriteJid(decodedJid)\n\t\t\t} else {\n\t\t\t\twriteStringRaw(str)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst writeListStart = (listSize: number) => {\n\t\tif(listSize === 0) {\n\t\t\tpushByte(TAGS.LIST_EMPTY)\n\t\t} else if(listSize < 256) {\n\t\t\tpushBytes([TAGS.LIST_8, listSize])\n\t\t} else {\n\t\t\tpushByte(TAGS.LIST_16)\n\t\t\tpushInt16(listSize)\n\t\t}\n\t}\n\n\tconst validAttributes = Object.keys(attrs).filter(k => (\n\t\ttypeof attrs[k] !== 'undefined' && attrs[k] !== null\n\t))\n\n\twriteListStart(2 * validAttributes.length + 1 + (typeof content !== 'undefined' ? 1 : 0))\n\twriteString(tag)\n\n\tfor(const key of validAttributes) {\n\t\tif(typeof attrs[key] === 'string') {\n\t\t\twriteString(key)\n\t\t\twriteString(attrs[key])\n\t\t}\n\t}\n\n\tif(typeof content === 'string') {\n\t\twriteString(content)\n\t} else if(Buffer.isBuffer(content) || content instanceof Uint8Array) {\n\t\twriteByteLength(content.length)\n\t\tpushBytes(content)\n\t} else if(Array.isArray(content)) {\n\t\twriteListStart(content.length)\n\t\tfor(const item of content) {\n\t\t\tencodeBinaryNode(item, opts, buffer)\n\t\t}\n\t} else if(typeof content === 'undefined') {\n\t\t// do nothing\n\t} else {\n\t\tthrow new Error(`invalid children for header \"${tag}\": ${content} (${typeof content})`)\n\t}\n\n\treturn Buffer.from(buffer)\n}\n"]}