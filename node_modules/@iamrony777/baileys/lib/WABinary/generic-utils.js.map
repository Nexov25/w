{"version":3,"file":"generic-utils.js","sourceRoot":"/","sources":["WABinary/generic-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Boom } from '@hapi/boom'\nimport { proto } from '../../WAProto'\nimport { BinaryNode } from './types'\n\n// some extra useful utilities\n\nexport const getBinaryNodeChildren = (node: BinaryNode | undefined, childTag: string) => {\n\tif(Array.isArray(node?.content)) {\n\t\treturn node!.content.filter(item => item.tag === childTag)\n\t}\n\n\treturn []\n}\n\nexport const getAllBinaryNodeChildren = ({ content }: BinaryNode) => {\n\tif(Array.isArray(content)) {\n\t\treturn content\n\t}\n\n\treturn []\n}\n\nexport const getBinaryNodeChild = (node: BinaryNode | undefined, childTag: string) => {\n\tif(Array.isArray(node?.content)) {\n\t\treturn node?.content.find(item => item.tag === childTag)\n\t}\n}\n\nexport const getBinaryNodeChildBuffer = (node: BinaryNode | undefined, childTag: string) => {\n\tconst child = getBinaryNodeChild(node, childTag)?.content\n\tif(Buffer.isBuffer(child) || child instanceof Uint8Array) {\n\t\treturn child\n\t}\n}\n\nexport const getBinaryNodeChildString = (node: BinaryNode | undefined, childTag: string) => {\n\tconst child = getBinaryNodeChild(node, childTag)?.content\n\tif(Buffer.isBuffer(child) || child instanceof Uint8Array) {\n\t\treturn Buffer.from(child).toString('utf-8')\n\t} else if(typeof child === 'string') {\n\t\treturn child\n\t}\n}\n\nexport const getBinaryNodeChildUInt = (node: BinaryNode, childTag: string, length: number) => {\n\tconst buff = getBinaryNodeChildBuffer(node, childTag)\n\tif(buff) {\n\t\treturn bufferToUInt(buff, length)\n\t}\n}\n\nexport const assertNodeErrorFree = (node: BinaryNode) => {\n\tconst errNode = getBinaryNodeChild(node, 'error')\n\tif(errNode) {\n\t\tthrow new Boom(errNode.attrs.text || 'Unknown error', { data: +errNode.attrs.code })\n\t}\n}\n\nexport const reduceBinaryNodeToDictionary = (node: BinaryNode, tag: string) => {\n\tconst nodes = getBinaryNodeChildren(node, tag)\n\tconst dict = nodes.reduce(\n\t\t(dict, { attrs }) => {\n\t\t\tdict[attrs.name || attrs.config_code] = attrs.value || attrs.config_value\n\t\t\treturn dict\n\t\t}, { } as { [_: string]: string }\n\t)\n\treturn dict\n}\n\nexport const getBinaryNodeMessages = ({ content }: BinaryNode) => {\n\tconst msgs: proto.WebMessageInfo[] = []\n\tif(Array.isArray(content)) {\n\t\tfor(const item of content) {\n\t\t\tif(item.tag === 'message') {\n\t\t\t\tmsgs.push(proto.WebMessageInfo.decode(item.content as Buffer))\n\t\t\t}\n\t\t}\n\t}\n\n\treturn msgs\n}\n\nfunction bufferToUInt(e: Uint8Array | Buffer, t: number) {\n\tlet a = 0\n\tfor(let i = 0; i < t; i++) {\n\t\ta = 256 * a + e[i]\n\t}\n\n\treturn a\n}\n\nconst tabs = (n: number) => '\\t'.repeat(n)\n\nexport function binaryNodeToString(node: BinaryNode | BinaryNode['content'], i = 0) {\n\tif(!node) {\n\t\treturn node\n\t}\n\n\tif(typeof node === 'string') {\n\t\treturn tabs(i) + node\n\t}\n\n\tif(node instanceof Uint8Array) {\n\t\treturn tabs(i) + Buffer.from(node).toString('hex')\n\t}\n\n\tif(Array.isArray(node)) {\n\t\treturn node.map((x) => tabs(i + 1) + binaryNodeToString(x, i + 1)).join('\\n')\n\t}\n\n\tconst children = binaryNodeToString(node.content, i + 1)\n\n\tconst tag = `<${node.tag} ${Object.entries(node.attrs || {})\n\t\t.filter(([, v]) => v !== undefined)\n\t\t.map(([k, v]) => `${k}='${v}'`)\n\t\t.join(' ')}`\n\n\tconst content: string = children ? `>\\n${children}\\n${tabs(i)}</${node.tag}>` : '/>'\n\n\treturn tag + content\n}"]}